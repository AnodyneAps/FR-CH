(function() {

	/* start-dbtfy-addonss */
		/* start-dbtfy-addtocart-animation */ function themeAddtocartAnimation(){ {%- if settings.dbtfy_addtocart_animation -%}
	
		'use strict';
	/** @type {!Array} */
	var _0x9f47 = ["dbtfyATCAnimationType", "settings", "dbtfyATCAnimationInterval", "animationSlow", "variables", "slow ", " ", "btn--addtocart_animation", "addClass", ".product-single__add-to-cart .btn--add-to-cart:not([disabled])", ".btn--addtocart_animation", "removeClass"];
	/**
	 * @return {undefined}
	 */
	function AddtocartAnimation() {
		/**
		 * @return {undefined}
		 */
		function pingFunc() {
			const command_codes = $(_0x9f47[10]);
			command_codes[_0x9f47[8]](data);
			setTimeout(function() {
				command_codes[_0x9f47[11]](data);
			}, ngiScroll_timeout);
		}
		const stripeAPIVersion = theme[_0x9f47[1]][_0x9f47[0]];
		const rumbleSpeed = theme[_0x9f47[1]][_0x9f47[2]] * 1000;
		const ngiScroll_timeout = theme[_0x9f47[4]][_0x9f47[3]];
		const data = `${_0x9f47[5]}${stripeAPIVersion}${_0x9f47[6]}`;
		$(_0x9f47[9])[_0x9f47[8]](_0x9f47[7]);
		setInterval(pingFunc, rumbleSpeed);
	}
	AddtocartAnimation();
	{%- endif -%} } /* end-dbtfy-addtocart-animation */
	
	
		/* start-dbtfy-age-check */ function themeAgeCheck(){ {%- if settings.dbtfy_age_check -%}
		'use strict';
		/** @type {!Array} */
		var _0x6086 = [".dbtfy-age_check", "querySelector", "validAge", "dataset", ".ac-modal", ".ac-submit-birthdate", ".ac-year-picker", ".ac-month-picker", ".ac-day-picker", ".ac-adult-text", ".ac-error-text", ".ac-yes-option", ".ac-no-option", "isAnAdult", "click", "addEventListener", "value", "getTime", "display", "style", "none", "block", "open", "modal", "close", "", "=", ";", "split", "cookie", "length", "substring", "charAt", " ", "indexOf", "setTime", "expires=", "toGMTString", "; ", "; path=/"];
		/**
		 * @return {undefined}
		 */
		function AgeCheckPopup() {
			/**
			 * @return {undefined}
			 */
			function gotoNewOfflinePage() {
				showModal();
				_lmm();
				const _0xf640xe = commaStringToArray(_0x6086[13]);
				if (_0xf640xe) {
					width();
				} else {
					backViewPageIsDifferentOffline();
				}
			}
			/**
			 * @return {undefined}
			 */
			function showModal() {
				if (_0xf640x5) {
					_0xf640x5[_0x6086[15]](_0x6086[14], () => {
						show();
					});
				}
			}
			/**
			 * @return {undefined}
			 */
			function _lmm() {
				if (_0xf640xb) {
					_0xf640xb[_0x6086[15]](_0x6086[14], () => {
						replace(_0x6086[13], true);
						width();
					});
				}
				if (_0xf640xc) {
					_0xf640xc[_0x6086[15]](_0x6086[14], () => {
						offset();
					});
				}
			}
			/**
			 * @return {undefined}
			 */
			function show() {
				if (!sArrDayId || !sArrHiddenEventId || !postData2) {
					return;
				}
				const ms = parseInt(sArrDayId[_0x6086[16]]);
				const mm2 = parseInt(postData2[_0x6086[16]]);
				const prevDay = parseInt(sArrHiddenEventId[_0x6086[16]]);
				const _0xf640x15 = new Date(ms + key, mm2, prevDay);
				const _0xf640x16 = new Date;
				if (!ms || !mm2 || !prevDay) {
					offset();
					return;
				}
				if (_0xf640x16[_0x6086[17]]() - _0xf640x15[_0x6086[17]]() < 0) {
					offset();
				} else {
					replace(_0x6086[13], true);
					width();
				}
			}
			/**
			 * @return {undefined}
			 */
			function offset() {
				if (_0xf640x9) {
					_0xf640x9[_0x6086[19]][_0x6086[18]] = _0x6086[20];
				}
				if (_0xf640xa) {
					_0xf640xa[_0x6086[19]][_0x6086[18]] = _0x6086[21];
				}
			}
			/**
			 * @return {undefined}
			 */
			function backViewPageIsDifferentOffline() {
				theme[_0x6086[23]][_0x6086[22]](artistTrack);
			}
			/**
			 * @return {undefined}
			 */
			function width() {
				theme[_0x6086[23]][_0x6086[24]](artistTrack);
			}
			/**
			 * @param {?} value
			 * @return {?}
			 */
			function commaStringToArray(value) {
				const data = `${_0x6086[25]}${value}${_0x6086[26]}`;
				const r = document[_0x6086[29]][_0x6086[28]](_0x6086[27]);
				for (let o = 0; o < r[_0x6086[30]]; o++) {
					let packByNumType = r[o];
					for (; packByNumType[_0x6086[32]](0) === _0x6086[33];) {
						packByNumType = packByNumType[_0x6086[31]](1, packByNumType[_0x6086[30]]);
					}
					if (packByNumType[_0x6086[34]](data) === 0) {
						return packByNumType[_0x6086[31]](data[_0x6086[30]], packByNumType[_0x6086[30]]);
					}
				}
				return null;
			}
			/**
			 * @param {?} tag
			 * @param {boolean} content
			 * @return {undefined}
			 */
			function replace(tag, content) {
				const _0xf640x22 = 7;
				const _0xf640x23 = new Date;
				_0xf640x23[_0x6086[35]](_0xf640x23[_0x6086[17]]() + _0xf640x22 * 24 * 60 * 60 * 1000);
				const objStr = `${_0x6086[36]}${_0xf640x23[_0x6086[37]]()}${_0x6086[25]}`;
				document[_0x6086[29]] = `${_0x6086[25]}${tag}${_0x6086[26]}${content}${_0x6086[38]}${objStr}${_0x6086[39]}`;
			}
			const _0xf640x2 = document[_0x6086[1]](_0x6086[0]);
			if (!_0xf640x2) {
				return;
			}
			const key = +_0xf640x2[_0x6086[3]][_0x6086[2]];
			const artistTrack = _0xf640x2[_0x6086[1]](_0x6086[4]);
			const _0xf640x5 = _0xf640x2[_0x6086[1]](_0x6086[5]);
			const sArrDayId = _0xf640x2[_0x6086[1]](_0x6086[6]);
			const postData2 = _0xf640x2[_0x6086[1]](_0x6086[7]);
			const sArrHiddenEventId = _0xf640x2[_0x6086[1]](_0x6086[8]);
			const _0xf640x9 = _0xf640x2[_0x6086[1]](_0x6086[9]);
			const _0xf640xa = _0xf640x2[_0x6086[1]](_0x6086[10]);
			const _0xf640xb = _0xf640x2[_0x6086[1]](_0x6086[11]);
			const _0xf640xc = _0xf640x2[_0x6086[1]](_0x6086[12]);
			gotoNewOfflinePage();
		}
		AgeCheckPopup();
	
		{%- endif -%} }
	
		function themeAgeCheckDestroy() { {%- if settings.dbtfy_age_check -%}
		'use strict';
		/** @type {!Array} */
		var _0x238b = [".dbtfy-age_check", "querySelector", "remove"];
		const ageCheck = document[_0x238b[1]](_0x238b[0]);
		if (ageCheck) {
			ageCheck[_0x238b[2]]();
		};
		{%- endif -%} } /* end-dbtfy-age-check */
	
		 /* start-dbtfy-agree-to-terms */ function themeAgreeToTerms(){ {%- if settings.dbtfy_agree_to_terms -%}
		 'use strict';
		 /** @type {!Array} */
		 var _0xbad6 = [".dbtfy-agree_to_terms", ".at-terms-input", "[name='checkout']", ".at-terms-error-message", ".additional_checkout_buttons", "querySelectorAll", "length", "change", "checked", "agreeTerms", "true", "setItem", "forEach", "disabled", "removeAttribute", "hidden", "setAttribute", "removeItem", "addEventListener", "click", "data-is-custom-click", "hasAttribute", "form", "closest", "querySelector", "orderFeedbackHasErrors", "POST", "/cart/update.js", "attributes[Accepted terms at]=", "", 
		 "json", "ajax", "innerHTML", "agreeTermsWarningMessage", "strings", ".drawer__header", "find", "#CartDrawer", ".drawer__inner", ".dbtfy-cart_countdown.sticky", "offset", "top", "height", "scrollTop", "agreeToTCHasErrors", "animate", "destroy", "loadingState", "preventDefault", "ajaxCart.afterCartLoad", "on", "body"];
		 /**
			* @return {undefined}
			*/
		 function AgreeToTerms() {
			 const DOMContentLoaded = _0xbad6[0];
			 const a = _0xbad6[1];
			 const DOM_CONTENT_LOADED = _0xbad6[2];
			 const e = _0xbad6[3];
			 const DOMNodeRemoved = _0xbad6[4];
			 const _0xa49ex7 = document[_0xbad6[5]](DOMContentLoaded);
			 if (!_0xa49ex7[_0xbad6[6]]) {
				 return;
			 }
			 const _0xa49ex8 = document[_0xbad6[5]](a);
			 const _0xa49ex9 = document[_0xbad6[5]](DOM_CONTENT_LOADED);
			 const _0xa49exa = document[_0xbad6[5]](e);
			 const _0xa49exb = document[_0xbad6[5]](DOMNodeRemoved);
			 _0xa49ex8[_0xbad6[12]]((canCreateDiscussions) => {
				 canCreateDiscussions[_0xbad6[18]](_0xbad6[7], (canCreateDiscussions) => {
					 if (canCreateDiscussions[_0xbad6[8]]) {
						 localStorage[_0xbad6[11]](_0xbad6[9], _0xbad6[10]);
						 if (_0xa49ex8[_0xbad6[6]]) {
							 _0xa49ex8[_0xbad6[12]]((canCreateDiscussions) => {
								 /** @type {boolean} */
								 canCreateDiscussions[_0xbad6[8]] = true;
							 });
						 }
						 if (_0xa49ex9[_0xbad6[6]]) {
							 _0xa49ex9[_0xbad6[12]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xbad6[14]](_0xbad6[13]);
							 });
						 }
						 if (_0xa49exa[_0xbad6[6]]) {
							 _0xa49exa[_0xbad6[12]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xbad6[16]](_0xbad6[15], _0xbad6[15]);
							 });
						 }
						 if (_0xa49exb[_0xbad6[6]]) {
							 _0xa49exb[_0xbad6[12]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xbad6[14]](_0xbad6[15]);
							 });
						 }
					 } else {
						 localStorage[_0xbad6[17]](_0xbad6[9]);
						 if (_0xa49ex8[_0xbad6[6]]) {
							 _0xa49ex8[_0xbad6[12]]((canCreateDiscussions) => {
								 /** @type {boolean} */
								 canCreateDiscussions[_0xbad6[8]] = false;
							 });
						 }
						 if (_0xa49exb[_0xbad6[6]]) {
							 _0xa49exb[_0xbad6[12]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xbad6[16]](_0xbad6[15], _0xbad6[15]);
							 });
						 }
					 }
				 });
				 if (localStorage[_0xbad6[9]]) {
					 /** @type {boolean} */
					 canCreateDiscussions[_0xbad6[8]] = true;
					 if (_0xa49exb[_0xbad6[6]]) {
						 _0xa49exb[_0xbad6[12]]((canCreateDiscussions) => {
							 canCreateDiscussions[_0xbad6[14]](_0xbad6[15]);
						 });
					 }
				 }
			 });
			 _0xa49ex9[_0xbad6[12]]((delete_behavior_form) => {
				 delete_behavior_form[_0xbad6[18]](_0xbad6[19], (canCreateDiscussions) => {
					 if (delete_behavior_form[_0xbad6[21]](_0xbad6[20])) {
						 delete_behavior_form[_0xbad6[14]](_0xbad6[20]);
						 return;
					 }
					 const b = delete_behavior_form[_0xbad6[23]](_0xbad6[22]);
					 const _0xa49ex12 = b ? b[_0xbad6[24]](a) : null;
					 const _0xa49exf = b ? b[_0xbad6[24]](e) : null;
					 if (!_0xa49ex12) {
						 return;
					 }
					 if (_0xa49ex12[_0xbad6[8]]) {
						 setTimeout(() => {
							 if (!window[_0xbad6[25]]) {
								 delete_behavior_form[_0xbad6[16]](_0xbad6[20], _0xbad6[10]);
								 delete_behavior_form[_0xbad6[19]]();
								 /** @type {boolean} */
								 window[_0xbad6[25]] = false;
								 jQuery[_0xbad6[31]]({
									 type : _0xbad6[26],
									 url : _0xbad6[27],
									 data : `${_0xbad6[28]}${new Date}${_0xbad6[29]}`,
									 dataType : _0xbad6[30]
								 });
							 }
						 }, 100);
						 if (_0xa49exa[_0xbad6[6]]) {
							 _0xa49exa[_0xbad6[12]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xbad6[16]](_0xbad6[15], _0xbad6[15]);
							 });
						 }
					 } else {
						 if (_0xa49exf) {
							 _0xa49exf[_0xbad6[32]] = theme[_0xbad6[34]][_0xbad6[33]];
							 _0xa49exf[_0xbad6[14]](_0xbad6[15]);
							 const _0xa49ex13 = $(delete_behavior_form)[_0xbad6[23]](_0xbad6[37])[_0xbad6[36]](_0xbad6[35]);
							 const document = $(delete_behavior_form)[_0xbad6[23]](_0xbad6[37])[_0xbad6[36]](_0xbad6[38]);
							 const _0xa49ex15 = document[_0xbad6[36]](DOMContentLoaded);
							 const _0xa49ex16 = document[_0xbad6[36]](_0xbad6[39]);
							 const resampleValue = _0xa49ex15[_0xbad6[40]]() ? _0xa49ex15[_0xbad6[40]]()[_0xbad6[41]] : 0;
							 const nearestPoint = _0xa49ex13[_0xbad6[42]]() || 0;
							 const tap = _0xa49ex16[_0xbad6[42]]() || 0;
							 const defh = $(window)[_0xbad6[43]]();
							 const minh = document[_0xbad6[43]]();
							 const scrollHeight = 10;
							 /** @type {boolean} */
							 window[_0xbad6[44]] = true;
							 document[_0xbad6[45]]({
								 scrollTop : resampleValue - nearestPoint - tap - defh + minh - scrollHeight
							 }, 500);
						 }
						 setTimeout(() => {
							 theme[_0xbad6[47]][_0xbad6[46]](delete_behavior_form);
						 }, 0);
						 canCreateDiscussions[_0xbad6[48]]();
						 return false;
					 }
				 });
			 });
		 }
		 AgreeToTerms();
		 $(_0xbad6[51])[_0xbad6[50]](_0xbad6[49], function(canCreateDiscussions, isSlidingUp) {
			 AgreeToTerms();
		 });
		 
		 {%- endif -%} } 
	
		 function themeAgreeToTermsDestroy() { {%- if settings.dbtfy_agree_to_terms -%}
		 'use strict';
		 /** @type {!Array} */
		 var _0xbe29 = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-agree_to_terms", "querySelectorAll", "length", "remove", "forEach"];
		 destroyAgreeToTerms();
		 $(_0xbe29[2])[_0xbe29[1]](_0xbe29[0], function(canCreateDiscussions, isSlidingUp) {
			 destroyAgreeToTerms();
		 });
		 /**
			* @return {undefined}
			*/
		 function destroyAgreeToTerms() {
			 const _0x718dx4 = document[_0xbe29[4]](_0xbe29[3]);
			 if (_0x718dx4[_0xbe29[5]]) {
				 _0x718dx4[_0xbe29[7]]((canCreateDiscussions) => {
					 canCreateDiscussions[_0xbe29[6]]();
				 });
			 }
		 };
		 {%- endif -%} } /* end-dbtfy-agree-to-terms */
	
	
		/* start-dbtfy-automatic-geolocation */ function themeAutomaticGeolocation(){ {%- if settings.dbtfy_automatic_geolocation -%} 
		'use strict';
		/** @type {!Array} */
		var _0xa50d = [".dbtfy_currency_and_locales", "querySelector", ",", "split", "data-currencies", "getAttribute", "data-locales", "#localization-menu--header, #localization-menu--footer", "button[type='submit']", "https://api.teathemes.net/currency", "ok", "json", "currency", "language_code", "select[name='currency_code'], select.currency-code", "querySelectorAll", "select[name='locale_code']", "includes", "length", "value", "forEach", "currencyCode", "setItem", "shopCurrency", "strings", "localeCode", 
		"shopPrimaryLocale", "click", "getItem"];
		/**
		 * @return {undefined}
		 */
		async function AutomaticGeolocation() {
			const _0xa5dbx2 = document[_0xa50d[1]](_0xa50d[0]);
			if (!_0xa5dbx2) {
				return;
			}
			const accessors = _0xa5dbx2[_0xa50d[5]](_0xa50d[4])[_0xa50d[3]](_0xa50d[2]);
			const command_codes = _0xa5dbx2[_0xa50d[5]](_0xa50d[6])[_0xa50d[3]](_0xa50d[2]);
			const _0xa5dbx5 = document[_0xa50d[1]](_0xa50d[7]);
			const _0xa5dbx6 = _0xa5dbx5 ? _0xa5dbx5[_0xa50d[1]](_0xa50d[8]) : null;
			const YAHOO_FEED_API_URL = _0xa50d[9];
			const _0xa5dbx8 = await fetch(YAHOO_FEED_API_URL);
			if (_0xa5dbx8[_0xa50d[10]]) {
				const _0xa5dbx9 = await _0xa5dbx8[_0xa50d[11]]();
				const datum = _0xa5dbx9[_0xa50d[12]];
				const data = _0xa5dbx9[_0xa50d[13]];
				const _0xa5dbxc = document[_0xa50d[15]](_0xa50d[14]);
				const input = document[_0xa50d[15]](_0xa50d[16]);
				if (accessors[_0xa50d[17]](datum) && _0xa5dbxc[_0xa50d[18]]) {
					_0xa5dbxc[_0xa50d[20]]((tmp) => {
						tmp[_0xa50d[19]] = datum;
					});
					localStorage[_0xa50d[22]](_0xa50d[21], datum);
				} else {
					localStorage[_0xa50d[22]](_0xa50d[21], theme[_0xa50d[24]][_0xa50d[23]]);
				}
				if (command_codes[_0xa50d[17]](data) && input[_0xa50d[18]]) {
					input[_0xa50d[20]]((beacons) => {
						beacons[_0xa50d[19]] = data;
					});
					localStorage[_0xa50d[22]](_0xa50d[25], data);
				} else {
					localStorage[_0xa50d[22]](_0xa50d[25], theme[_0xa50d[24]][_0xa50d[26]]);
				}
				if (_0xa5dbx6) {
					_0xa5dbx6[_0xa50d[27]]();
				}
			}
		}
		if (!localStorage[_0xa50d[28]](_0xa50d[21]) && !localStorage[_0xa50d[28]](_0xa50d[25])) {
			AutomaticGeolocation();
		};
		{%- endif -%} } /* end-dbtfy-automatic-geolocation */
	
	
			/* start-dbtfy-back-in-stock */ function themeBackInStock(){ {%- if settings.dbtfy_back_in_stock -%} 
			'use strict';
			/** @type {!Array} */
			var _0x64c2 = [".dbtfy-back_in_stock", "querySelector", "form", ".product-single__variants", "querySelectorAll", "length", "div[data-section-type='product-template']", "closest", "data-section-id", "getAttribute", "productId", "dataset", ".product-single", ".product-single__meta--wrapper", "#ProductJson-", "", "innerHTML", "ProductJson-", "getElementById", "parse", "observe", "change", "addEventListener", "body", "forEach", "notify_products", "removeItem", "submit", "[id^='MainProductSelect']", "option:checked", 
			"value", "getItem", "id", "filter", "push", "stringify", "setItem", ".input-color_swatches:checked", ".custom_swatch_elements", ".label-color_swatches", "data-label", ': <span class="variant-label-option-value">', "</span>", "find", "productSelector", "[id^='MainProductSelect'] option[value='", "variantId", "']", "data-option-1", "data-option-2", "data-option-3", ".single-option-selector__radio[name='option", "'][value='", "escape", "'], .input-color_swatches[data-option-position='option", "checked", 
			"dispatchEvent", "radio", ".single-option-selector__radio", "option[value='", "select", ".notify_form__success", ".notify_form__label", ".notify_form__inputs", "hidden", "removeAttribute", "setAttribute", ".notify_form_message", ".product-single__add-to-cart", "variants", "variant-soldout", "contains", "classList", "available", "each", "url", "bodyMessage", "data-body", "?variant="];
			/**
			 * @return {undefined}
			 */
			function BackInStock() {
				/**
				 * @return {undefined}
				 */
				function ShowTheBack() {
					const _0xcc18x17 = document[_0x64c2[4]](_0x64c2[37]);
					_0xcc18x17[_0x64c2[24]]((canCreateDiscussions) => {
						const _0xcc18x19 = canCreateDiscussions[_0x64c2[7]](_0x64c2[38]);
						const f = _0xcc18x19 ? _0xcc18x19[_0x64c2[1]](_0x64c2[39]) : null;
						const fullPath = f ? f[_0x64c2[9]](_0x64c2[40]) : null;
						const allowedStr = canCreateDiscussions[_0x64c2[30]];
						if (f && fullPath) {
							f[_0x64c2[16]] = `${_0x64c2[15]}${fullPath}${_0x64c2[41]}${allowedStr}${_0x64c2[42]}`;
						}
					});
				}
				/**
				 * @param {?} HTTP
				 * @param {?} action$
				 * @return {undefined}
				 */
				function model(HTTP, action$) {
					const data = sessionStorage[_0x64c2[31]](_0x64c2[25]);
					const _0xcc18x14 = data ? JSON[_0x64c2[19]](data) : [];
					const _0xcc18x1e = _0xcc18x14[_0x64c2[43]]((boardManager) => {
						return boardManager[_0x64c2[32]] === action$;
					});
					if (!_0xcc18x1e) {
						return;
					}
					const _0xcc18x1f = HTTP[_0x64c2[11]][_0x64c2[44]];
					const _0xcc18x20 = HTTP[_0x64c2[1]](`${_0x64c2[45]}${_0xcc18x1e[_0x64c2[46]]}${_0x64c2[47]}`);
					if (!_0xcc18x20) {
						return;
					}
					const _0xcc18x21 = [_0xcc18x20[_0x64c2[9]](_0x64c2[48]), _0xcc18x20[_0x64c2[9]](_0x64c2[49]), _0xcc18x20[_0x64c2[9]](_0x64c2[50])];
					switch(_0xcc18x1f) {
						case _0x64c2[57]:
							_0xcc18x21[_0x64c2[24]]((layer, canCreateDiscussions) => {
								const _0xcc18x24 = HTTP[_0x64c2[4]](`${_0x64c2[51]}${canCreateDiscussions + 1}${_0x64c2[52]}${CSS[_0x64c2[53]](layer)}${_0x64c2[54]}${canCreateDiscussions + 1}${_0x64c2[52]}${CSS[_0x64c2[53]](layer)}${_0x64c2[47]}`);
								_0xcc18x24[_0x64c2[24]]((canCreateDiscussions) => {
									/** @type {boolean} */
									canCreateDiscussions[_0x64c2[55]] = true;
									canCreateDiscussions[_0x64c2[56]](new Event(_0x64c2[21]));
								});
							});
							break;
						case _0x64c2[60]:
							_0xcc18x21[_0x64c2[24]]((values, wikiId) => {
								const subwikiListsCache = HTTP[_0x64c2[4]](_0x64c2[58]);
								if (!subwikiListsCache[_0x64c2[5]]) {
									return;
								}
								const agent = subwikiListsCache[wikiId];
								if (!agent) {
									return;
								}
								const _0xcc18x27 = agent[_0x64c2[1]](`${_0x64c2[59]}${CSS[_0x64c2[53]](values)}${_0x64c2[47]}`);
								if (_0xcc18x27) {
									agent[_0x64c2[30]] = values;
									agent[_0x64c2[56]](new Event(_0x64c2[21]));
								}
							});
							break;
					}
					const _0xcc18x28 = HTTP[_0x64c2[1]](_0x64c2[61]);
					const _0xcc18x29 = HTTP[_0x64c2[1]](_0x64c2[62]);
					const _0xcc18x2a = HTTP[_0x64c2[1]](_0x64c2[63]);
					_0xcc18x28[_0x64c2[65]](_0x64c2[64]);
					_0xcc18x29[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
					_0xcc18x2a[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
					/** @type {boolean} */
					_0xcc18x6 = true;
				}
				/**
				 * @param {?} name
				 * @param {?} friend
				 * @param {boolean} user
				 * @return {undefined}
				 */
				function add(name, friend, user) {
					if (_0xcc18x6) {
						/** @type {boolean} */
						_0xcc18x6 = false;
						return;
					}
					const userIdKey = name[_0x64c2[9]](_0x64c2[8]);
					const _0xcc18xb = name[_0x64c2[1]](_0x64c2[13]);
					const _0xcc18x2d = name[_0x64c2[1]](_0x64c2[62]);
					const validators = name[_0x64c2[1]](_0x64c2[67]);
					const _0xcc18x2f = name[_0x64c2[1]](_0x64c2[68]);
					const _0xcc18x30 = name[_0x64c2[1]](_0x64c2[28]);
					const _0xcc18x31 = name[_0x64c2[1]](_0x64c2[63]);
					const liu = name[_0x64c2[1]](_0x64c2[61]);
					const objStr = +_0xcc18x30[_0x64c2[30]];
					const which = friend[userIdKey] ? friend[userIdKey][_0x64c2[69]] : [];
					const setMinMaxZoom = _0xcc18xb ? _0xcc18xb[_0x64c2[72]][_0x64c2[71]](_0x64c2[70]) : false;
					let _0xcc18x36 = null;
					let adjustmentNeeded = false;
					$[_0x64c2[74]](which, function(canCreateDiscussions, isSlidingUp) {
						if (objStr === this[_0x64c2[32]]) {
							_0xcc18x36 = this;
							adjustmentNeeded = this[_0x64c2[73]];
						}
					});
					if (liu && user) {
						liu[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
					}
					if (!adjustmentNeeded || setMinMaxZoom) {
						const allowedStr = _0xcc18x31[_0x64c2[11]][_0x64c2[75]];
						const stripeAPIVersion = _0xcc18x31[_0x64c2[11]][_0x64c2[76]];
						_0xcc18x31[_0x64c2[65]](_0x64c2[64]);
						_0xcc18x2d[_0x64c2[65]](_0x64c2[64]);
						validators[_0x64c2[66]](_0x64c2[77], `${_0x64c2[15]}${stripeAPIVersion}${_0x64c2[15]}${allowedStr}${_0x64c2[78]}${objStr}${_0x64c2[15]}`);
						validators[_0x64c2[66]](_0x64c2[30], `${_0x64c2[15]}${stripeAPIVersion}${_0x64c2[15]}${allowedStr}${_0x64c2[78]}${objStr}${_0x64c2[15]}`);
						if (_0xcc18x2f) {
							_0xcc18x2f[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
						}
					} else {
						_0xcc18x31[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
						_0xcc18x2d[_0x64c2[66]](_0x64c2[64], _0x64c2[64]);
						if (_0xcc18x2f) {
							_0xcc18x2f[_0x64c2[65]](_0x64c2[64]);
						}
					}
				}
				const _0xcc18x2 = document[_0x64c2[1]](_0x64c2[0]);
				if (!_0xcc18x2) {
					return;
				}
				const _0xcc18x3 = _0xcc18x2[_0x64c2[1]](_0x64c2[2]);
				const _0xcc18x4 = document[_0x64c2[4]](_0x64c2[3]);
				const b = [];
				let _0xcc18x6 = false;
				if (_0xcc18x4[_0x64c2[5]]) {
					_0xcc18x4[_0x64c2[24]]((canCreateDiscussions) => {
						const name = canCreateDiscussions[_0x64c2[7]](_0x64c2[6]);
						const comparator = name[_0x64c2[9]](_0x64c2[8]);
						const action$ = +name[_0x64c2[1]](_0x64c2[12])[_0x64c2[11]][_0x64c2[10]];
						const result = name[_0x64c2[1]](_0x64c2[13]);
						model(name, action$);
						if ($(`${_0x64c2[14]}${comparator}${_0x64c2[15]}`)[_0x64c2[5]]) {
							b[comparator] = JSON[_0x64c2[19]](document[_0x64c2[18]](`${_0x64c2[17]}${comparator}${_0x64c2[15]}`)[_0x64c2[16]]);
							if (result) {
								const relationName = {
									attributes : true,
									childList : false,
									subtree : false
								};
								const _related2 = new MutationObserver(() => {
									add(name, b);
								});
								_related2[_0x64c2[20]](result, relationName);
							}
							document[_0x64c2[23]][_0x64c2[22]](_0x64c2[21], function(canCreateDiscussions) {
								add(name, b, true);
							});
							add(name, b, true);
						}
					});
				}
				sessionStorage[_0x64c2[26]](_0x64c2[25]);
				ShowTheBack();
				if (_0xcc18x3) {
					_0xcc18x3[_0x64c2[22]](_0x64c2[27], () => {
						const _0xcc18xf = _0xcc18x3[_0x64c2[7]](_0x64c2[6]);
						const port = +_0xcc18xf[_0x64c2[1]](_0x64c2[12])[_0x64c2[11]][_0x64c2[10]];
						const _0xcc18x10 = _0xcc18xf[_0x64c2[1]](_0x64c2[28]);
						const _0xcc18x11 = _0xcc18x10[_0x64c2[1]](_0x64c2[29]);
						const variantId = _0xcc18x11 ? +_0xcc18x11[_0x64c2[30]] : null;
						const data = sessionStorage[_0x64c2[31]](_0x64c2[25]);
						let store = [];
						if (data) {
							store = JSON[_0x64c2[19]](data);
						}
						store = store[_0x64c2[33]]((suitePorts) => {
							return suitePorts[_0x64c2[32]] !== port;
						});
						store[_0x64c2[34]]({
							id : port,
							variantId : variantId
						});
						sessionStorage[_0x64c2[36]](_0x64c2[25], JSON[_0x64c2[35]](store));
					});
				}
			}
			BackInStock();
			{%- endif -%} }
	
			function themeBackInStockDestroy() { {%- if settings.dbtfy_back_in_stock -%} 
			'use strict';
			/** @type {!Array} */
			var _0xeb5d = [".dbtfy-back_in_stock", "querySelectorAll", "length", "remove", "forEach"];
			destroyBackInStock();
			/**
			 * @return {undefined}
			 */
			function destroyBackInStock() {
				const _0x7073x2 = document[_0xeb5d[1]](_0xeb5d[0]);
				if (_0x7073x2[_0xeb5d[2]]) {
					_0x7073x2[_0xeb5d[4]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xeb5d[3]]();
					});
				}
			};
			{%- endif -%} } /* end-dbtfy-back-in-stock */
	
		/* start-dbtfy-cart-countdown */ function themeCartCountdown() { {%- if settings.dbtfy_cart_countdown -%}
		'use strict';
		/** @type {!Array} */
		var _0xcca7 = ["body", "template-cart", "contains", "classList", "dbtfy", ".dbtfy-cart_countdown", "$originalMsg", ".dbtfy-cart_countdown_default_msg", "$msgWhenOver", ".dbtfy-cart_countdown_msg_t_over", "$cartCountdown", "addToCartForm", "form[action*='/cart/add']", "cartCount", "cart-count", "data", "textMinutes", "string-minute", "textSeconds", "string-second", "hide", "cart-countdown-active", "removeClass", "addClass", ".minutes-cart_countdown", ".seconds-cart_countdown", "getTime", "show", "cart_endtime", 
		"setItem", "floor", "text", "minutes", "parse", "getItem", "wishlistAdded", "length", "ajaxCart.afterCartLoad", "item_count", "on", "afterRecommendationLoad"];
		/**
		 * @return {undefined}
		 */
		function CartCountdown() {
			/**
			 * @return {undefined}
			 */
			function _insert_template() {
				args[_0xcca7[4]] = $(_0xcca7[5]);
				args[_0xcca7[6]] = $(_0xcca7[7]);
				args[_0xcca7[8]] = $(_0xcca7[9]);
				args[_0xcca7[10]] = args[_0xcca7[4]];
				args[_0xcca7[11]] = $(_0xcca7[12]);
				args[_0xcca7[13]] = args[_0xcca7[4]][_0xcca7[15]](_0xcca7[14]);
				args[_0xcca7[16]] = args[_0xcca7[4]][_0xcca7[15]](_0xcca7[17]);
				args[_0xcca7[18]] = args[_0xcca7[4]][_0xcca7[15]](_0xcca7[19]);
			}
			/**
			 * @return {undefined}
			 */
			function gotoNewOfflinePage() {
				args[_0xcca7[10]][_0xcca7[20]]();
				_0x4f51x3[_0xcca7[22]](_0xcca7[21]);
			}
			/**
			 * @return {undefined}
			 */
			function checkReceivers() {
				clearInterval(timer);
			}
			/**
			 * @return {undefined}
			 */
			function clearInterval() {
				args[_0xcca7[6]][_0xcca7[23]](_0xcca7[20]);
				args[_0xcca7[8]][_0xcca7[22]](_0xcca7[20]);
			}
			/**
			 * @param {?} arg
			 * @return {undefined}
			 */
			function test(arg) {
				/**
				 * @param {number} suppressErrors
				 * @return {undefined}
				 */
				function notify(suppressErrors) {
					const pixelSizeTargetMax = (new Date)[_0xcca7[26]]();
					const _0x4f51x12 = articleAdjustedTopY - pixelSizeTargetMax;
					const prefix = Math[_0xcca7[30]](_0x4f51x12 % (1000 * 60 * 60) / (1000 * 60));
					const offset = Math[_0xcca7[30]](_0x4f51x12 % (1000 * 60) / 1000);
					if (!offset && offset !== 0) {
						checkReceivers();
						return;
					}
					if (prefix <= 0) {
						el[_0xcca7[20]]();
					} else {
						el[_0xcca7[27]]();
						el[_0xcca7[31]](prefix + args[_0xcca7[16]]);
					}
					view[_0xcca7[31]](offset + args[_0xcca7[18]]);
					if (suppressErrors !== 1 && prefix <= 0 && offset <= 0) {
						checkReceivers();
						clearInterval();
					}
				}
				const el = $(_0xcca7[24]);
				const view = $(_0xcca7[25]);
				const articleAdjustedTopY = (new Date(arg))[_0xcca7[26]]();
				const headerCenterY = (new Date)[_0xcca7[26]]();
				if (headerCenterY - articleAdjustedTopY > 0) {
					args[_0xcca7[10]][_0xcca7[27]]();
					clearInterval();
					return;
				}
				sessionStorage[_0xcca7[29]](_0xcca7[28], arg);
				notify(1);
				clearInterval(timer);
				/** @type {number} */
				timer = setInterval(notify, 1000);
				args[_0xcca7[10]][_0xcca7[27]]();
				_0x4f51x3[_0xcca7[23]](_0xcca7[21]);
			}
			/**
			 * @return {undefined}
			 */
			function setupYearRange() {
				const _0x4f51x16 = args[_0xcca7[4]][_0xcca7[15]](_0xcca7[32]);
				const BASE_TIME = Date[_0xcca7[33]](new Date);
				const opts = new Date(BASE_TIME + _0x4f51x16 * 60 * 1E3);
				const scriptInstanceOld = sessionStorage[_0xcca7[34]](_0xcca7[28]);
				if (window[_0xcca7[35]]) {
					test(opts);
					/** @type {boolean} */
					window[_0xcca7[35]] = false;
				} else {
					if (sessionStorage[_0xcca7[28]]) {
						test(scriptInstanceOld);
					} else {
						test(opts);
					}
				}
			}
			const args = this;
			const _0x4f51x3 = $(_0xcca7[0]);
			const _0x4f51x4 = document[_0xcca7[0]][_0xcca7[3]][_0xcca7[2]](_0xcca7[1]);
			let timer;
			_insert_template();
			if (sessionStorage[_0xcca7[28]]) {
				const opts = sessionStorage[_0xcca7[34]](_0xcca7[28]);
				test(opts);
			} else {
				if (_0x4f51x4 && args[_0xcca7[4]][_0xcca7[36]]) {
					setupYearRange();
				}
			}
			_0x4f51x3[_0xcca7[39]](_0xcca7[37], function(isSlidingUp, canCreateDiscussions) {
				_insert_template();
				setupYearRange();
				if (!canCreateDiscussions[_0xcca7[38]]) {
					checkReceivers();
					gotoNewOfflinePage();
				}
			});
			if (args[_0xcca7[13]] === 0) {
				checkReceivers();
			}
		}
		CartCountdown();
		$(_0xcca7[0])[_0xcca7[39]](_0xcca7[40], function(canCreateDiscussions) {
			CartCountdown();
		});
		{%- endif -%} }
	
		function themeCartCountdownDestroy(){ {%- if settings.dbtfy_cart_countdown -%}
		'use strict';
		/** @type {!Array} */
		var _0xb403 = ["ajaxCart.afterCartLoad", "on", "body", "afterRecommendationLoad", ".dbtfy-cart_countdown", "querySelectorAll", "length", "remove", "forEach"];
		destroyCartCountdown();
		$(_0xb403[2])[_0xb403[1]](_0xb403[0], function(canCreateDiscussions, isSlidingUp) {
			destroyCartCountdown();
		});
		$(_0xb403[2])[_0xb403[1]](_0xb403[3], function(canCreateDiscussions) {
			destroyCartCountdown();
		});
		/**
		 * @return {undefined}
		 */
		function destroyCartCountdown() {
			const _0x82e8x4 = document[_0xb403[5]](_0xb403[4]);
			if (_0x82e8x4[_0xb403[6]]) {
				_0x82e8x4[_0xb403[8]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xb403[7]]();
				});
			}
		};
		{%- endif -%}} /* end-dbtfy-cart-countdown */
	
		/* start-dbtfy-cart-discount */ function themeCartDiscount(){ {%- if settings.dbtfy_cart_discount -%}
		'use strict';
	/** @type {!Array} */
	var _0x945f = [".dbtfy-cart_discount", ".input-cart_discount", "length", "keydown", "keyCode", "preventDefault", "val", "", "click", "trigger", "button[name='checkout']", "find", "form", "closest", "target", "on", ".cd-apply", ".CartDiscount", "#CartDrawer", "ajaxCart.afterCartLoad", "body"];
	/**
	 * @return {undefined}
	 */
	function CartDiscount() {
		var $gBCRBottom = $(_0x945f[0]);
		var $realtime = $(_0x945f[1]);
		if (!$gBCRBottom[_0x945f[2]]) {
			return;
		}
		$realtime[_0x945f[15]](_0x945f[3], function(trackParts) {
			/** @type {number} */
			var artist = 13;
			if (trackParts[_0x945f[4]] === artist) {
				trackParts[_0x945f[5]]();
				if ($(this)[_0x945f[6]]() !== _0x945f[7]) {
					$(trackParts[_0x945f[14]])[_0x945f[13]](_0x945f[12])[_0x945f[11]](_0x945f[10])[_0x945f[9]](_0x945f[8]);
				}
			}
		});
		$(document)[_0x945f[15]](_0x945f[8], _0x945f[16], function(timeline_items) {
			timeline_items[_0x945f[5]]();
			var _0xd8d1x6 = $(timeline_items[_0x945f[14]])[_0x945f[13]](_0x945f[17])[_0x945f[11]](_0x945f[1])[_0x945f[6]]();
			if (_0xd8d1x6 !== _0x945f[7]) {
				var _0xd8d1x7 = $(timeline_items[_0x945f[14]])[_0x945f[13]](_0x945f[12])[_0x945f[11]](_0x945f[10]);
				if (!_0xd8d1x7[_0x945f[2]]) {
					_0xd8d1x7 = $(timeline_items[_0x945f[14]])[_0x945f[13]](_0x945f[18])[_0x945f[11]](_0x945f[10]);
				}
				_0xd8d1x7[_0x945f[9]](_0x945f[8]);
			}
		});
	}
	CartDiscount();
	$(_0x945f[20])[_0x945f[15]](_0x945f[19], function(canCreateDiscussions, isSlidingUp) {
		CartDiscount();
	});
	{%- endif -%} }
	
	function themeCartDiscountDestroy() { {%- if settings.dbtfy_cart_discount -%}
	'use strict';
	/** @type {!Array} */
	var _0x2d9f = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-cart_discount", "querySelectorAll", "length", "remove", "forEach"];
	destroyCartDiscount();
	$(_0x2d9f[2])[_0x2d9f[1]](_0x2d9f[0], function(canCreateDiscussions, isSlidingUp) {
		destroyCartDiscount();
	});
	/**
	 * @return {undefined}
	 */
	function destroyCartDiscount() {
		const _0xe391x4 = document[_0x2d9f[4]](_0x2d9f[3]);
		if (_0xe391x4[_0x2d9f[5]]) {
			_0xe391x4[_0x2d9f[7]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x2d9f[6]]();
			});
		}
	};
	{%- endif -%} } /* end-dbtfy-cart-discount */
	
	
		/* start-dbtfy-cart-favicon */ function themeCartFavicon(){ {%- if settings.dbtfy_cart_favicon -%}
		'use strict';
	/** @type {!Array} */
	var _0xc0d1 = ["item_count", "cartCount", "variables", "cartFaviconImage", "settings", "", "favicon", "getElementById", "href", "setAttribute", "faviconImage", "ajaxCart.afterCartLoad", "on", "body"];
	/**
	 * @param {?} type
	 * @return {undefined}
	 */
	function CartFavicon(type) {
		const _0x2e49x3 = type ? type[_0xc0d1[0]] : theme[_0xc0d1[2]][_0xc0d1[1]];
		if (theme[_0xc0d1[4]][_0xc0d1[3]] !== _0xc0d1[5]) {
			const _0x2e49x4 = document[_0xc0d1[7]](_0xc0d1[6]);
			if (_0x2e49x3 > 0) {
				_0x2e49x4[_0xc0d1[9]](_0xc0d1[8], theme[_0xc0d1[4]][_0xc0d1[3]]);
			} else {
				_0x2e49x4[_0xc0d1[9]](_0xc0d1[8], theme[_0xc0d1[4]][_0xc0d1[10]]);
			}
		}
	}
	CartFavicon();
	$(_0xc0d1[13])[_0xc0d1[12]](_0xc0d1[11], function(canCreateDiscussions, person) {
		CartFavicon(person);
	});
	
	{%- endif -%} } /* end-dbtfy-cart-favicon */
	
	/* start-dbtfy-cart-goal */ function themeCartGoal(){ {%- if settings.dbtfy_cart_goal -%}
	'use strict';
	/** @type {!Array} */
	var _0x284b = [".dbtfy-cart_goal", "before-amount-text", "data", "after-amount-text", "goal-reached-text", ".cg-wrapper", ".cg-free-shipping-text", ".cg-progress-bar", "goal-amount", "cart-total-count", "cart-total-amount", "length", "#currency-list-header[name='currency_code']", "shopCurrency", "strings", "val", "span.cart_goal_amount_new", "money", "convertAll", "text", "find", "total_price", "<span>", "</span>", "moneyFormat", ' <span class="cg-goal-amount text-money text-secondary"><span class="money">', 
	"formatMoney", "Currency", "</span></span> ", "html", "width", "", "%", "css", "show", "item_count", "hide", "ajaxCart.afterCartLoad", "on", "body"];
	/**
	 * @param {?} primaryTxHex
	 * @return {undefined}
	 */
	function CartGoal(primaryTxHex) {
		var $realtime = $(_0x284b[0]);
		var stripeAPIVersion = $realtime[_0x284b[2]](_0x284b[1]);
		var objStr = $realtime[_0x284b[2]](_0x284b[3]);
		var bowerPackageName = $realtime[_0x284b[2]](_0x284b[4]);
		var $gBCRBottom = $(_0x284b[5]);
		var body = $(_0x284b[6]);
		var validators = $(_0x284b[7]);
		/** @type {number} */
		var baseline = parseFloat($realtime[_0x284b[2]](_0x284b[8]));
		/** @type {number} */
		var whiteRating = parseInt($realtime[_0x284b[2]](_0x284b[9]));
		/** @type {number} */
		var remainder = parseFloat($realtime[_0x284b[2]](_0x284b[10]));
		if (!$realtime[_0x284b[11]]) {
			return;
		}
		var $li = $(_0x284b[12]);
		var A = theme[_0x284b[14]][_0x284b[13]];
		if ($li[_0x284b[11]]) {
			var type = $li[_0x284b[15]]();
			Currency[_0x284b[18]](A, type, _0x284b[16], _0x284b[17]);
		}
		if ($li[_0x284b[11]] && type !== A) {
			/** @type {number} */
			baseline = parseFloat($realtime[_0x284b[20]](_0x284b[16])[_0x284b[19]]()) * 100;
		}
		if (primaryTxHex) {
			/** @type {number} */
			remainder = primaryTxHex[_0x284b[21]] / 100;
		}
		/** @type {number} */
		var lineHeight = parseFloat(baseline - remainder);
		/** @type {number} */
		var oneActivity = 0;
		var query = `${_0x284b[22]}${bowerPackageName}${_0x284b[23]}`;
		if (lineHeight > 0) {
			var artistTrack = theme[_0x284b[14]][_0x284b[24]];
			/** @type {number} */
			oneActivity = (baseline - lineHeight) * 100 / baseline;
			query = `${_0x284b[22]}${stripeAPIVersion}${_0x284b[25]}${theme[_0x284b[27]][_0x284b[26]](lineHeight * 100, artistTrack)}${_0x284b[28]}${objStr}${_0x284b[23]}`;
		} else {
			/** @type {number} */
			oneActivity = 100;
		}
		body[_0x284b[29]](query);
		validators[_0x284b[33]](_0x284b[30], `${_0x284b[31]}${oneActivity}${_0x284b[32]}`);
		$gBCRBottom[_0x284b[34]]();
		if (primaryTxHex) {
			if (!primaryTxHex[_0x284b[35]]) {
				$gBCRBottom[_0x284b[36]]();
			}
		} else {
			if (whiteRating === 0) {
				$gBCRBottom[_0x284b[36]]();
			}
		}
	}
	CartGoal();
	$(_0x284b[39])[_0x284b[38]](_0x284b[37], function(canCreateDiscussions, primaryTxHex) {
		CartGoal(primaryTxHex);
	});
	
	{%- endif -%} }
	
	
	function themeCartGoalDestroy() { {%- if settings.dbtfy_cart_goal -%}
	'use strict';
	/** @type {!Array} */
	var _0xa940 = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-cart_goal", "querySelectorAll", "length", "remove", "forEach"];
	destroyCartGoal();
	$(_0xa940[2])[_0xa940[1]](_0xa940[0], function(canCreateDiscussions, isSlidingUp) {
		destroyCartGoal();
	});
	/**
	 * @return {undefined}
	 */
	function destroyCartGoal() {
		const _0xc392x4 = document[_0xa940[4]](_0xa940[3]);
		if (_0xc392x4[_0xa940[5]]) {
			_0xc392x4[_0xa940[7]]((canCreateDiscussions) => {
				canCreateDiscussions[_0xa940[6]]();
			});
		}
	};
	{%- endif -%} } /* end-dbtfy-cart-goal */
	
	
		/* start-dbtfy-cart-savings */ function themeCartSavings(){ {%- if settings.dbtfy_cart_savings -%}
		'use strict';
		/** @type {!Array} */
		var _0x96a2 = ["cart", "dbtfy:cartLoaded", "addEventListener", ".cart_savings-wrapper", "querySelectorAll", "moneyFormat", "strings", ".cart-discount", "querySelector", "parentElement", ".cart_savings-wrapper-text", "totalWithComparePrice", "dataset", "totalSavingsByComparePrice", "discountValue", "innerHTML", '<span class="money">', "formatMoney", "Currency", "</span>", "[data-cart-total]", "[data-cart-total-value]", ".cart__subtotal-compare-at", "", '<span class="cart__subtotal-discounted text-secondary"><span class="money">', 
		'</span></span> <span class="cart__subtotal-discounted text-muted text-strike"><span class="money">', "</span></span>", "forEach", "hidden", "removeAttribute", "setAttribute", "ajaxCart.afterCartLoad", "on", "body", "dbtfy:cartDiscountSaved", "dbtfy:discountUpdated"];
		/**
		 * @return {undefined}
		 */
		function CartSavings() {
			/**
			 * @return {undefined}
			 */
			function definition() {
				const _0x7909x3 = document[_0x96a2[4]](_0x96a2[3]);
				const artistTrack = theme[_0x96a2[6]][_0x96a2[5]];
				_0x7909x3[_0x96a2[27]]((canCreateDiscussions) => {
					const _0x7909x6 = canCreateDiscussions[_0x96a2[9]][_0x96a2[8]](_0x96a2[7]);
					const f = canCreateDiscussions[_0x96a2[8]](_0x96a2[10]);
					const GET_AUTH_URL_TIMEOUT = +canCreateDiscussions[_0x96a2[12]][_0x96a2[11]];
					const _0x7909x9 = +canCreateDiscussions[_0x96a2[12]][_0x96a2[13]];
					let waitBeforeReconnect = _0x7909x9;
					if (_0x7909x6) {
						const reconnectTimeIncrease = +_0x7909x6[_0x96a2[12]][_0x96a2[14]];
						waitBeforeReconnect = waitBeforeReconnect + reconnectTimeIncrease;
					}
					if (waitBeforeReconnect > 0) {
						f[_0x96a2[15]] = `${_0x96a2[16]}${theme[_0x96a2[18]][_0x96a2[17]](waitBeforeReconnect, artistTrack)}${_0x96a2[19]}`;
						const postDateGmt = GET_AUTH_URL_TIMEOUT - waitBeforeReconnect;
						const _0x7909xd = document[_0x96a2[4]](_0x96a2[20]);
						const _0x7909xe = document[_0x96a2[4]](_0x96a2[21]);
						const stripeAPIVersion = theme[_0x96a2[18]][_0x96a2[17]](postDateGmt, artistTrack);
						const allowedStr = theme[_0x96a2[18]][_0x96a2[17]](GET_AUTH_URL_TIMEOUT, artistTrack);
						_0x7909xd[_0x96a2[27]]((final) => {
							const _0x7909x12 = final[_0x96a2[8]](_0x96a2[22]);
							if (_0x7909x12) {
								final[_0x96a2[15]] = _0x96a2[23];
							}
							final[_0x96a2[15]] = `${_0x96a2[24]}${stripeAPIVersion}${_0x96a2[25]}${allowedStr}${_0x96a2[26]}`;
						});
						_0x7909xe[_0x96a2[27]]((final) => {
							final[_0x96a2[15]] = `${_0x96a2[16]}${stripeAPIVersion}${_0x96a2[19]}`;
						});
						canCreateDiscussions[_0x96a2[29]](_0x96a2[28]);
					} else {
						canCreateDiscussions[_0x96a2[30]](_0x96a2[28], _0x96a2[28]);
					}
				});
			}
			if (!theme[_0x96a2[0]]) {
				document[_0x96a2[2]](_0x96a2[1], definition);
			} else {
				definition();
			}
		}
		CartSavings();
		$(_0x96a2[33])[_0x96a2[32]](_0x96a2[31], function(canCreateDiscussions, isSlidingUp) {
			CartSavings();
		});
		document[_0x96a2[2]](_0x96a2[34], () => {
			CartSavings();
		});
		document[_0x96a2[2]](_0x96a2[35], () => {
			CartSavings();
		});
		
		{%- endif -%} }
		function themeCartSavingsDestroy() { {%- if settings.dbtfy_cart_savings -%}
		'use strict';
		/** @type {!Array} */
		var _0xba44 = ["ajaxCart.afterCartLoad", "on", "body", ".cart_savings-wrapper", "querySelectorAll", "length", "remove", "forEach"];
		destroyCartSavings();
		$(_0xba44[2])[_0xba44[1]](_0xba44[0], function(canCreateDiscussions, isSlidingUp) {
			destroyCartSavings();
		});
		/**
		 * @return {undefined}
		 */
		function destroyCartSavings() {
			const _0x9807x4 = document[_0xba44[4]](_0xba44[3]);
			if (_0x9807x4[_0xba44[5]]) {
				_0x9807x4[_0xba44[7]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xba44[6]]();
				});
			}
		};
		{%- endif -%} } /* end-dbtfy-cart-savings */
	
		/* start-dbtfy-cart-upsell */ function themeCartUpsell(){ {%- if settings.dbtfy_cart_upsell -%} 
		'use strict';
		/** @type {!Array} */
		var _0xec1f = [".cu-wrapper", "querySelector", ".cu-specific-upsell", "querySelectorAll", "length", "offerId", "dataset", "product_id", "some", "items", "filter", "from", "triggerId", "includes", "push", "#CartContainer .drawer__inner", "cloneNode", '.ajaxcart_row[data-line="', '"]', ".specific-upsell", "beforeend", '\r\n                    <div class="card-group spacer-top specific-upsell" data-line="', '"></div>\r\n                  ', "insertAdjacentHTML", '.specific-upsell[data-line="', "insertAdjacentElement", 
		"#cartForm .dbtfy_main_cart_container", '.cart__row[data-line="', "init", "ajaxCart", "forEach", "remove", ".cu-general-upsell", "productId", ".ajaxcart__general-upsell", '\r\n                  <div class="ajaxcart__general-upsell drawer__inner-section card-group"></div>\r\n                ', '\r\n                <div class="card-group spacer-top general-upsell" data-product-id="', '"></div>\r\n              ', '.general-upsell[data-product-id="', ".ajaxcart__general-upsell, .general-upsell", ".cu-select", 
		"data-has-change-event", "hasAttribute", "change", "addEventListener", "true", "setAttribute", ".cu-product-wrapper", "closest", "variantImg", "selectedOptions", ".cu-variant-img", "src", "variantUrl", ".cu-upsell", ".cu-product-name a", "href", ".image-link", ".cu-addtocart-btn", "cartType", "settings", "data-has-click-event", "click", "preventDefault", "target", ".cu-form", "loadingState", "cu-replace-offer", "contains", "classList", ".cart__row", "line", ".cart__product-qty", "value", ".qty-input", 
		"POST", "/cart/change.js", "json", "ajax", "update", "ajaxCart.afterCartLoad", "destroy", "on", "body", "dbtfy:formSubmitted", "dispatchEvent", "js-modal-open", "(", "responseText", ")", "message", "status", "afterend", '<div class="errors qty-error">', "description", "</div>", "addItemFromForm", "template-cart", "drawer", "dbtfy:cartUpsellLoaded", "trigger", "hasClass", "getCart"];
		/**
		 * @return {undefined}
		 */
		function CartUpsell() {
			/**
			 * @param {?} isBgroundImg
			 * @return {undefined}
			 */
			function _0xc2f6x3$jscomp$0(isBgroundImg) {
				/**
				 * @return {undefined}
				 */
				function processRetryQueue() {
					const _0xc2f6x5 = document[_0xec1f[3]](_0xec1f[19]);
					_0xc2f6x5[_0xec1f[30]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xec1f[31]]();
					});
				}
				processRetryQueue();
				const data = _0xc2f6x2$jscomp$0[_0xec1f[3]](_0xec1f[2]);
				if (!data[_0xec1f[4]] || !isBgroundImg) {
					return;
				}
				const _0xc2f6x6 = Array[_0xec1f[11]](data)[_0xec1f[10]]((isSlidingUp) => {
					const vvv_5 = +isSlidingUp[_0xec1f[6]][_0xec1f[5]];
					return !isBgroundImg[_0xec1f[9]][_0xec1f[8]]((lanetext) => {
						return lanetext[_0xec1f[7]] === vvv_5;
					});
				});
				if (!_0xc2f6x6[_0xec1f[4]]) {
					return;
				}
				isBgroundImg[_0xec1f[9]][_0xec1f[30]]((canCreateDiscussions, isSlidingUp) => {
					const tmpTimeVal = canCreateDiscussions[_0xec1f[7]];
					const _0xc2f6xc = _0xc2f6x6[_0xec1f[10]]((canCreateDiscussions) => {
						const selTimeVal = +canCreateDiscussions[_0xec1f[6]][_0xec1f[12]];
						return tmpTimeVal === selTimeVal;
					});
					if (!_0xc2f6xc[_0xec1f[4]]) {
						return;
					}
					const command_codes = [];
					const _0xc2f6xf = _0xc2f6xc[_0xec1f[10]]((canCreateDiscussions) => {
						const data = +canCreateDiscussions[_0xec1f[6]][_0xec1f[5]];
						if (!command_codes[_0xec1f[13]](data)) {
							command_codes[_0xec1f[14]](data);
							return true;
						}
						return false;
					});
					_0xc2f6xf[_0xec1f[30]]((canCreateDiscussions) => {
						const HTTP = document[_0xec1f[1]](_0xec1f[15]);
						if (HTTP) {
							const relationName = canCreateDiscussions[_0xec1f[16]](true);
							const validators = HTTP[_0xec1f[1]](`${_0xec1f[17]}${isSlidingUp + 1}${_0xec1f[18]}`);
							if (validators) {
								const _0xc2f6x15 = validators[_0xec1f[1]](_0xec1f[19]);
								if (!_0xc2f6x15) {
									validators[_0xec1f[23]](_0xec1f[20], `${_0xec1f[21]}${isSlidingUp + 1}${_0xec1f[22]}`);
								}
								const _related2 = HTTP[_0xec1f[1]](`${_0xec1f[24]}${isSlidingUp + 1}${_0xec1f[18]}`);
								if (_related2) {
									_related2[_0xec1f[25]](_0xec1f[20], relationName);
								}
							}
						}
						const agent = document[_0xec1f[1]](_0xec1f[26]);
						if (agent) {
							const relationName = canCreateDiscussions[_0xec1f[16]](true);
							const validators = agent[_0xec1f[1]](`${_0xec1f[27]}${isSlidingUp + 1}${_0xec1f[18]}`);
							if (validators) {
								const _0xc2f6x15 = validators[_0xec1f[1]](_0xec1f[19]);
								if (!_0xc2f6x15) {
									validators[_0xec1f[23]](_0xec1f[20], `${_0xec1f[21]}${isSlidingUp + 1}${_0xec1f[22]}`);
								}
								const _related2 = agent[_0xec1f[1]](`${_0xec1f[24]}${isSlidingUp + 1}${_0xec1f[18]}`);
								if (_related2) {
									_related2[_0xec1f[25]](_0xec1f[20], relationName);
								}
							}
						}
						theme[_0xec1f[29]][_0xec1f[28]]({
							enableQtySelectors : false
						});
					});
				});
			}
			/**
			 * @param {?} isBgroundImg
			 * @return {undefined}
			 */
			function _0xc2f6x19$jscomp$0(isBgroundImg) {
				/**
				 * @return {undefined}
				 */
				function processRetryQueue() {
					const _0xc2f6x1a = document[_0xec1f[3]](_0xec1f[39]);
					_0xc2f6x1a[_0xec1f[30]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xec1f[31]]();
					});
				}
				processRetryQueue();
				const data = _0xc2f6x2$jscomp$0[_0xec1f[3]](_0xec1f[32]);
				if (!data[_0xec1f[4]] || !isBgroundImg) {
					return;
				}
				const _0xc2f6x1b = Array[_0xec1f[11]](data)[_0xec1f[10]]((isSlidingUp) => {
					const vvv_5 = +isSlidingUp[_0xec1f[6]][_0xec1f[33]];
					return !isBgroundImg[_0xec1f[9]][_0xec1f[8]]((lanetext) => {
						return lanetext[_0xec1f[7]] === vvv_5;
					});
				});
				if (!_0xc2f6x1b[_0xec1f[4]]) {
					return;
				}
				_0xc2f6x1b[_0xec1f[30]]((canCreateDiscussions) => {
					const agent = document[_0xec1f[1]](_0xec1f[15]);
					if (agent) {
						const relationName = canCreateDiscussions[_0xec1f[16]](true);
						const _0xc2f6x15 = agent[_0xec1f[1]](_0xec1f[34]);
						if (!_0xc2f6x15) {
							agent[_0xec1f[23]](_0xec1f[20], `${_0xec1f[35]}`);
						}
						const _related2 = agent[_0xec1f[1]](`${_0xec1f[34]}`);
						if (_related2) {
							_related2[_0xec1f[25]](_0xec1f[20], relationName);
						}
					}
					const HTTP = document[_0xec1f[1]](_0xec1f[26]);
					if (HTTP) {
						const relationName = canCreateDiscussions[_0xec1f[16]](true);
						const stripeAPIVersion = +relationName[_0xec1f[6]][_0xec1f[33]];
						HTTP[_0xec1f[23]](_0xec1f[20], `${_0xec1f[36]}${stripeAPIVersion}${_0xec1f[37]}`);
						const _related2 = HTTP[_0xec1f[1]](`${_0xec1f[38]}${stripeAPIVersion}${_0xec1f[18]}`);
						if (_related2) {
							_related2[_0xec1f[25]](_0xec1f[20], relationName);
						}
					}
					theme[_0xec1f[29]][_0xec1f[28]]({
						enableQtySelectors : false
					});
				});
			}
			/**
			 * @return {undefined}
			 */
			function _0xc2f6x20$jscomp$0() {
				/**
				 * @param {?} primaryTxHex
				 * @return {undefined}
				 */
				function _0xc2f6x24$jscomp$0(primaryTxHex) {
					const features = primaryTxHex[_0xec1f[48]](_0xec1f[47]);
					const tiles = primaryTxHex[_0xec1f[50]][0][_0xec1f[6]][_0xec1f[49]];
					if (tiles && features) {
						const tileFuncs = features[_0xec1f[1]](_0xec1f[51]);
						if (tileFuncs) {
							tileFuncs[_0xec1f[46]](_0xec1f[52], tiles);
						}
					}
				}
				/**
				 * @param {?} primaryTxHex
				 * @return {undefined}
				 */
				function _0xc2f6x29$jscomp$0(primaryTxHex) {
					const tiles = primaryTxHex[_0xec1f[50]][0][_0xec1f[6]][_0xec1f[53]];
					const _0xc2f6x2b = primaryTxHex[_0xec1f[48]](_0xec1f[54]);
					const _0xc2f6x26 = primaryTxHex[_0xec1f[48]](_0xec1f[47]);
					if (_0xc2f6x2b) {
						const tileFuncs = _0xc2f6x2b[_0xec1f[1]](_0xec1f[55]);
						if (tileFuncs) {
							tileFuncs[_0xec1f[46]](_0xec1f[56], tiles);
						}
					}
					if (_0xc2f6x26) {
						const tileFuncs = _0xc2f6x26[_0xec1f[1]](_0xec1f[57]);
						if (tileFuncs) {
							tileFuncs[_0xec1f[46]](_0xec1f[56], tiles);
						}
					}
				}
				const _0xc2f6x21$jscomp$0 = document[_0xec1f[3]](_0xec1f[40]);
				_0xc2f6x21$jscomp$0[_0xec1f[30]]((primaryTxHex) => {
					const _0xc2f6x23 = primaryTxHex[_0xec1f[42]](_0xec1f[41]);
					if (!_0xc2f6x23) {
						primaryTxHex[_0xec1f[44]](_0xec1f[43], () => {
							_0xc2f6x24$jscomp$0(primaryTxHex);
							_0xc2f6x29$jscomp$0(primaryTxHex);
						});
					} else {
						primaryTxHex[_0xec1f[46]](_0xec1f[41], _0xec1f[45]);
					}
				});
				const _0xc2f6x2d$jscomp$0 = document[_0xec1f[3]](_0xec1f[58]);
				const _0xc2f6x2e$jscomp$0 = theme[_0xec1f[60]][_0xec1f[59]];
				_0xc2f6x2d$jscomp$0[_0xec1f[30]]((_0xc2f6x2f$jscomp$0) => {
					const _0xc2f6x23$jscomp$1 = _0xc2f6x2f$jscomp$0[_0xec1f[42]](_0xec1f[61]);
					if (!_0xc2f6x23$jscomp$1) {
						_0xc2f6x2f$jscomp$0[_0xec1f[44]](_0xec1f[62], (_0xc2f6x30$jscomp$0) => {
							_0xc2f6x30$jscomp$0[_0xec1f[63]]();
							const _0xc2f6x31$jscomp$0 = _0xc2f6x30$jscomp$0[_0xec1f[64]][_0xec1f[48]](_0xec1f[58]);
							const _0xc2f6x32$jscomp$0 = _0xc2f6x31$jscomp$0[_0xec1f[48]](_0xec1f[65]);
							theme[_0xec1f[66]][_0xec1f[28]](_0xc2f6x31$jscomp$0);
							if (_0xc2f6x31$jscomp$0[_0xec1f[69]][_0xec1f[68]](_0xec1f[67])) {
								const _0xc2f6x33 = _0xc2f6x31$jscomp$0[_0xec1f[48]](_0xec1f[70]);
								const currentLineNo = +_0xc2f6x33[_0xec1f[6]][_0xec1f[71]];
								const _0xc2f6x35 = _0xc2f6x33[_0xec1f[1]](_0xec1f[72]);
								if (_0xc2f6x35) {
									const updatedReverseItemControlData = _0xc2f6x35[_0xec1f[73]];
									const reverseItemData = _0xc2f6x32$jscomp$0[_0xec1f[1]](_0xec1f[74]);
									reverseItemData[_0xec1f[73]] = updatedReverseItemControlData;
								}
								$[_0xec1f[78]]({
									type : _0xec1f[75],
									url : _0xec1f[76],
									dataType : _0xec1f[77],
									async : false,
									data : {
										"line" : currentLineNo,
										"quantity" : 0
									}
								});
							}
							ShopifyAPI[_0xec1f[96]](_0xc2f6x32$jscomp$0, () => {
								theme[_0xec1f[29]][_0xec1f[79]]();
								$(_0xec1f[83])[_0xec1f[82]](_0xec1f[80], function(canCreateDiscussions, isSlidingUp) {
									theme[_0xec1f[66]][_0xec1f[81]](_0xc2f6x31$jscomp$0);
								});
								document[_0xec1f[85]](new CustomEvent(_0xec1f[84], {
									detail : {
										form : _0xc2f6x32$jscomp$0
									}
								}));
								document[_0xec1f[83]][_0xec1f[69]][_0xec1f[31]](_0xec1f[86]);
							}, (_0xc2f6x39$jscomp$0, _0xc2f6x3a$jscomp$0, _0xc2f6x32$jscomp$1) => {
								const _0xc2f6x3b$jscomp$0 = eval(`${_0xec1f[87]}${_0xc2f6x39$jscomp$0[_0xec1f[88]]}${_0xec1f[89]}`);
								theme[_0xec1f[66]][_0xec1f[81]](_0xc2f6x31$jscomp$0);
								if (_0xc2f6x3b$jscomp$0[_0xec1f[90]] && _0xc2f6x3b$jscomp$0[_0xec1f[91]] === 422) {
									_0xc2f6x31$jscomp$0[_0xec1f[23]](_0xec1f[92], `${_0xec1f[93]}${_0xc2f6x3b$jscomp$0[_0xec1f[94]]}${_0xec1f[95]}`);
								}
							});
						});
					} else {
						_0xc2f6x2f$jscomp$0[_0xec1f[46]](_0xec1f[61], _0xec1f[45]);
					}
				});
				const _0xc2f6x3c$jscomp$0 = document[_0xec1f[83]][_0xec1f[69]][_0xec1f[68]](_0xec1f[97]);
				if (_0xc2f6x2e$jscomp$0 === _0xec1f[98] && _0xc2f6x3c$jscomp$0) {
					theme[_0xec1f[29]][_0xec1f[28]]();
				}
			}
			const _0xc2f6x2$jscomp$0 = document[_0xec1f[1]](_0xec1f[0]);
			if (!_0xc2f6x2$jscomp$0) {
				return;
			}
			$(_0xec1f[83])[_0xec1f[82]](_0xec1f[80], function(canCreateDiscussions, isBgroundImg) {
				if (isBgroundImg[_0xec1f[9]][_0xec1f[4]]) {
					_0xc2f6x3$jscomp$0(isBgroundImg);
					_0xc2f6x19$jscomp$0(isBgroundImg);
					_0xc2f6x20$jscomp$0();
					$(_0xec1f[83])[_0xec1f[100]](_0xec1f[99], isBgroundImg);
				}
			});
			if ($(_0xec1f[83])[_0xec1f[101]](_0xec1f[97])) {
				ShopifyAPI[_0xec1f[102]]((isBgroundImg) => {
					if (isBgroundImg[_0xec1f[9]][_0xec1f[4]]) {
						_0xc2f6x3$jscomp$0(isBgroundImg);
						_0xc2f6x19$jscomp$0(isBgroundImg);
						_0xc2f6x20$jscomp$0();
						$(_0xec1f[83])[_0xec1f[100]](_0xec1f[99], isBgroundImg);
					}
				});
			}
		}
		CartUpsell();
		
		{%- endif -%} } 
		function themeCartUpsellDestroy() { {%- if settings.dbtfy_cart_upsell -%}
		'use strict';
	/** @type {!Array} */
	var _0xef8a = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-cart_upsell", "querySelectorAll", "length", "remove", "forEach"];
	destroyCartUpsell();
	$(_0xef8a[2])[_0xef8a[1]](_0xef8a[0], function(canCreateDiscussions, isSlidingUp) {
		destroyCartUpsell();
	});
	/**
	 * @return {undefined}
	 */
	function destroyCartUpsell() {
		const _0xe1bax4 = document[_0xef8a[4]](_0xef8a[3]);
		if (_0xe1bax4[_0xef8a[5]]) {
			_0xe1bax4[_0xef8a[7]]((canCreateDiscussions) => {
				canCreateDiscussions[_0xef8a[6]]();
			});
		}
	};
		{%- endif -%} } /* end-dbtfy-cart-upsell */
	
	
		/* start-dbtfy-collection-addtocart */ function themeCollectionAddtocart(){ {%- if settings.dbtfy_collection_addtocart -%}
		'use strict';
		/** @type {!Array} */
		var _0x1e77 = [".dbtfy-collection_addtocart", "querySelectorAll", "btn-outline-primary", "btn--primary", "length", "cart", "variant_id", "map", "items", ".ca-select", "querySelector", ".ca-button", "userAgent", "test", "resize", "addEventListener", "orientationchange", "data-has-change-event", "hasAttribute", "change", "click", "data-has-click-event", "add", "classList", "remove", "selectedIndex", "value", "includes", "forEach", "options", "from", "true", "setAttribute", "html", ":selected", "children", 
		"width", "text-align-last", "", "css", "text-indent", "body", "prependTo", '<span class="tempforSize">', "</span>", "ajaxCart.afterCartLoad", "on", "afterRecommendationLoad", "shopify:section:load"];
		/**
		 * @return {undefined}
		 */
		async function CollectionAddtocart() {
			/**
			 * @param {?} element
			 * @param {?} level
			 * @return {undefined}
			 */
			function hasBoxSizingBorderBox(element, level) {
				element[_0x1e77[23]][_0x1e77[24]](GET_AUTH_URL_TIMEOUT);
				element[_0x1e77[23]][_0x1e77[22]](numKeysDeleted);
				level[_0x1e77[23]][_0x1e77[24]](GET_AUTH_URL_TIMEOUT);
				level[_0x1e77[23]][_0x1e77[22]](numKeysDeleted);
			}
			/**
			 * @param {?} data
			 * @return {undefined}
			 */
			function compile(data) {
				/**
				 * @param {?} ruleValue
				 * @return {?}
				 */
				function validate(ruleValue) {
					var _0x95f6x17 = $(`${_0x1e77[43]}${ruleValue}${_0x1e77[44]}`)[_0x1e77[42]](_0x1e77[41]);
					var validator = _0x95f6x17[_0x1e77[36]]();
					_0x95f6x17[_0x1e77[24]]();
					return validator;
				}
				var tiles = $(data);
				var duedate = validate(tiles[_0x1e77[35]](_0x1e77[34])[_0x1e77[33]]());
				/** @type {number} */
				var timeSubmittedDiff = tiles[_0x1e77[36]]() - duedate;
				tiles[_0x1e77[39]](_0x1e77[37], _0x1e77[38]);
				tiles[_0x1e77[39]](_0x1e77[40], timeSubmittedDiff / 2 - 2);
			}
			const _0x95f6x2 = document[_0x1e77[1]](_0x1e77[0]);
			const GET_AUTH_URL_TIMEOUT = _0x1e77[2];
			const numKeysDeleted = _0x1e77[3];
			if (!_0x95f6x2[_0x1e77[4]]) {
				return;
			}
			const _0x95f6x5 = theme[_0x1e77[5]];
			const settingHandler = _0x95f6x5[_0x1e77[8]][_0x1e77[7]]((canCreateDiscussions) => {
				return canCreateDiscussions[_0x1e77[6]];
			});
			_0x95f6x2[_0x1e77[28]](function(canCreateDiscussions) {
				const element = canCreateDiscussions[_0x1e77[10]](_0x1e77[9]);
				const LOG_ERROR = canCreateDiscussions[_0x1e77[10]](_0x1e77[11]);
				const removeContent = /^((?!chrome|android).)*safari/i[_0x1e77[13]](navigator[_0x1e77[12]]);
				if (removeContent && element) {
					compile(element);
					window[_0x1e77[15]](_0x1e77[14], function() {
						compile(element);
					});
					window[_0x1e77[15]](_0x1e77[16], function() {
						compile(element);
					});
				}
				if (element && !element[_0x1e77[18]](_0x1e77[17])) {
					element[_0x1e77[15]](_0x1e77[19], function() {
						LOG_ERROR[_0x1e77[20]]();
					});
				}
				if (LOG_ERROR && !LOG_ERROR[_0x1e77[18]](_0x1e77[21])) {
					LOG_ERROR[_0x1e77[15]](_0x1e77[20], function() {
						hasBoxSizingBorderBox(element, LOG_ERROR);
					});
				}
				if (element) {
					element[_0x1e77[23]][_0x1e77[22]](GET_AUTH_URL_TIMEOUT);
					element[_0x1e77[23]][_0x1e77[24]](numKeysDeleted);
					/** @type {number} */
					element[_0x1e77[25]] = 0;
					Array[_0x1e77[30]](element[_0x1e77[29]])[_0x1e77[28]]((canCreateDiscussions) => {
						const value = +canCreateDiscussions[_0x1e77[26]];
						if (settingHandler[_0x1e77[27]](value)) {
							element[_0x1e77[23]][_0x1e77[24]](GET_AUTH_URL_TIMEOUT);
							element[_0x1e77[23]][_0x1e77[22]](numKeysDeleted);
							element[_0x1e77[26]] = value;
						}
					});
					element[_0x1e77[32]](_0x1e77[17], _0x1e77[31]);
				}
				if (LOG_ERROR) {
					LOG_ERROR[_0x1e77[32]](_0x1e77[21], _0x1e77[31]);
				}
			});
		}
		CollectionAddtocart();
		$(_0x1e77[41])[_0x1e77[46]](_0x1e77[45], function(canCreateDiscussions) {
			CollectionAddtocart();
		});
		$(_0x1e77[41])[_0x1e77[46]](_0x1e77[47], function(canCreateDiscussions) {
			CollectionAddtocart();
		});
		$(document)[_0x1e77[46]](_0x1e77[48], function(canCreateDiscussions) {
			CollectionAddtocart();
		});
		
		{%- endif -%} }
	
		function themeCollectionAddtocartDestroy() { {%- if settings.dbtfy_collection_addtocart -%}
		'use strict';
		/** @type {!Array} */
		var _0xcd1f = ["dbtfy-collection_addtocart-destroy", "add", "classList", "body", "ajaxCart.afterCartLoad", "on", "afterRecommendationLoad", ".dbtfy-collection_addtocart", "querySelectorAll", "length", "remove", "forEach"];
		document[_0xcd1f[3]][_0xcd1f[2]][_0xcd1f[1]](_0xcd1f[0]);
		destroyCollectionAddtocart();
		$(_0xcd1f[3])[_0xcd1f[5]](_0xcd1f[4], function(canCreateDiscussions, isSlidingUp) {
			destroyCollectionAddtocart();
		});
		$(_0xcd1f[3])[_0xcd1f[5]](_0xcd1f[6], function(canCreateDiscussions) {
			destroyCollectionAddtocart();
		});
		/**
		 * @return {undefined}
		 */
		function destroyCollectionAddtocart() {
			const _0x62ccx4 = document[_0xcd1f[8]](_0xcd1f[7]);
			if (_0x62ccx4[_0xcd1f[9]]) {
				_0x62ccx4[_0xcd1f[11]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xcd1f[10]]();
				});
			}
		};
		{%- endif -%} } /* end-dbtfy-collection-addtocart */
	
			/* start-dbtfy-collection-filters */ function themeCollectionFilters(){ {%- if settings.dbtfy_collection_filters -%}
			'use strict';
			/** @type {!Array} */
			var _0xb8d7 = [".collection-section", "querySelector", ".filter-clear-all", "#dbtfyCollectionFilter .drawer__footer", "popstate", "scrollRestoration", "manual", "addEventListener", ".filter-card-item input[id^='filter_group']", "querySelectorAll", "change", ".checkbox", "closest", "disabled", "contains", "classList", "value", "constraint", "queryParams", "+", "split", "indexOf", "splice", "push", "length", "join", "forEach", "search", "&", "substr", "", "=", "page", "pushState", "replace", "entries", 
			"?", "pathname", "text/html", "parseFromString", "then", "text", ".collection-list-products", "innerHTML", "#dbtfyCollectionFilter", ".drawer-left__inner", ".hero-container", ".simple_collection_header", ".hero-header-style", "#mainContent", "title", "remove", "afterbegin", "insertAdjacentElement", "beforebegin", "outerHTML", "insertAdjacentHTML", ".collection-controls", "id", "getAttribute", ".dbtfy-infinite_scroll", ".pagination", "afterend", ".dbtfy-filter-list-links a", "click", "preventDefault", 
			"li", ".dbtfy-filter-list-links li.active", "active", "href", "q", "add", ".dbtfy-filter-tags-group", "input", "checked", "filter", "from", ".filter-clear", "hidden", ".page a", "match", "start", "smooth", "scrollIntoView", "shopify:section:select", "sectionId", "detail", "dbtfy-collection-filters", "open", "FilterDrawer", "shopify:section:deselect", "close"];
			/**
			 * @return {undefined}
			 */
			function CollectionFilters() {
				/**
				 * @return {undefined}
				 */
				function indexOf() {
					const _0x981fx7 = document[_0xb8d7[9]](_0xb8d7[8]);
					_0x981fx7[_0xb8d7[26]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xb8d7[7]](_0xb8d7[10], (canCreateDiscussions) => {
							const _0x981fx9 = canCreateDiscussions[_0xb8d7[12]](_0xb8d7[11]);
							if (_0x981fx9[_0xb8d7[15]][_0xb8d7[14]](_0xb8d7[13])) {
								return;
							}
							const data = canCreateDiscussions[_0xb8d7[16]];
							let packByNumType = [];
							if (Shopify[_0xb8d7[18]][_0xb8d7[17]]) {
								packByNumType = Shopify[_0xb8d7[18]][_0xb8d7[17]][_0xb8d7[20]](_0xb8d7[19]);
							}
							if (data) {
								const pivot = packByNumType[_0xb8d7[21]](data);
								if (pivot >= 0) {
									packByNumType[_0xb8d7[22]](pivot, 1);
								} else {
									packByNumType[_0xb8d7[23]](data);
								}
							}
							if (packByNumType[_0xb8d7[24]]) {
								Shopify[_0xb8d7[18]][_0xb8d7[17]] = packByNumType[_0xb8d7[25]](_0xb8d7[19]);
							} else {
								delete Shopify[_0xb8d7[18]][_0xb8d7[17]];
							}
							fn();
						});
					});
				}
				/**
				 * @return {undefined}
				 */
				function split_url_parts() {
					Shopify[_0xb8d7[18]] = {};
					if (location[_0xb8d7[27]][_0xb8d7[24]]) {
						const r = location[_0xb8d7[27]][_0xb8d7[29]](1)[_0xb8d7[20]](_0xb8d7[28]);
						let parsedQR = _0xb8d7[30];
						for (let o = 0; o < r[_0xb8d7[24]]; o++) {
							parsedQR = r[o][_0xb8d7[20]](_0xb8d7[31]);
							if (parsedQR[_0xb8d7[24]] > 1) {
								/** @type {string} */
								Shopify[_0xb8d7[18]][decodeURIComponent(parsedQR[0])] = decodeURIComponent(parsedQR[1]);
							}
						}
					}
				}
				/**
				 * @param {?} query
				 * @return {undefined}
				 */
				function fn(query) {
					delete Shopify[_0xb8d7[18]][_0xb8d7[32]];
					const hrefUri = getRequest(query);
					history[_0xb8d7[33]]({
						param : Shopify[_0xb8d7[18]]
					}, hrefUri, hrefUri);
					processDeepLink(hrefUri);
				}
				/**
				 * @param {?} request
				 * @return {?}
				 */
				function getRequest(request) {
					const _pageParams = (new URLSearchParams(Object[_0xb8d7[35]](Shopify[_0xb8d7[18]]))).toString()[_0xb8d7[34]](/%2B/g, _0xb8d7[19]);
					if (request) {
						if (_pageParams !== _0xb8d7[30]) {
							return request + _0xb8d7[36] + _pageParams;
						} else {
							return request;
						}
					}
					if (_pageParams) {
						return location[_0xb8d7[37]] + _0xb8d7[36] + _pageParams;
					} else {
						return location[_0xb8d7[37]];
					}
				}
				/**
				 * @param {?} uri
				 * @return {undefined}
				 */
				function processDeepLink(uri) {
					fetch(uri)[_0xb8d7[40]](function(canCreateDiscussions) {
						return canCreateDiscussions[_0xb8d7[41]]();
					})[_0xb8d7[40]](function(data) {
						let command_codes = new DOMParser;
						let val = command_codes[_0xb8d7[39]](data, _0xb8d7[38]);
						splitCfi(val);
						m_parse(val);
						findDateFromIndex(val);
						parseFromString(val);
					});
				}
				/**
				 * @param {?} s
				 * @return {undefined}
				 */
				function m_parse(s) {
					const colorArray = s[_0xb8d7[1]](_0xb8d7[42]);
					const tempColorArray = document[_0xb8d7[1]](_0xb8d7[42]);
					tempColorArray[_0xb8d7[43]] = colorArray[_0xb8d7[43]];
					themeQuickView();
				}
				/**
				 * @param {?} diff
				 * @return {undefined}
				 */
				function splitCfi(diff) {
					const _0x981fx21 = document[_0xb8d7[1]](_0xb8d7[44]);
					const tempColorArray = _0x981fx21[_0xb8d7[1]](_0xb8d7[45]);
					const _0x981fx23 = diff[_0xb8d7[1]](_0xb8d7[44]);
					const colorArray = _0x981fx23[_0xb8d7[1]](_0xb8d7[45]);
					if (tempColorArray) {
						tempColorArray[_0xb8d7[43]] = colorArray[_0xb8d7[43]];
					}
					log();
					indexOf();
					substring();
					downloadMainFile();
				}
				/**
				 * @param {?} type
				 * @return {undefined}
				 */
				function parseFromString(type) {
					const _0x981fx26 = document[_0xb8d7[1]](_0xb8d7[46]);
					const _0x981fx27 = document[_0xb8d7[1]](_0xb8d7[47]);
					const relation = type[_0xb8d7[1]](_0xb8d7[46]);
					const relationName = type[_0xb8d7[1]](_0xb8d7[48]);
					const _0x981fx2a = type[_0xb8d7[1]](_0xb8d7[47]);
					const _related2 = document[_0xb8d7[1]](_0xb8d7[49]);
					document[_0xb8d7[50]] = type[_0xb8d7[50]];
					if (_0x981fx26) {
						document[_0xb8d7[1]](_0xb8d7[48])[_0xb8d7[51]]();
						_0x981fx26[_0xb8d7[51]]();
					} else {
						if (_0x981fx27) {
							_0x981fx27[_0xb8d7[51]]();
						}
					}
					if (relation) {
						_related2[_0xb8d7[53]](_0xb8d7[52], relation);
						_related2[_0xb8d7[53]](_0xb8d7[52], relationName);
					} else {
						document[_0xb8d7[1]](_0xb8d7[57])[_0xb8d7[56]](_0xb8d7[54], _0x981fx2a[_0xb8d7[55]]);
					}
				}
				/**
				 * @param {?} val
				 * @return {undefined}
				 */
				function findDateFromIndex(val) {
					const _related2 = document[_0xb8d7[1]](_0xb8d7[42]);
					const a = _related2[_0xb8d7[59]](_0xb8d7[58]) !== null ? _0xb8d7[60] : _0xb8d7[61];
					const relationName = val[_0xb8d7[1]](a);
					const _0x981fx2f = document[_0xb8d7[1]](a);
					if (_0x981fx2f) {
						_0x981fx2f[_0xb8d7[51]]();
					}
					if (relationName) {
						_related2[_0xb8d7[53]](_0xb8d7[62], relationName);
					}
					if (_related2[_0xb8d7[59]](_0xb8d7[58]) !== null) {
						themeInfiniteScroll();
					} else {
						promptAccount();
					}
				}
				/**
				 * @return {undefined}
				 */
				function downloadMainFile() {
					const _0x981fx31 = document[_0xb8d7[9]](_0xb8d7[63]);
					_0x981fx31[_0xb8d7[26]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xb8d7[7]](_0xb8d7[64], (isSlidingUp) => {
							isSlidingUp[_0xb8d7[65]]();
							let _0x981fx33 = canCreateDiscussions[_0xb8d7[12]](_0xb8d7[66]);
							let _0x981fx34 = document[_0xb8d7[1]](_0xb8d7[67]);
							if (!_0x981fx33[_0xb8d7[15]][_0xb8d7[14]](_0xb8d7[68])) {
								let prep_expression = canCreateDiscussions[_0xb8d7[69]];
								delete Shopify[_0xb8d7[18]][_0xb8d7[70]];
								fn(prep_expression);
								if (_0x981fx34) {
									_0x981fx34[_0xb8d7[15]][_0xb8d7[51]](_0xb8d7[68]);
								}
								_0x981fx33[_0xb8d7[15]][_0xb8d7[71]](_0xb8d7[68]);
							}
						});
					});
				}
				/**
				 * @return {undefined}
				 */
				function log() {
					const _0x981fx37 = document[_0xb8d7[9]](_0xb8d7[72]);
					let _0x981fx38 = 0;
					_0x981fx37[_0xb8d7[26]]((canCreateDiscussions) => {
						let data = canCreateDiscussions[_0xb8d7[9]](_0xb8d7[73]);
						let _0x981fx3b = Array[_0xb8d7[76]](data)[_0xb8d7[75]]((canCreateDiscussions) => {
							return canCreateDiscussions[_0xb8d7[74]] === true;
						});
						let _0x981fx3d = canCreateDiscussions[_0xb8d7[1]](_0xb8d7[77]);
						if (_0x981fx3b[_0xb8d7[24]] > 0) {
							if (_0x981fx3d) {
								/** @type {boolean} */
								_0x981fx3d[_0xb8d7[78]] = false;
							}
							_0x981fx38++;
						} else {
							if (_0x981fx3d) {
								/** @type {boolean} */
								_0x981fx3d[_0xb8d7[78]] = true;
							}
						}
					});
					if (_0x981fx38) {
						if (_0x981fx3) {
							/** @type {boolean} */
							_0x981fx3[_0xb8d7[78]] = false;
						}
						if (_0x981fx4) {
							/** @type {boolean} */
							_0x981fx4[_0xb8d7[78]] = false;
						}
					} else {
						if (_0x981fx3) {
							/** @type {boolean} */
							_0x981fx3[_0xb8d7[78]] = true;
						}
						if (_0x981fx4) {
							/** @type {boolean} */
							_0x981fx4[_0xb8d7[78]] = true;
						}
					}
				}
				/**
				 * @return {undefined}
				 */
				function handleExternalContent() {
					const _0x981fx3f = document[_0xb8d7[9]](_0xb8d7[77]);
					if (_0x981fx3) {
						_0x981fx3[_0xb8d7[7]](_0xb8d7[64], (canCreateDiscussions) => {
							_0x981fx3f[_0xb8d7[26]]((canCreateDiscussions) => {
								/** @type {boolean} */
								canCreateDiscussions[_0xb8d7[78]] = true;
							});
							delete Shopify[_0xb8d7[18]][_0xb8d7[17]];
							fn();
						});
					}
				}
				/**
				 * @return {undefined}
				 */
				function substring() {
					const _0x981fx3f = document[_0xb8d7[9]](_0xb8d7[77]);
					_0x981fx3f[_0xb8d7[26]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xb8d7[7]](_0xb8d7[64], (isSlidingUp) => {
							isSlidingUp[_0xb8d7[65]]();
							let packByNumType = [];
							let _0x981fx42 = canCreateDiscussions[_0xb8d7[12]](_0xb8d7[72]);
							let data = _0x981fx42[_0xb8d7[9]](_0xb8d7[73]);
							let _0x981fx44 = Array[_0xb8d7[76]](data)[_0xb8d7[75]]((canCreateDiscussions) => {
								return canCreateDiscussions[_0xb8d7[74]] === true;
							});
							if (Shopify[_0xb8d7[18]][_0xb8d7[17]]) {
								packByNumType = Shopify[_0xb8d7[18]][_0xb8d7[17]][_0xb8d7[20]](_0xb8d7[19]);
							}
							_0x981fx44[_0xb8d7[26]]((canCreateDiscussions) => {
								let data = canCreateDiscussions[_0xb8d7[16]];
								/** @type {boolean} */
								canCreateDiscussions[_0xb8d7[74]] = false;
								if (data) {
									let pivot = packByNumType[_0xb8d7[21]](data);
									if (pivot >= 0) {
										packByNumType[_0xb8d7[22]](pivot, 1);
									}
								}
							});
							if (packByNumType[_0xb8d7[24]]) {
								Shopify[_0xb8d7[18]][_0xb8d7[17]] = packByNumType[_0xb8d7[25]](_0xb8d7[19]);
							} else {
								delete Shopify[_0xb8d7[18]][_0xb8d7[17]];
							}
							fn();
						});
					});
				}
				/**
				 * @return {undefined}
				 */
				function promptAccount() {
					const _0x981fx48 = document[_0xb8d7[1]](_0xb8d7[61]);
					if (!_0x981fx48) {
						return;
					}
					const _0x981fx49 = _0x981fx48[_0xb8d7[9]](_0xb8d7[79]);
					_0x981fx49[_0xb8d7[26]]((canCreateDiscussions) => {
						canCreateDiscussions[_0xb8d7[7]](_0xb8d7[64], (isSlidingUp) => {
							const _0x981fx4a = canCreateDiscussions[_0xb8d7[59]](_0xb8d7[69])[_0xb8d7[80]](/page=\d+/g);
							if (_0x981fx4a) {
								/** @type {number} */
								Shopify[_0xb8d7[18]][_0xb8d7[32]] = parseInt(_0x981fx4a[0][_0xb8d7[80]](/\d+/g));
								if (Shopify[_0xb8d7[18]][_0xb8d7[32]]) {
									const hrefUri = getRequest();
									history[_0xb8d7[33]]({
										param : Shopify[_0xb8d7[18]]
									}, hrefUri, hrefUri);
									processDeepLink(hrefUri);
									jq[_0xb8d7[83]]({
										block : _0xb8d7[81],
										behavior : _0xb8d7[82]
									});
								}
							}
							isSlidingUp[_0xb8d7[65]]();
						});
					});
				}
				const jq = document[_0xb8d7[1]](_0xb8d7[0]);
				const _0x981fx3 = document[_0xb8d7[1]](_0xb8d7[2]);
				const _0x981fx4 = document[_0xb8d7[1]](_0xb8d7[3]);
				if (!jq) {
					return;
				}
				window[_0xb8d7[7]](_0xb8d7[4], (canCreateDiscussions) => {
					history[_0xb8d7[5]] = _0xb8d7[6];
					split_url_parts();
					fn();
				});
				split_url_parts();
				log();
				substring();
				handleExternalContent();
				promptAccount();
				indexOf();
				downloadMainFile();
			}
			document[_0xb8d7[7]](_0xb8d7[84], (mmCoreSplitViewBlock) => {
				if (mmCoreSplitViewBlock[_0xb8d7[86]][_0xb8d7[85]] === _0xb8d7[87]) {
					timber[_0xb8d7[89]][_0xb8d7[88]](mmCoreSplitViewBlock);
				}
			});
			document[_0xb8d7[7]](_0xb8d7[90], (mmCoreSplitViewBlock) => {
				if (mmCoreSplitViewBlock[_0xb8d7[86]][_0xb8d7[85]] === _0xb8d7[87]) {
					timber[_0xb8d7[89]][_0xb8d7[91]](mmCoreSplitViewBlock);
				}
			});
			CollectionFilters();
	
			{%- endif -%} }

			function themeCollectionFiltersDestroy() { {%- if settings.dbtfy_collection_filters -%}
			'use strict';
	/** @type {!Array} */
	var _0xbf17 = ["dbtfy-collection-filters-destroy", "add", "classList", "body", "#shopify-section-dbtfy-collection-filters", "querySelector", ".collection-filters-btn", "div", "closest", "remove"];
	document[_0xbf17[3]][_0xbf17[2]][_0xbf17[1]](_0xbf17[0]);
	/**
	 * @return {undefined}
	 */
	function CollectionFiltersDestroy() {
		const _0x5963x2 = document[_0xbf17[5]](_0xbf17[4]);
		const _0x5963x3 = document[_0xbf17[5]](_0xbf17[6]);
		const _0x5963x4 = _0x5963x3 ? _0x5963x3[_0xbf17[8]](_0xbf17[7]) : null;
		if (_0x5963x2) {
			_0x5963x2[_0xbf17[9]]();
		}
		if (_0x5963x4) {
			_0x5963x4[_0xbf17[9]]();
		}
	}
	CollectionFiltersDestroy();
{%- endif -%} }
	
	
	
				/* start-dbtfy-color-swatches */ function themeColorSwatches(){ {%- if settings.dbtfy_color_swatches -%}
				'use strict';
				/** @type {!Array} */
				var _0x3b57 = ["strings", ".input-color_swatches", "querySelectorAll", "data-has-change-event", "hasAttribute", "change", ".custom_swatch_elements", "closest", ".label-color_swatches", "querySelector", "data-label", "getAttribute", "sectionId", "dataset", "AddToCartForm--", "", "getElementById", "index", "value", "innerHTML", ': <span class="variant-label-option-value">', "</span>", '.single-option-selector__radio[data-index="option', '"][value="', "escape", '"]', "checked", "dispatchEvent", 'select.single-option-selector__radio[data-index="option', 
				"addEventListener", "true", "setAttribute", "forEach", ".input-color_swatches--product-grid", "productId", "ProductSelect-", "option", "option1", "option2", "option3", "find", "from", "image", "price", "compareAtPrice", '.input-color_swatches--product-grid[data-product-id="', ".grid-product", ".product--image", ".product-hover-image img", ".grid-product__image-link, .grid-product__meta", ".grid-product__price-wrap", ".price-regular", ".price-compare", ".grid-product__badge", "cs-active", "add", "classList", 
				"srcset", "removeAttribute", "src", "length", "href", "?variant=", "split", '<span class="money">', "moneyFormat", "formatMoney", "Currency", "on-sale", "text-sale", "aria-label", "salePrice", "remove", "regularPrice", "hide", " ", "saleType", "settings", "amount", "innerText", ".product-badge-discount", "percentage", "floor", "%", "#currency-list-header[name='dbtfy-custom-currencies']", "shopCurrency", "currentCurrency", "convertAll", "shopify:section:load", "on", "afterRecommendationLoad", "body"];
				/**
				 * @return {undefined}
				 */
				function ColorSwatches() {
					const _0x1486x2 = theme[_0x3b57[0]];
					const _0x1486x3 = document[_0x3b57[2]](_0x3b57[1]);
					_0x1486x3[_0x3b57[32]]((canCreateDiscussions) => {
						if (canCreateDiscussions[_0x3b57[4]](_0x3b57[3])) {
							return;
						}
						canCreateDiscussions[_0x3b57[29]](_0x3b57[5], () => {
							const _0x1486x5 = canCreateDiscussions[_0x3b57[7]](_0x3b57[6]);
							const f = _0x1486x5 ? _0x1486x5[_0x3b57[9]](_0x3b57[8]) : null;
							const fullPath = f ? f[_0x3b57[11]](_0x3b57[10]) : null;
							const stripeAPIVersion = canCreateDiscussions[_0x3b57[13]][_0x3b57[12]];
							const HTTP = document[_0x3b57[16]](`${_0x3b57[14]}${stripeAPIVersion}${_0x3b57[15]}`);
							if (!HTTP) {
								return;
							}
							const bowerPackageName = canCreateDiscussions[_0x3b57[13]][_0x3b57[17]];
							const embed = canCreateDiscussions[_0x3b57[18]];
							if (f && fullPath) {
								f[_0x3b57[19]] = `${_0x3b57[15]}${fullPath}${_0x3b57[20]}${embed}${_0x3b57[21]}`;
							}
							const _0x1486xc = HTTP[_0x3b57[9]](`${_0x3b57[22]}${bowerPackageName}${_0x3b57[23]}${CSS[_0x3b57[24]](embed)}${_0x3b57[25]}`);
							if (_0x1486xc) {
								/** @type {boolean} */
								_0x1486xc[_0x3b57[26]] = true;
								_0x1486xc[_0x3b57[27]](new Event(_0x3b57[5]));
								return;
							}
							const payloadKeyObject = HTTP[_0x3b57[9]](`${_0x3b57[28]}${bowerPackageName}${_0x3b57[25]}`);
							if (payloadKeyObject) {
								payloadKeyObject[_0x3b57[18]] = embed;
								payloadKeyObject[_0x3b57[27]](new Event(_0x3b57[5]));
							}
						});
						canCreateDiscussions[_0x3b57[31]](_0x3b57[3], _0x3b57[30]);
					});
					const _0x1486xe = document[_0x3b57[2]](_0x3b57[33]);
					_0x1486xe[_0x3b57[32]]((canCreateDiscussions) => {
						canCreateDiscussions[_0x3b57[29]](_0x3b57[5], () => {
							const targetFilepath = canCreateDiscussions[_0x3b57[11]](_0x3b57[18]);
							const stripeAPIVersion = canCreateDiscussions[_0x3b57[13]][_0x3b57[34]];
							const _0x1486x12 = document[_0x3b57[16]](`${_0x3b57[35]}${stripeAPIVersion}${_0x3b57[15]}`);
							const data = _0x1486x12[_0x3b57[2]](_0x3b57[36]);
							const _0x1486x14 = Array[_0x3b57[41]](data)[_0x3b57[40]]((canCreateDiscussions) => {
								const filepath = canCreateDiscussions[_0x3b57[13]][_0x3b57[37]];
								const filepathalt = canCreateDiscussions[_0x3b57[13]][_0x3b57[38]];
								const _0x1486x18 = canCreateDiscussions[_0x3b57[13]][_0x3b57[39]];
								return filepath === targetFilepath || filepathalt === targetFilepath || _0x1486x18 === targetFilepath;
							});
							if (!_0x1486x14) {
								return;
							}
							const constructorPartParm1 = _0x1486x14[_0x3b57[11]](_0x3b57[18]);
							const embed = _0x1486x14[_0x3b57[13]][_0x3b57[42]];
							const minBuy = _0x1486x14[_0x3b57[13]][_0x3b57[43]];
							const maxSell = _0x1486x14[_0x3b57[13]][_0x3b57[44]];
							const _0x1486x1d = document[_0x3b57[2]](`${_0x3b57[45]}${stripeAPIVersion}${_0x3b57[23]}${targetFilepath}${_0x3b57[25]}`);
							_0x1486x1d[_0x3b57[32]]((canCreateDiscussions) => {
								const _0x1486x1f = canCreateDiscussions[_0x3b57[7]](_0x3b57[46]);
								const commID = _0x1486x1f ? _0x1486x1f[_0x3b57[9]](_0x3b57[47]) : null;
								const payloadKeyObject = _0x1486x1f ? _0x1486x1f[_0x3b57[9]](_0x3b57[48]) : null;
								const _0x1486x22 = _0x1486x1f ? _0x1486x1f[_0x3b57[2]](_0x3b57[49]) : null;
								const _0x1486x23 = _0x1486x1f ? _0x1486x1f[_0x3b57[9]](_0x3b57[50]) : null;
								const f = _0x1486x23 ? _0x1486x23[_0x3b57[9]](_0x3b57[51]) : null;
								const final = _0x1486x23 ? _0x1486x23[_0x3b57[9]](_0x3b57[52]) : null;
								const _0x1486x26 = _0x1486x1f[_0x3b57[9]](_0x3b57[53]);
								if (_0x1486x1f) {
									_0x1486x1f[_0x3b57[56]][_0x3b57[55]](_0x3b57[54]);
								}
								if (commID && embed) {
									commID[_0x3b57[58]](_0x3b57[57]);
									commID[_0x3b57[59]] = embed;
									if (payloadKeyObject) {
										payloadKeyObject[_0x3b57[59]] = embed;
										payloadKeyObject[_0x3b57[58]](_0x3b57[57]);
									}
								}
								if (_0x1486x22 && _0x1486x22[_0x3b57[60]]) {
									_0x1486x22[_0x3b57[32]]((final) => {
										const _0x1486x28 = final[_0x3b57[61]];
										final[_0x3b57[61]] = `${_0x3b57[15]}${_0x1486x28[_0x3b57[63]](_0x3b57[62])[0]}${_0x3b57[62]}${constructorPartParm1}${_0x3b57[15]}`;
									});
								}
								if (f || final) {
									if (f) {
										f[_0x3b57[19]] = `${_0x3b57[64]}${theme[_0x3b57[67]][_0x3b57[66]](+minBuy, theme[_0x3b57[0]][_0x3b57[65]])}${_0x3b57[21]}`;
										if (maxSell && final) {
											f[_0x3b57[56]][_0x3b57[55]](_0x3b57[68], _0x3b57[69]);
											f[_0x3b57[31]](_0x3b57[70], _0x1486x2[_0x3b57[71]]);
										} else {
											f[_0x3b57[56]][_0x3b57[72]](_0x3b57[68], _0x3b57[69]);
											f[_0x3b57[31]](_0x3b57[70], _0x1486x2[_0x3b57[73]]);
										}
									}
									if (maxSell && final) {
										final[_0x3b57[56]][_0x3b57[72]](_0x3b57[74]);
										final[_0x3b57[19]] = `${_0x3b57[64]}${theme[_0x3b57[67]][_0x3b57[66]](+maxSell, theme[_0x3b57[0]][_0x3b57[65]])}${_0x3b57[21]}`;
									} else {
										final[_0x3b57[56]][_0x3b57[55]](_0x3b57[74]);
										final[_0x3b57[19]] = _0x3b57[75];
									}
								}
								if (maxSell && minBuy) {
									if (maxSell > minBuy) {
										_0x1486x26[_0x3b57[56]][_0x3b57[72]](_0x3b57[74]);
										if (theme[_0x3b57[77]][_0x3b57[76]] === _0x3b57[78]) {
											const _0x1486x29 = maxSell - minBuy;
											_0x1486x26[_0x3b57[9]](_0x3b57[80])[_0x3b57[79]] = theme[_0x3b57[67]][_0x3b57[66]](+_0x1486x29, theme[_0x3b57[0]][_0x3b57[65]]);
										} else {
											if (theme[_0x3b57[77]][_0x3b57[76]] === _0x3b57[81]) {
												const stripeAPIVersion = Math[_0x3b57[82]]((maxSell - minBuy) * 100 / maxSell);
												_0x1486x26[_0x3b57[9]](_0x3b57[80])[_0x3b57[79]] = `${_0x3b57[15]}${stripeAPIVersion}${_0x3b57[83]}`;
											}
										}
									}
								} else {
									_0x1486x26[_0x3b57[56]][_0x3b57[55]](_0x3b57[74]);
								}
								var _knownUizeModulesLookup = $(_0x3b57[84]);
								var _objectInspectedPath = theme[_0x3b57[0]][_0x3b57[85]];
								if (_knownUizeModulesLookup[_0x3b57[60]] && _objectInspectedPath && Currency[_0x3b57[86]]) {
									Currency[_0x3b57[87]](_objectInspectedPath, Currency[_0x3b57[86]]);
								}
							});
						});
					});
				}
				ColorSwatches();
				$(document)[_0x3b57[89]](_0x3b57[88], function() {
					ColorSwatches();
				});
				$(_0x3b57[91])[_0x3b57[89]](_0x3b57[90], function() {
					ColorSwatches();
				});
				
	
				{%- endif -%} } 
	
				function themeColorSwatchesDestroy() { {%- if settings.dbtfy_color_swatches -%}
				'use strict';
				/** @type {!Array} */
				var _0xb9c4 = ["dbtfy-color_swatches-destroy", "add", "classList", "body", "shopify:section:load", "on", "afterRecommendationLoad", ".dbtfy-color_swatches", "querySelectorAll", ".product-form__item", "length", "remove", "forEach", "hidden", "removeAttribute"];
				document[_0xb9c4[3]][_0xb9c4[2]][_0xb9c4[1]](_0xb9c4[0]);
				destroyColorSwatches();
				$(document)[_0xb9c4[5]](_0xb9c4[4], function() {
					destroyColorSwatches();
				});
				$(_0xb9c4[3])[_0xb9c4[5]](_0xb9c4[6], function(canCreateDiscussions) {
					destroyColorSwatches();
				});
				/**
				 * @return {undefined}
				 */
				function destroyColorSwatches() {
					const _0x5d6ex3 = document[_0xb9c4[8]](_0xb9c4[7]);
					const _0x5d6ex4 = document[_0xb9c4[8]](_0xb9c4[9]);
					if (_0x5d6ex3[_0xb9c4[10]]) {
						_0x5d6ex3[_0xb9c4[12]]((canCreateDiscussions) => {
							canCreateDiscussions[_0xb9c4[11]]();
						});
					}
					if (_0x5d6ex4[_0xb9c4[10]]) {
						_0x5d6ex4[_0xb9c4[12]]((canCreateDiscussions) => {
							canCreateDiscussions[_0xb9c4[14]](_0xb9c4[13]);
						});
					}
				}
				;
				{%- endif -%} } /* end-dbtfy-color-swatches */
	
	
	
	
					/* start-dbtfy-cookie-box */ function themeCookieBox(){ {%- if settings.dbtfy_cookie_box -%}
					'use strict';
	/** @type {!Array} */
	var _0x1aef = [".dbtfy-cookie_box", "querySelector", "#CookieBox", ".cb-btn, .cb-btn-close", "show", "hide", "cookieboxClosed", "true", "setItem", "closeTransition", "click"];
	/**
	 * @return {undefined}
	 */
	function CookieBox() {
		/**
		 * @return {undefined}
		 */
		function gotoNewOfflinePage() {
			$realtime[_0x1aef[4]]();
		}
		/**
		 * @return {undefined}
		 */
		function processRetryQueue() {
			theme[_0x1aef[9]]({
				elementToTransition : $realtime
			}, function() {
				$realtime[_0x1aef[5]]();
				localStorage[_0x1aef[8]](_0x1aef[6], _0x1aef[7]);
			});
		}
		const _0x28eax2 = document[_0x1aef[1]](_0x1aef[0]);
		if (!_0x28eax2) {
			return;
		}
		var $realtime = $(_0x1aef[2]);
		var $gBCRBottom = $(_0x1aef[3]);
		if (!localStorage[_0x1aef[6]]) {
			gotoNewOfflinePage();
		}
		$gBCRBottom[_0x1aef[10]](function() {
			processRetryQueue();
		});
	}
	CookieBox();
	
	{%- endif -%} }
	function themeCookieBoxDestroy() { {%- if settings.dbtfy_cookie_box -%}
	'use strict';
	/** @type {!Array} */
	var _0xdcea = ["dbtfy-cookie_box-destroy", "add", "classList", "body", ".dbtfy-cookie_box", "querySelector", "remove"];
	document[_0xdcea[3]][_0xdcea[2]][_0xdcea[1]](_0xdcea[0]);
	destroyCookieBox();
	/**
	 * @return {undefined}
	 */
	function destroyCookieBox() {
		const _0xe1b4x2 = document[_0xdcea[5]](_0xdcea[4]);
		if (_0xe1b4x2) {
			_0xe1b4x2[_0xdcea[6]]();
		}
	}
	;
	{%- endif -%} } /* end-dbtfy-cookie-box */
	
	
		/* start-dbtfy-custom-currencies */ function themeCustomCurrencies(){ {%- if settings.dbtfy_custom_currencies and settings.show_currency_selector -%}
		'use strict';
		/** @type {!Array} */
		var _0xfda3 = ["[name='dbtfy-custom-currencies']", "select[name='id']", ".Cart_currencyinfo", "shopCurrency", "strings", "defaultCurrency", "currencyCode", "getItem", "format", "currencyFormat", "convertAll", "currentCurrency", "size", "[name='dbtfy-custom-currencies'] option[value=", "]", "setItem", "hide", "val", "change", "length", "variant-title", "data", "variant-price", "convert", "money_format", "moneyFormats", "formatMoney", "money_with_currency_format", "money_without_trailing_zeros", "money_without_trailing_zeros_with_currency", 
		"", " - ", "html", "each", "option", "find", "ajaxCart.afterCartLoad", ".cart__subtotal", "querySelectorAll", "observe", "forEach", "on", "body", ".drawer__inner-section.Cart_currencyinfo, #cartForm .Cart_currencyinfo", "text", ".selected-currency", "dbtfy:cartUpsellLoaded"];
		/**
		 * @return {undefined}
		 */
		function CustomCurrencies() {
			/**
			 * @return {undefined}
			 */
			function infiniteScroll() {
				Currency[_0xfda3[10]](datum, $realtime[_0xfda3[17]]());
				if (oneActivity === datum) {
					$(_0xfda3[43])[_0xfda3[16]]();
				}
				$(_0xfda3[45])[_0xfda3[44]](Currency[_0xfda3[11]]);
			}
			var $realtime = $(_0xfda3[0]);
			var $gBCRBottom = $(_0xfda3[1]);
			var $existing_results = $(_0xfda3[2]);
			var datum = theme[_0xfda3[4]][_0xfda3[3]];
			var undefined = theme[_0xfda3[4]][_0xfda3[5]];
			var oneActivity = localStorage[_0xfda3[7]](_0xfda3[6]);
			if (!$realtime) {
				return;
			}
			Currency[_0xfda3[8]] = theme[_0xfda3[4]][_0xfda3[9]];
			if (oneActivity == null) {
				if (datum !== undefined) {
					Currency[_0xfda3[10]](datum, undefined);
				} else {
					Currency[_0xfda3[11]] = undefined;
				}
			} else {
				if ($realtime[_0xfda3[12]]() && $(`${_0xfda3[13]}${oneActivity}${_0xfda3[14]}`)[_0xfda3[12]]() === 0) {
					Currency[_0xfda3[11]] = datum;
					localStorage[_0xfda3[15]](_0xfda3[6], datum);
				} else {
					if (oneActivity === datum) {
						Currency[_0xfda3[11]] = datum;
						Currency[_0xfda3[10]](datum, oneActivity);
						$existing_results[_0xfda3[16]]();
					} else {
						Currency[_0xfda3[11]] = oneActivity;
						setTimeout(function() {
							Currency[_0xfda3[10]](datum, oneActivity);
						}, 1600);
					}
				}
			}
			$realtime[_0xfda3[17]](Currency[_0xfda3[11]])[_0xfda3[18]](function() {
				var datum = $(this)[_0xfda3[17]]();
				localStorage[_0xfda3[15]](_0xfda3[6], datum);
			});
			setTimeout(function() {
				if ($gBCRBottom[_0xfda3[19]]) {
					$gBCRBottom[_0xfda3[33]](function() {
						$(this)[_0xfda3[35]](_0xfda3[34])[_0xfda3[33]](function() {
							var stripeAPIVersion = $(this)[_0xfda3[21]](_0xfda3[20]);
							/** @type {number} */
							var ret = parseFloat($(this)[_0xfda3[21]](_0xfda3[22]));
							if (!isNaN(ret)) {
								var _0x1197xb = theme[_0xfda3[4]][_0xfda3[9]];
								var casted = Currency[_0xfda3[23]](ret, datum, Currency[_0xfda3[11]]);
								switch(theme[_0xfda3[4]][_0xfda3[9]]) {
									case _0xfda3[24]:
										var val = Currency[_0xfda3[26]](casted, Currency[_0xfda3[25]][Currency[_0xfda3[11]]][_0xfda3[24]]);
										break;
									case _0xfda3[27]:
										val = Currency[_0xfda3[26]](casted, Currency[_0xfda3[25]][Currency[_0xfda3[11]]][_0xfda3[27]]);
										break;
									case _0xfda3[28]:
										val = Currency[_0xfda3[26]](casted, Currency[_0xfda3[25]][Currency[_0xfda3[11]]][_0xfda3[28]]);
										break;
									case _0xfda3[29]:
										val = Currency[_0xfda3[26]](casted, Currency[_0xfda3[25]][Currency[_0xfda3[11]]][_0xfda3[29]]);
										break;
								}
								$(this)[_0xfda3[32]](`${_0xfda3[30]}${stripeAPIVersion}${_0xfda3[31]}${val}${_0xfda3[30]}`);
							}
						});
					});
				}
			}, 1500);
			$(_0xfda3[42])[_0xfda3[41]](_0xfda3[36], function(canCreateDiscussions, isSlidingUp) {
				infiniteScroll();
				const _0x1197x10 = document[_0xfda3[38]](_0xfda3[37]);
				const relationName = {
					attributes : true,
					childList : true,
					subtree : true
				};
				_0x1197x10[_0xfda3[40]]((data) => {
					const command_codes = new MutationObserver(infiniteScroll);
					command_codes[_0xfda3[39]](data, relationName);
				});
			});
			infiniteScroll();
		}
		$(_0xfda3[42])[_0xfda3[41]](_0xfda3[46], function(canCreateDiscussions, isSlidingUp) {
			CustomCurrencies();
		});
		CustomCurrencies();
		
		{%- endif -%} }
		function themeCustomCurrenciesDestroy() { {%- if settings.dbtfy_custom_currencies and settings.show_currency_selector -%}
		'use strict';
		/** @type {!Array} */
		var _0xfe26 = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-custom_currencies", "querySelectorAll", ".Cart_currencyinfo", "#currency-list-header", "querySelector", "length", "remove", "forEach", "previousElementSibling"];
		destroyCustomCurrencies();
		$(_0xfe26[2])[_0xfe26[1]](_0xfe26[0], function(canCreateDiscussions, isSlidingUp) {
			destroyCustomCurrencies();
		});
		/**
		 * @return {undefined}
		 */
		function destroyCustomCurrencies() {
			const _0xf77ex4 = document[_0xfe26[4]](_0xfe26[3]);
			const _0xf77ex5 = document[_0xfe26[4]](_0xfe26[5]);
			const _0xf77ex6 = document[_0xfe26[7]](_0xfe26[6]);
			if (_0xf77ex4[_0xfe26[8]]) {
				_0xf77ex4[_0xfe26[10]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xfe26[9]]();
				});
			}
			if (_0xf77ex5[_0xfe26[8]]) {
				_0xf77ex5[_0xfe26[10]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xfe26[9]]();
				});
			}
			if (_0xf77ex6) {
				_0xf77ex6[_0xfe26[11]][_0xfe26[9]]();
				_0xf77ex6[_0xfe26[9]]();
			}
		}
		;
	
		{%- endif -%} } /* end-dbtfy-custom-currencies */
	
	
	
	function themeDeliveryTime() { {%- if settings.dbtfy_delivery_time -%} 
	'use strict';
	/** @type {!Array} */
	var _0x126b = [".dbtfy-delivery_time", "querySelector", ".dt-info", "querySelectorAll", "length", "sortVisibilityTypes", "visibilitySettings", ".featured-product-section, .product-section", "visibilityType", "dataset", "productTags", "productTypes", "product", "productCollection", "cloneNode", "minDate", "maxDate", "showAsDate", "timeFormat", "excludeDays", "showCutOff", "cutOffTime", "cutOffMessage", "timeZone", ".mainProductJson", "innerHTML", "parse", "checkForVisibility", "forEach", "months", 
	"strings", "", "startDateMonth", " ", "startDateDay", "endDateMonth", "endDateDay", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "true", "toLowerCase", "trim", "map", "filter", ",", "split", "includes", "push", "getTime", "getDate", "setDate", "getDay", "some", "getMonth", ".delivery_cut_off_time", "substring", "00", ":", "getFullYear", "-", "innerText", "getTimezoneOffset", ".from-text-delivery_time", ".to-text-delivery_time", ".delivery_time_sufix", ".delivery_time_separator", 
	"isArray", "hidden", "removeAttribute", "setAttribute", "position", "template", ".product-single[data-product-handle]", ".dbtfy-live_view", "remove", "under-addtocart-button", ".dbtfy-trust_badge", '[itemprop="offers"]', "div", "createElement", "card", "card-body", "spacer-auto", "spacer-top", "spacer-bottom", "add", "classList", "beforeend", "insertAdjacentElement", "under_add_to_cart_button", "afterend", ".price-container", "under_product_price"];
	/**
	 * @return {undefined}
	 */
	function DeliveryTime() {
		/**
		 * @param {?} $element
		 * @param {?} $state
		 * @return {?}
		 */
		function stateSet($element, $state) {
			const use = +$element[_0x126b[15]];
			const nextData = +$element[_0x126b[16]];
			const val = theme[_0x126b[30]][_0x126b[29]];
			return process(use, nextData, val, $element, $state);
		}
		/**
		 * @param {?} name
		 * @param {undefined} data
		 * @param {?} src
		 * @param {?} e
		 * @param {?} element
		 * @return {?}
		 */
		function process(name, data, src, e, element) {
			const url = getClosestValidDate(e);
			const results = f(e, name, data, element, url);
			const [cursor, keys] = results;
			const set = `${_0x126b[31]}${cursor[_0x126b[32]] ? src[cursor[_0x126b[32]]] : _0x126b[31]}${_0x126b[33]}${cursor[_0x126b[34]]}${_0x126b[31]}`;
			const elt = `${_0x126b[31]}${keys[_0x126b[35]] ? src[keys[_0x126b[35]]] : _0x126b[31]}${_0x126b[33]}${keys[_0x126b[36]]}${_0x126b[31]}`;
			return set === elt ? set : [set, elt];
		}
		/**
		 * @param {?} instance
		 * @param {?} i
		 * @param {number} previous
		 * @param {?} key
		 * @param {undefined} input
		 * @return {?}
		 */
		function f(instance, i, previous, key, input) {
			const iceEmotes = {
				0 : _0x126b[37],
				1 : _0x126b[38],
				2 : _0x126b[39],
				3 : _0x126b[40],
				4 : _0x126b[41],
				5 : _0x126b[42],
				6 : _0x126b[43]
			};
			const _0xc178x17 = Boolean(instance[_0x126b[17]] === _0x126b[44]);
			const initSyncMs = 1E3 * 60 * 60 * 24;
			const _0xc178x19 = instance[_0x126b[19]] && instance[_0x126b[19]][_0x126b[50]](_0x126b[49])[_0x126b[48]]((acc) => {
				return acc;
			})[_0x126b[47]]((canCreateDiscussions) => {
				return canCreateDiscussions[_0x126b[46]]()[_0x126b[45]]();
			});
			const leon_construct = [];
			for (const emote in iceEmotes) {
				if (_0xc178x19) {
					_0xc178x19[_0x126b[28]]((mmCoreSplitViewBlock) => {
						if (iceEmotes[emote][_0x126b[45]]()[_0x126b[51]](mmCoreSplitViewBlock)) {
							leon_construct[_0x126b[52]](emote);
						}
					});
				}
			}
			const lastPSync = (new Date)[_0x126b[53]]();
			const year = new Date(lastPSync);
			const ifUnmodifiedSinceTime = new Date(lastPSync + initSyncMs);
			const newToDatems = new Date(lastPSync + initSyncMs * 100 + previous * initSyncMs);
			const value = [];
			const isHour = update(instance, key, input);
			const nb_ft = new Date(newToDatems);
			const _0xc178x22 = isHour ? new Date(ifUnmodifiedSinceTime) : new Date(year);
			let n = 0;
			let next = 0;
			previous = isHour ? previous + 1 : previous;
			for (let _t_ix = _0xc178x22; _t_ix < nb_ft; _t_ix[_0x126b[55]](_t_ix[_0x126b[54]]() + 1)) {
				const Infinity = _t_ix[_0x126b[56]]();
				const nextValid = leon_construct && leon_construct[_0x126b[57]]((value) => {
					return +value === Infinity;
				});
				if (!nextValid && n < i) {
					n++;
					if (n === i) {
						const authorization_code = _t_ix[_0x126b[58]]() + 1;
						const scriptObject = _t_ix[_0x126b[54]]();
						const data = {};
						if (_0xc178x17) {
							data[_0x126b[32]] = authorization_code;
							data[_0x126b[34]] = scriptObject;
						} else {
							data[_0x126b[34]] = i;
						}
						value[_0x126b[52]](data);
					}
				}
				if (!nextValid && next < previous) {
					next++;
					if (next === previous) {
						const authorization_code = _t_ix[_0x126b[58]]() + 1;
						const scriptObject = _t_ix[_0x126b[54]]();
						const data = {};
						if (_0xc178x17) {
							data[_0x126b[35]] = authorization_code;
							data[_0x126b[36]] = scriptObject;
						} else {
							data[_0x126b[36]] = instance[_0x126b[16]];
						}
						value[_0x126b[52]](data);
					}
				}
			}
			return value;
		}
		/**
		 * @param {?} context
		 * @param {?} done
		 * @param {number} n
		 * @return {?}
		 */
		function update(context, done, n) {
			const showCol = done[_0x126b[1]](_0x126b[59]);
			const _0xc178x30 = Boolean(context[_0x126b[20]] === _0x126b[44]);
			const _0xc178x31 = new Date;
			let objStr = _0xc178x31[_0x126b[54]]();
			if (_0xc178x30) {
				const _0xc178x33 = context[_0x126b[21]];
				let h;
				let interestingPoint;
				if (n % 1 !== 0) {
					const bit = (Number(_0xc178x33[_0x126b[60]](0, 2)) - n) % 1;
					const viewportCenter = bit * 60;
					/** @type {number} */
					h = Number(_0xc178x33[_0x126b[60]](0, 2)) - n - bit;
					interestingPoint = viewportCenter;
				} else {
					/** @type {number} */
					h = Number(_0xc178x33[_0x126b[60]](0, 2)) - n;
					interestingPoint = _0x126b[61];
				}
				if (h < 0) {
					/** @type {number} */
					h = 24 + h;
				} else {
					if (h > 24) {
						/** @type {number} */
						h = Number(_0xc178x33[_0x126b[60]](0, 2)) - n - 24;
						objStr = _0xc178x31[_0x126b[54]]() + 1;
					}
				}
				const ha2 = _0xc178x33[_0x126b[60]](6);
				const Y = `${_0x126b[31]}${h}${_0x126b[62]}${interestingPoint}${_0x126b[62]}${ha2}${_0x126b[31]}`;
				const _0xc178x3a = new Date(`${_0x126b[31]}${_0xc178x31[_0x126b[63]]()}${_0x126b[64]}${_0xc178x31[_0x126b[58]]() + 1}${_0x126b[64]}${objStr}${_0x126b[33]}${Y}${_0x126b[31]}`);
				showCol[_0x126b[65]] = Y;
				return _0xc178x31[_0x126b[53]]() >= _0xc178x3a;
			}
			return false;
		}
		/**
		 * @param {?} d
		 * @return {?}
		 */
		function getClosestValidDate(d) {
			const _0xc178x3c = new Date;
			const _0xc178x3d = d[_0x126b[23]] / 60;
			const next = _0xc178x3c[_0x126b[66]]() / 60 - _0xc178x3d;
			return next;
		}
		/**
		 * @param {?} $element
		 * @param {?} $state
		 * @return {?}
		 */
		function create($element, $state) {
			const undefined = stateSet($element, $state);
			const _TempImages = $state[_0x126b[1]](_0x126b[67]);
			const reverseItemData = $state[_0x126b[1]](_0x126b[68]);
			const _0xc178x43 = $state[_0x126b[1]](_0x126b[69]);
			const _0xc178x44 = $state[_0x126b[1]](_0x126b[70]);
			if (Array[_0x126b[71]](undefined)) {
				const [tempId, updatedReverseItemControlData] = undefined;
				_TempImages[_0x126b[65]] = tempId;
				reverseItemData[_0x126b[65]] = updatedReverseItemControlData;
				$state[_0x126b[73]](_0x126b[72]);
			} else {
				_TempImages[_0x126b[65]] = undefined;
				_0xc178x44[_0x126b[74]](_0x126b[72], _0x126b[72]);
				if (isNaN(undefined)) {
					_0xc178x43[_0x126b[74]](_0x126b[72], _0x126b[72]);
				}
			}
			const $processing = $state;
			return $processing;
		}
		/**
		 * @param {?} HTTP
		 * @param {?} value
		 * @return {undefined}
		 */
		function model(HTTP, value) {
			const _0xc178x47 = artistTrack[_0x126b[9]][_0x126b[75]];
			const duration = create(value, value[_0x126b[76]]);
			const _0xc178x48 = HTTP[_0x126b[1]](`${_0x126b[77]}`);
			const _0xc178x49 = HTTP[_0x126b[3]](_0x126b[2]);
			const _0xc178x4a = HTTP[_0x126b[3]](_0x126b[78]);
			_0xc178x49[_0x126b[28]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x126b[79]]();
			});
			if (!_0xc178x48) {
				return;
			}
			if (_0xc178x47 === _0x126b[80]) {
				const forceExecution = _0xc178x48[_0x126b[1]](_0x126b[78]);
				const tiledImageBoundsUpdatesNum = forceExecution ? forceExecution[_0x126b[9]][_0x126b[75]] : _0x126b[31];
				const GL_SETTER = _0xc178x48[_0x126b[1]](_0x126b[81]);
				const GL_ARRAY_SETTER = _0xc178x48[_0x126b[1]](_0x126b[82]);
				const loc = document[_0x126b[84]](_0x126b[83]);
				loc[_0x126b[91]][_0x126b[90]](_0x126b[85], _0x126b[86], _0x126b[87], _0x126b[88], _0x126b[89]);
				_0xc178x3[_0x126b[28]]((canCreateDiscussions) => {
					loc[_0x126b[93]](_0x126b[92], duration);
				});
				if (forceExecution && tiledImageBoundsUpdatesNum === _0x126b[94]) {
					_0xc178x3[_0x126b[28]]((canCreateDiscussions) => {
						forceExecution[_0x126b[93]](_0x126b[95], duration);
					});
				} else {
					if (GL_SETTER) {
						GL_SETTER[_0x126b[93]](_0x126b[95], loc);
					} else {
						GL_ARRAY_SETTER[_0x126b[93]](_0x126b[95], loc);
					}
				}
			} else {
				const forceExecution = _0xc178x48[_0x126b[1]](_0x126b[78]);
				const tiledImageBoundsUpdatesNum = forceExecution ? forceExecution[_0x126b[9]][_0x126b[75]] : _0x126b[31];
				const _related2 = _0xc178x48[_0x126b[1]](_0x126b[96]);
				const backEl = document[_0x126b[84]](_0x126b[83]);
				backEl[_0x126b[91]][_0x126b[90]](_0x126b[85], _0x126b[86], _0x126b[87], _0x126b[89]);
				_0xc178x3[_0x126b[28]]((canCreateDiscussions) => {
					backEl[_0x126b[93]](_0x126b[92], duration);
				});
				if (forceExecution && tiledImageBoundsUpdatesNum === _0x126b[97]) {
					_0xc178x3[_0x126b[28]]((canCreateDiscussions) => {
						forceExecution[_0x126b[93]](_0x126b[95], duration);
					});
				} else {
					if (_related2) {
						_related2[_0x126b[93]](_0x126b[95], backEl);
					}
				}
			}
			const _0xc178x51 = artistTrack[_0x126b[3]](_0x126b[2]);
			_0xc178x51[_0x126b[28]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x126b[79]]();
			});
		}
		const artistTrack = document[_0x126b[1]](_0x126b[0]);
		if (!artistTrack) {
			return;
		}
		const _0xc178x3 = artistTrack[_0x126b[3]](_0x126b[2]);
		if (!_0xc178x3[_0x126b[4]]) {
			return;
		}
		const _0xc178x4 = theme[_0x126b[6]][_0x126b[5]](artistTrack, _0x126b[2]);
		const _0xc178x5 = document[_0x126b[3]](_0x126b[7]);
		for (let [pipeline, templates] of _0xc178x4) {
			templates[_0x126b[28]]((canCreateDiscussions) => {
				const clock = {
					visibility : canCreateDiscussions[_0x126b[9]][_0x126b[8]],
					tags : canCreateDiscussions[_0x126b[9]][_0x126b[10]],
					types : canCreateDiscussions[_0x126b[9]][_0x126b[11]],
					productId : canCreateDiscussions[_0x126b[9]][_0x126b[12]],
					collection : canCreateDiscussions[_0x126b[9]][_0x126b[13]],
					template : canCreateDiscussions[_0x126b[14]](true),
					minDate : canCreateDiscussions[_0x126b[9]][_0x126b[15]],
					maxDate : canCreateDiscussions[_0x126b[9]][_0x126b[16]],
					showAsDate : canCreateDiscussions[_0x126b[9]][_0x126b[17]],
					dateFormat : canCreateDiscussions[_0x126b[9]][_0x126b[18]],
					excludeDays : canCreateDiscussions[_0x126b[9]][_0x126b[19]],
					showCutOff : canCreateDiscussions[_0x126b[9]][_0x126b[20]],
					cutOffTime : canCreateDiscussions[_0x126b[9]][_0x126b[21]],
					cutOffMessage : canCreateDiscussions[_0x126b[9]][_0x126b[22]],
					timeZone : canCreateDiscussions[_0x126b[9]][_0x126b[23]]
				};
				_0xc178x5[_0x126b[28]]((actions$) => {
					const xhr = actions$[_0x126b[1]](_0x126b[24]);
					if (!xhr) {
						return;
					}
					const artistTrack = JSON[_0x126b[26]](xhr[_0x126b[25]]);
					theme[_0x126b[6]][_0x126b[27]](artistTrack, clock, function() {
						model(actions$, clock);
					});
				});
			});
		}
	}
	DeliveryTime();
	{%- endif -%} }
	
	
	function themeDeliveryTimeDestroy() { {%- if settings.dbtfy_delivery_time -%}
	'use strict';
	/** @type {!Array} */
	var _0x67d0 = [".dbtfy-delivery_time", "querySelectorAll", "remove", "forEach", "dbtfy-delivery_time-destroy", "add", "classList", "body"];
	destroyDeliveryTime();
	/**
	 * @return {undefined}
	 */
	function destroyDeliveryTime() {
		const _0x5b8dx2 = document[_0x67d0[1]](_0x67d0[0]);
		_0x5b8dx2[_0x67d0[3]]((canCreateDiscussions) => {
			canCreateDiscussions[_0x67d0[2]]();
		});
		document[_0x67d0[7]][_0x67d0[6]][_0x67d0[5]](_0x67d0[4]);
	};
	{%- endif -%} }
	
	/* start-dbtfy-discount-saved */ function themeDiscountSaved(){ {%- if settings.dbtfy_discount_saved -%}
	'use strict';
	/** @type {!Array} */
	var _0x4f06 = [".dbtfy-discount_saved", "querySelectorAll", "length", "[id^='MainProductSelect']", "querySelector", ".number-discount_saved", "hide", "add", "classList", "forEach", "value", ".discount_saved-", "", "remove", "[data-section-type='product-template']", "closest", "change", "addEventListener", ".product-form__input, .single-option-selector__radio"];
	/**
	 * @return {undefined}
	 */
	function DiscountSaved() {
		/**
		 * @param {?} HTTP
		 * @return {undefined}
		 */
		function model(HTTP) {
			const _0x57a8x5 = HTTP[_0x4f06[4]](_0x4f06[3]);
			if (!_0x57a8x5) {
				return;
			}
			const _0x57a8x6 = HTTP[_0x4f06[1]](_0x4f06[5]);
			_0x57a8x6[_0x4f06[9]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x4f06[8]][_0x4f06[7]](_0x4f06[6]);
			});
			const stripeAPIVersion = _0x57a8x5[_0x4f06[10]];
			if (!stripeAPIVersion) {
				return;
			}
			const _0x57a8x9 = HTTP[_0x4f06[4]](`${_0x4f06[11]}${stripeAPIVersion}${_0x4f06[12]}`);
			if (_0x57a8x9) {
				_0x57a8x9[_0x4f06[8]][_0x4f06[13]](_0x4f06[6]);
			}
		}
		const _0x57a8x2 = document[_0x4f06[1]](_0x4f06[0]);
		if (!_0x57a8x2[_0x4f06[2]]) {
			return;
		}
		_0x57a8x2[_0x4f06[9]]((canCreateDiscussions) => {
			const props$ = canCreateDiscussions[_0x4f06[15]](_0x4f06[14]);
			if (!props$) {
				return;
			}
			model(props$);
			props$[_0x4f06[1]](_0x4f06[18])[_0x4f06[9]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x4f06[17]](_0x4f06[16], () => {
					model(props$);
				});
			});
		});
	}
	DiscountSaved();
	
	{%- endif -%} }
	
	function themeDiscountSavedDestroy() { {%- if settings.dbtfy_discount_saved -%}
	
	'use strict';
	/** @type {!Array} */
	var _0x4cf5 = [".dbtfy-discount_saved", "querySelectorAll", ".dbtfy-sticky_addtocart .discount-sticky-price", "remove", "forEach"];
	destroyDiscountSaved();
	/**
	 * @return {undefined}
	 */
	function destroyDiscountSaved() {
		const _0xc508x2 = document[_0x4cf5[1]](_0x4cf5[0]);
		const _0xc508x3 = document[_0x4cf5[1]](_0x4cf5[2]);
		_0xc508x2[_0x4cf5[4]]((canCreateDiscussions) => {
			canCreateDiscussions[_0x4cf5[3]]();
		});
		_0xc508x3[_0x4cf5[4]]((canCreateDiscussions) => {
			canCreateDiscussions[_0x4cf5[3]]();
		});
	};
	{%- endif -%} } /* end-dbtfy-discount-saved */
	
	
	/* start-dbtfy-facebook-messenger */ function themeFacebookMessengerDestroy() { {%- if settings.dbtfy_facebook_messenger -%} 
	'use strict';
	/** @type {!Array} */
	var _0x3c22 = [".dbtfy-facebook_messenger", "querySelectorAll", "length", "remove", "forEach"];
	destroyFacebookMessenger();
	/**
	 * @return {undefined}
	 */
	function destroyFacebookMessenger() {
		const _0x9dd9x2 = document[_0x3c22[1]](_0x3c22[0]);
		if (_0x9dd9x2[_0x3c22[2]]) {
			_0x9dd9x2[_0x3c22[4]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x3c22[3]]();
			});
		}
	};
	
	{%- endif -%} } /* end-dbtfy-facebook-messenger */
	
	
		/* start-dbtfy-faq-page */ function themeFaqPage(){ {%- if settings.dbtfy_faq_page -%}
		'use strict';
		/** @type {!Array} */
		var _0x2c41 = [".dbtfy-faq_page", "length", "jQueryUIPluginLink", "variables", "jQueryUIAutocompletePluginLink", "loadScript", "section-id", "data", ".fq-main", "find", ".fp-item", "#FaqSearch-", "", "data-question", "attr", "data-index", "push", "each", "max-width", "outerWidth", "px", "css", "ul.ui-autocomplete", ".tab-header", '.fp-item[data-index="', "index", "item", '"]', "scroll", "tabs", "autocomplete"];
		/**
		 * @return {undefined}
		 */
		function FaqPage() {
			/**
			 * @return {undefined}
			 */
			function autocomplete() {
				$realtime[_0x2c41[17]](function() {
					var HTTP = $(this);
					var stripeAPIVersion = HTTP[_0x2c41[9]](_0x2c41[8])[_0x2c41[7]](_0x2c41[6]);
					/** @type {!Array} */
					var command_codes = [];
					var _0xdd95x7 = HTTP[_0x2c41[9]](_0x2c41[10]);
					var src = HTTP[_0x2c41[9]](`${_0x2c41[11]}${stripeAPIVersion}${_0x2c41[12]}`);
					_0xdd95x7[_0x2c41[17]](function() {
						var $realtime = $(this);
						var data = {
							label : $realtime[_0x2c41[14]](_0x2c41[13]),
							value : $realtime[_0x2c41[14]](_0x2c41[13]),
							index : $realtime[_0x2c41[14]](_0x2c41[15])
						};
						command_codes[_0x2c41[16]](data);
					});
					src[_0x2c41[30]]({
						maxShowItems : 5,
						source : command_codes,
						search : function(Listy, value) {
							$(_0x2c41[22])[_0x2c41[21]](_0x2c41[18], `${_0x2c41[12]}${src[_0x2c41[19]]()}${_0x2c41[20]}`);
						},
						select : function(forceOpen, noScrollIntoView) {
							const artistTrack = HTTP[_0x2c41[9]](`${_0x2c41[24]}${noScrollIntoView[_0x2c41[26]][_0x2c41[25]]}${_0x2c41[27]}`)[_0x2c41[9]](_0x2c41[23]);
							theme[_0x2c41[29]][_0x2c41[28]](artistTrack);
						}
					});
				});
			}
			var $realtime = $(_0x2c41[0]);
			if (!$realtime[_0x2c41[1]]) {
				return;
			}
			theme[_0x2c41[5]](theme[_0x2c41[3]][_0x2c41[2]], () => {
				theme[_0x2c41[5]](theme[_0x2c41[3]][_0x2c41[4]], autocomplete);
			});
		}
		FaqPage();
		{%- endif -%} }
	
		function themeFaqPageDestroy() { {%- if settings.dbtfy_faq_page -%}
		'use strict';
		/** @type {!Array} */
		var _0x3673 = ["dbtfy-faq_page-destroy", "add", "classList", "body", ".dbtfy-faq_page", "querySelector", "remove"];
		document[_0x3673[3]][_0x3673[2]][_0x3673[1]](_0x3673[0]);
		destroyFaqPage();
		/**
		 * @return {undefined}
		 */
		function destroyFaqPage() {
			const _0xe64dx2 = document[_0x3673[5]](_0x3673[4]);
			if (_0xe64dx2) {
				_0xe64dx2[_0x3673[6]]();
			}
		};
	
		{%- endif -%} } /* end-dbtfy-faq-page */
	
		/* start-dbtfy-inactive-tab-message */ function themeInactiveTabMessage(){ {%- if settings.dbtfy_inactive_tab_message -%}
		'use strict';
		/** @type {!Array} */
		var _0x7340 = ["title", "dbtfyInactiveTabFirstMessage", "settings", "dbtfyInactiveTabSecondMessage", "dbtfyInactiveTabDelay", "", "visibilitychange", "hidden", "addEventListener"];
		/**
		 * @return {undefined}
		 */
		function InactiveTabMessage() {
			/**
			 * @return {undefined}
			 */
			function _executeCallbackAfterASufficientIdlePeriod() {
				/** @type {number} */
				rumbleInterval = setInterval(function() {
					document[_0x7340[0]] = isDragging ? dragTime : order;
					/** @type {boolean} */
					isDragging = !isDragging;
				}, rumbleSpeed);
			}
			const sdir = document[_0x7340[0]];
			const order = theme[_0x7340[2]][_0x7340[1]];
			const dragTime = theme[_0x7340[2]][_0x7340[3]] ? theme[_0x7340[2]][_0x7340[3]] : sdir;
			const _0x8fc4x5 = !!theme[_0x7340[2]][_0x7340[3]];
			const rumbleSpeed = theme[_0x7340[2]][_0x7340[4]] * 1000;
			let isDragging = false;
			let rumbleInterval = _0x7340[5];
			if (!order) {
				return;
			}
			document[_0x7340[8]](_0x7340[6], function(canCreateDiscussions) {
				const _0x8fc4xa = !document[_0x7340[7]];
				if (!_0x8fc4xa) {
					if (_0x8fc4x5) {
						_executeCallbackAfterASufficientIdlePeriod();
					} else {
						document[_0x7340[0]] = order;
					}
				} else {
					clearInterval(rumbleInterval);
					document[_0x7340[0]] = sdir;
				}
			});
		}
		InactiveTabMessage();
	
		{%- endif -%} } /* end-dbtfy-inactive-tab-message */
	
	
		/* start-dbtfy-infinite-scroll */ function themeInfiniteScroll(){ {%- if settings.dbtfy_infinite_scroll -%}
		'use strict';
		/** @type {!Array} */
		var _0x7319 = [".dbtfy-infinite_scroll", "querySelector", "afterRecommendationLoad", "dispatchEvent", "body", "endlessType", "dataset", "#infiniteScrollContainer", "#infiniteScrollPagination", ".pagination", "querySelectorAll", "hidden", "setAttribute", "forEach"];
		/**
		 * @return {undefined}
		 */
		function InfiniteScroll() {
			/**
			 * @return {undefined}
			 */
			function move_section_down() {
				document[_0x7319[4]][_0x7319[3]](new CustomEvent(_0x7319[2]));
			}
			const _0xe332x2 = document[_0x7319[1]](_0x7319[0]);
			if (!_0xe332x2) {
				return;
			}
			const pre5 = _0xe332x2[_0x7319[6]][_0x7319[5]];
			new Ajaxinate({
				container : _0x7319[7],
				pagination : _0x7319[8],
				method : pre5,
				callback : move_section_down
			});
			const _0xe332x5 = document[_0x7319[10]](_0x7319[9]);
			_0xe332x5[_0x7319[13]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x7319[12]](_0x7319[11], _0x7319[11]);
			});
		}
		InfiniteScroll();
		
	
		{%- endif -%} } 
	
	
		function themeInfiniteScrollDestroy() { {%- if settings.dbtfy_infinite_scroll -%}
		'use strict';
		/** @type {!Array} */
		var _0xa46e = ["dbtfy-infinite_scroll-destroy", "add", "classList", "body", ".dbtfy-infinite_scroll", "querySelector", "remove", "undefined", "destroy"];
		destroyInfiniteScroll();
		/**
		 * @return {undefined}
		 */
		function destroyInfiniteScroll() {
			document[_0xa46e[3]][_0xa46e[2]][_0xa46e[1]](_0xa46e[0]);
			const _0x3c17x2 = document[_0xa46e[5]](_0xa46e[4]);
			if (!_0x3c17x2) {
				return;
			}
			_0x3c17x2[_0xa46e[6]]();
			if (typeof Ajaxinate === _0xa46e[7]) {
				return;
			}
			const _0x3c17x3 = new Ajaxinate;
			_0x3c17x3[_0xa46e[8]]();
		};
		{%- endif -%} } /* end--dbtfy-infinite-scroll */
	
	
		/* start-dbtfy-instagram-feed */ function themeInstagramFeed(){ {%- if settings.dbtfy_instagram_feed -%}
		'use strict';
		/** @type {!Array} */
		var _0x2c63 = [".dbtfy-instagram_feed", "querySelector", "#instafeed", "user-id", "data", "access-token", "resolution-images", "limit", "template", "user", "c6e4c736e82345a3898a0e299daa00fb", "run", "each"];
		/**
		 * @return {undefined}
		 */
		function InstagramFeed() {
			const _0xdd4cx2 = document[_0x2c63[1]](_0x2c63[0]);
			if (!_0xdd4cx2) {
				return;
			}
			var $realtime = $(_0x2c63[2]);
			$realtime[_0x2c63[12]](function() {
				var $realtime = $(this);
				var userId = $realtime[_0x2c63[4]](_0x2c63[3]);
				var token = $realtime[_0x2c63[4]](_0x2c63[5]);
				var res = $realtime[_0x2c63[4]](_0x2c63[6]);
				var maxApiRequestSize = $realtime[_0x2c63[4]](_0x2c63[7]);
				var Show2Template = $realtime[_0x2c63[4]](_0x2c63[8]);
				var _0xdd4cxa = new Instafeed({
					get : _0x2c63[9],
					userId : userId,
					accessToken : token,
					resolution : res,
					clientId : _0x2c63[10],
					limit : maxApiRequestSize,
					template : Show2Template
				});
				_0xdd4cxa[_0x2c63[11]]();
			});
		}
		InstagramFeed();
		{%- endif -%} }
		function themeInstagramFeedDestroy() { {%- if settings.dbtfy_instagram_feed -%}
		'use strict';
		/** @type {!Array} */
		var _0x2c63 = [".dbtfy-instagram_feed", "querySelector", "#instafeed", "user-id", "data", "access-token", "resolution-images", "limit", "template", "user", "c6e4c736e82345a3898a0e299daa00fb", "run", "each"];
		/**
		 * @return {undefined}
		 */
		function InstagramFeed() {
			const _0xdd4cx2 = document[_0x2c63[1]](_0x2c63[0]);
			if (!_0xdd4cx2) {
				return;
			}
			var $realtime = $(_0x2c63[2]);
			$realtime[_0x2c63[12]](function() {
				var $realtime = $(this);
				var userId = $realtime[_0x2c63[4]](_0x2c63[3]);
				var token = $realtime[_0x2c63[4]](_0x2c63[5]);
				var res = $realtime[_0x2c63[4]](_0x2c63[6]);
				var maxApiRequestSize = $realtime[_0x2c63[4]](_0x2c63[7]);
				var Show2Template = $realtime[_0x2c63[4]](_0x2c63[8]);
				var _0xdd4cxa = new Instafeed({
					get : _0x2c63[9],
					userId : userId,
					accessToken : token,
					resolution : res,
					clientId : _0x2c63[10],
					limit : maxApiRequestSize,
					template : Show2Template
				});
				_0xdd4cxa[_0x2c63[11]]();
			});
		}
		InstagramFeed();
		{%- endif -%} } 
		function themeInstagramFeedDestroy() { {%- if settings.dbtfy_instagram_feed -%}
					'use strict';
				/** @type {!Array} */
				var _0xc494 = [".dbtfy-instagram_feed", "querySelector", "remove"];
				destroyInstagramFeed();
				/**
				 * @return {undefined}
				 */
				function destroyInstagramFeed() {
					const _0x87fcx2 = document[_0xc494[1]](_0xc494[0]);
					if (_0x87fcx2) {
						_0x87fcx2[_0xc494[2]]();
					}
				};
		{%- endif -%} } /* end-dbtfy-instagram-feed */
	
	
		/* start-dbtfy-inventory-quantity */ function themeInventoryQuantity(){ {%- if settings.dbtfy_inventory_quantity -%}
		'use strict';
		/** @type {!Array} */
		var _0x6921 = [".dbtfy-inventory_quantity", "querySelector", ".dbtfy-inventory_quantity:not(.sticky_inventory_quantity)", "querySelectorAll", "length", "template-product", "contains", "classList", "body", ".sticky_inventory_quantity", "hidden", "removeAttribute", ".product-single[data-product-handle]", "closest", "productHandle", "dataset", "", "data-show-random-values", "hasAttribute", "min", "max", "storedQuantity-", "getItem", ".random-inventory_quantity", "random", "floor", "innerHTML", "setItem", 
		".product-form__input, .single-option-radio, .input-color_swatches", "change", "addEventListener", "forEach", ".select-sticky_addtocart", "stickyATCButtonStateChanged", "ProductPageBuilt", "ajaxCart.afterCartLoad", "on", "cart", "dbtfy:cartLoaded", "[data-product-handle]", ".btn--add-to-cart, .js-add-to-cart-button", "parentElement", ":disabled", "matches", "setAttribute", "children", "sticky_inventory_quantity", ".select-sticky_addtocart option:checked", "[id^='MainProductSelect'] option:checked", 
		"value", ".quantity-item-inventory_quantity", "quantity-item-", "-inventory_quantity", "some", "from", ".quantity-item-less-threshold-inventory_quantity", ".quantity-item-more-threshold-inventory_quantity", ".quantity-item-value-inventory_quantity", "id", "quantity", "reduce", "items", "thresholdQty", "originQuantity"];
		/**
		 * @return {undefined}
		 */
		function InventoryQuantity() {
			const _0xaaf1x2 = document[_0x6921[1]](_0x6921[0]);
			if (!_0xaaf1x2) {
				return;
			}
			const _0xaaf1x3 = document[_0x6921[3]](_0x6921[2]);
			if (!_0xaaf1x3[_0x6921[4]]) {
				return;
			}
			const lo = document[_0x6921[8]][_0x6921[7]][_0x6921[6]](_0x6921[5]);
			const hi = document[_0x6921[1]](_0x6921[9]);
			_0xaaf1x3[_0x6921[31]]((message) => {
				/**
				 * @param {?} message
				 * @return {undefined}
				 */
				function confirmModal(message) {
					/**
					 * @return {?}
					 */
					function destroy() {
						if (!message) {
							return;
						}
						const _0xaaf1x9 = message[_0x6921[18]](_0x6921[17]);
						const _0xaaf1x7 = message[_0x6921[13]](_0x6921[39]);
						if (!_0xaaf1x7) {
							return;
						}
						const _0xaaf1x18 = _0xaaf1x7[_0x6921[1]](_0x6921[40]);
						const _0xaaf1x19 = message[_0x6921[41]];
						if (_0xaaf1x18 && _0xaaf1x18[_0x6921[43]](_0x6921[42])) {
							message[_0x6921[44]](_0x6921[10], _0x6921[10]);
							if (_0xaaf1x19[_0x6921[45]][_0x6921[4]] === 1) {
								_0xaaf1x19[_0x6921[44]](_0x6921[10], _0x6921[10]);
							}
							return;
						}
						const rawDataIsArray = message[_0x6921[7]][_0x6921[6]](_0x6921[46]) ? document[_0x6921[1]](_0x6921[47]) : null;
						const rawDataIsList = _0xaaf1x7[_0x6921[1]](_0x6921[48]);
						const value = rawDataIsArray ? +rawDataIsArray[_0x6921[49]] : rawDataIsList ? +rawDataIsList[_0x6921[49]] : null;
						if (_0xaaf1x9) {
							message[_0x6921[11]](_0x6921[10]);
							_0xaaf1x19[_0x6921[11]](_0x6921[10]);
							return;
						}
						const data = message[_0x6921[3]](_0x6921[50]);
						if (!data[_0x6921[4]]) {
							message[_0x6921[44]](_0x6921[10], _0x6921[10]);
							return null;
						}
						const _0xaaf1x1e = Array[_0x6921[54]](data)[_0x6921[53]]((canCreateDiscussions) => {
							return canCreateDiscussions[_0x6921[7]][_0x6921[6]](`${_0x6921[51]}${value}${_0x6921[52]}`);
						});
						if (_0xaaf1x1e[_0x6921[4]]) {
							message[_0x6921[11]](_0x6921[10]);
							_0xaaf1x19[_0x6921[11]](_0x6921[10]);
						} else {
							message[_0x6921[44]](_0x6921[10], _0x6921[10]);
							if (_0xaaf1x19[_0x6921[45]][_0x6921[4]] === 1) {
								_0xaaf1x19[_0x6921[44]](_0x6921[10], _0x6921[10]);
							}
						}
						data[_0x6921[31]]((canCreateDiscussions) => {
							if (canCreateDiscussions[_0x6921[7]][_0x6921[6]](`${_0x6921[51]}${value}${_0x6921[52]}`)) {
								const _0xaaf1x20 = canCreateDiscussions[_0x6921[1]](_0x6921[55]);
								const _0xaaf1x21 = canCreateDiscussions[_0x6921[1]](_0x6921[56]);
								const reverseItemData = canCreateDiscussions[_0x6921[1]](_0x6921[57]);
								const pixelSizeTargetMax = theme[_0x6921[37]][_0x6921[61]][_0x6921[60]]((boardManager, htmlvalue) => {
									if (htmlvalue[_0x6921[58]] === value) {
										return boardManager + htmlvalue[_0x6921[59]];
									}
									return boardManager;
								}, 0);
								const scrollLeft = +canCreateDiscussions[_0x6921[15]][_0x6921[62]];
								const zeroSizeMax = +canCreateDiscussions[_0x6921[15]][_0x6921[63]];
								const firstColLeft = zeroSizeMax - pixelSizeTargetMax;
								if (firstColLeft > 0) {
									if (reverseItemData) {
										reverseItemData[_0x6921[26]] = firstColLeft;
									}
									canCreateDiscussions[_0x6921[11]](_0x6921[10]);
									if (_0xaaf1x21) {
										if (firstColLeft <= scrollLeft) {
											_0xaaf1x20[_0x6921[11]](_0x6921[10]);
											_0xaaf1x21[_0x6921[44]](_0x6921[10], _0x6921[10]);
										} else {
											_0xaaf1x20[_0x6921[44]](_0x6921[10], _0x6921[10]);
											_0xaaf1x21[_0x6921[11]](_0x6921[10]);
										}
									}
								} else {
									canCreateDiscussions[_0x6921[44]](_0x6921[10], _0x6921[10]);
									if (data[_0x6921[4]] === 1) {
										message[_0x6921[44]](_0x6921[10], _0x6921[10]);
									}
								}
							} else {
								canCreateDiscussions[_0x6921[44]](_0x6921[10], _0x6921[10]);
							}
						});
					}
					/**
					 * @return {undefined}
					 */
					function showModal() {
						if (!message) {
							return;
						}
						const _0xaaf1x9 = message[_0x6921[18]](_0x6921[17]);
						if (_0xaaf1x9) {
							message[_0x6921[11]](_0x6921[10]);
							return;
						}
						const data = message[_0x6921[3]](_0x6921[50]);
						const _0xaaf1x2b = Array[_0x6921[54]](data)[_0x6921[53]]((canCreateDiscussions) => {
							return !canCreateDiscussions[_0x6921[18]](_0x6921[10]);
						});
						if (_0xaaf1x2b) {
							message[_0x6921[11]](_0x6921[10]);
						} else {
							message[_0x6921[44]](_0x6921[10], _0x6921[10]);
						}
					}
					if (!theme[_0x6921[37]]) {
						document[_0x6921[30]](_0x6921[38], destroy);
					} else {
						destroy();
						showModal();
					}
				}
				message[_0x6921[11]](_0x6921[10]);
				const _0xaaf1x7 = message[_0x6921[13]](_0x6921[12]);
				const stripeAPIVersion = _0xaaf1x7 ? _0xaaf1x7[_0x6921[15]][_0x6921[14]] : _0x6921[16];
				if (!stripeAPIVersion) {
					return;
				}
				const _0xaaf1x9 = message[_0x6921[18]](_0x6921[17]);
				const r = +message[_0x6921[15]][_0x6921[19]];
				let rHeaviestRain = +message[_0x6921[15]][_0x6921[20]];
				if (_0xaaf1x9) {
					const l = +sessionStorage[_0x6921[22]](`${_0x6921[21]}${stripeAPIVersion}${_0x6921[16]}`) || _0x6921[16];
					const value = l - 1;
					const object = message[_0x6921[1]](_0x6921[23]);
					let result = r;
					if (l) {
						if (l !== r) {
							result = Math[_0x6921[20]](value, r);
						}
					} else {
						result = Math[_0x6921[25]](Math[_0x6921[24]]() * (rHeaviestRain - r + 1)) + r;
					}
					if (object) {
						/** @type {string} */
						object[_0x6921[26]] = String(result);
					}
					if (lo && hi) {
						let object = hi[_0x6921[1]](_0x6921[23]);
						/** @type {string} */
						object[_0x6921[26]] = String(result);
						confirmModal(hi);
					}
					sessionStorage[_0x6921[27]](`${_0x6921[21]}${stripeAPIVersion}${_0x6921[16]}`, String(result));
				}
				const _0xaaf1x11 = document[_0x6921[3]](_0x6921[28]);
				_0xaaf1x11[_0x6921[31]]((canCreateDiscussions) => {
					canCreateDiscussions[_0x6921[30]](_0x6921[29], function() {
						confirmModal(message);
					});
				});
				const _0xaaf1x13 = document[_0x6921[1]](_0x6921[32]);
				if (_0xaaf1x13) {
					_0xaaf1x13[_0x6921[30]](_0x6921[29], () => {
						if (lo && hi) {
							confirmModal(hi);
						}
					});
					document[_0x6921[30]](_0x6921[33], () => {
						confirmModal(hi);
					});
				}
				confirmModal(message);
				if (lo && hi) {
					confirmModal(hi);
				}
				document[_0x6921[30]](_0x6921[34], () => {
					confirmModal(message);
				});
				$(_0x6921[8])[_0x6921[36]](_0x6921[35], function(canCreateDiscussions, isSlidingUp) {
					confirmModal(message);
				});
			});
		}
		InventoryQuantity();
		
		{%- endif -%} }
	
		function themeInventoryQuantityDestroy() { {%- if settings.dbtfy_inventory_quantity -%}
		'use strict';
		/** @type {!Array} */
		var _0x78a4 = [".dbtfy-inventory_quantity", "querySelectorAll", ".product-single__quantity", "remove", "forEach", "data-quantity-enabled", "hasAttribute", "data-quantity-breaks-enabled"];
		destroyInventoryQuantity();
		/**
		 * @return {undefined}
		 */
		function destroyInventoryQuantity() {
			const _0xd70ax2 = document[_0x78a4[1]](_0x78a4[0]);
			const _0xd70ax3 = document[_0x78a4[1]](_0x78a4[2]);
			_0xd70ax2[_0x78a4[4]]((canCreateDiscussions) => {
				canCreateDiscussions[_0x78a4[3]]();
			});
			_0xd70ax3[_0x78a4[4]]((canCreateDiscussions) => {
				const hasSongChanged = canCreateDiscussions[_0x78a4[6]](_0x78a4[5]);
				const isReplayingSong = canCreateDiscussions[_0x78a4[6]](_0x78a4[7]);
				if (!hasSongChanged && !isReplayingSong) {
					canCreateDiscussions[_0x78a4[3]]();
				}
			});
		};
		{%- endif -%} } /* end-dbtfy-inventory-quantity */
	
	
			/* start-dbtfy-linked-options */ function themeLinkedOptions(){ {%- if settings.dbtfy_linked_options -%}
	
	// WARNING! This file contains some subset of JS that is not supported by type inference.
	// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
	'use strict';
	var _0xcd81 = [".js-single-option-selector", "select.js-single-option-selector", "input.js-single-option-selector", ".js-color-swatch", "option1", "option2", "option3", "container", "init", "prototype", "data-section-id", "getAttribute", "ProductJson-", "", "getElementById", "productJSON", "innerHTML", "parse", "has_only_default_variant", "length", "options", "optionKeysFiltered", "initEvents", "calculateCombinations", "currentOptions", "getCurrentOptions", "optionsWithVariants", "getOptionsWithVariants", 
	"hideUnavailableCombinations", "singleOption", "querySelectorAll", "change", "bind", "addEventListener", "forEach", "reduce", "map", "options_with_values", "stringify", "keys", "option", "indexOf", "every", "push", "splice", "variants", "assign", "toggleOption", '[name="', '"]', "querySelector", "colorSwatchOption", '[data-option-position="', '"][value="', "escape", "disabled", "toggleAttribute", "hidden", "nextElementSibling", "tagName", "SELECT", 'option[value="', "checkboxOption", "optionValue", 
	"isUnavailable", "entries", "selectOption", '"]:checked', "value", "[data-section-type='product-template']"];
	const selectors = {
		singleOption : _0xcd81[0],
		selectOption : _0xcd81[1],
		checkboxOption : _0xcd81[2],
		colorSwatchOption : _0xcd81[3]
	};
	const optionKeys = [_0xcd81[4], _0xcd81[5], _0xcd81[6]];
	function LinkedOptions(canCreateDiscussions) {
		this[_0xcd81[7]] = canCreateDiscussions;
		this[_0xcd81[8]]();
	}
	LinkedOptions[_0xcd81[9]][_0xcd81[8]] = function() {
		const stripeAPIVersion = this[_0xcd81[7]][_0xcd81[11]](_0xcd81[10]);
		const DOM_CONTENT_LOADED = `${_0xcd81[12]}${stripeAPIVersion}${_0xcd81[13]}`;
		const xhr = document[_0xcd81[14]](DOM_CONTENT_LOADED);
		try {
			this[_0xcd81[15]] = JSON[_0xcd81[17]](xhr[_0xcd81[16]]);
		} catch (e) {
			return null;
		}
		if (this[_0xcd81[15]][_0xcd81[18]] || this[_0xcd81[15]][_0xcd81[20]][_0xcd81[19]] === 1) {
			return null;
		}
		this[_0xcd81[21]] = [...optionKeys];
		this[_0xcd81[21]][_0xcd81[19]] = this[_0xcd81[15]][_0xcd81[20]][_0xcd81[19]];
		this[_0xcd81[22]]();
		this[_0xcd81[23]]();
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[23]] = function() {
		this[_0xcd81[24]] = this[_0xcd81[25]]();
		this[_0xcd81[26]] = this[_0xcd81[27]]();
		this[_0xcd81[28]]();
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[22]] = function() {
		const _0x8c70x8 = this[_0xcd81[7]][_0xcd81[30]](selectors[_0xcd81[29]]);
		_0x8c70x8[_0xcd81[34]]((canCreateDiscussions) => {
			canCreateDiscussions[_0xcd81[33]](_0xcd81[31], this[_0xcd81[23]][_0xcd81[32]](this));
		});
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[27]] = function() {
		const _0x8c70xa = optionKeys[_0xcd81[36]]((sortColumnIdentifier) => {
			return optionKeys[_0xcd81[35]]((savedMap, name) => {
				if (sortColumnIdentifier !== name) {
					savedMap[name] = this[_0xcd81[24]][name];
				}
				return savedMap;
			}, {});
		});
		_0x8c70xa[_0xcd81[19]] = this[_0xcd81[15]][_0xcd81[20]][_0xcd81[19]];
		const chromeData = JSON[_0xcd81[17]](JSON[_0xcd81[38]](this[_0xcd81[15]][_0xcd81[37]]));
		return Object[_0xcd81[46]]({}, {}, ..._0x8c70xa[_0xcd81[36]]((expect, canCreateDiscussions) => {
			const _0x8c70x11 = Object[_0xcd81[39]](expect);
			const songId = `${_0xcd81[40]}${canCreateDiscussions + 1}${_0xcd81[13]}`;
			const torrent_title = this[_0xcd81[15]][_0xcd81[20]][this[_0xcd81[21]][_0xcd81[41]](songId)];
			const variants = this[_0xcd81[15]][_0xcd81[45]][_0xcd81[35]]((canCreateDiscussions, data) => {
				const _0x8c70x16 = _0x8c70x11[_0xcd81[42]]((key) => {
					return data[key] === expect[key];
				});
				if (_0x8c70x16) {
					canCreateDiscussions[_0xcd81[43]]({
						optionValue : data[songId]
					});
					chromeData[songId][_0xcd81[44]](chromeData[songId][_0xcd81[41]](data[songId]), 1);
				}
				return canCreateDiscussions;
			}, []);
			chromeData[songId][_0xcd81[34]]((optionValue) => {
				variants[_0xcd81[43]]({
					optionValue : optionValue,
					isUnavailable : true
				});
			});
			return {
				[songId]:{
					title : torrent_title,
					variants : variants
				}
			};
		}));
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[47]] = function(searchSortBy, layer, options = true) {
		let HTTP = this[_0xcd81[7]][_0xcd81[50]](`${_0xcd81[13]}${selectors[_0xcd81[29]]}${_0xcd81[48]}${searchSortBy}${_0xcd81[49]}`);
		const monaca = this[_0xcd81[7]][_0xcd81[50]](`${_0xcd81[13]}${selectors[_0xcd81[51]]}${_0xcd81[52]}${searchSortBy}${_0xcd81[53]}${CSS[_0xcd81[54]](layer)}${_0xcd81[49]}`);
		if (monaca) {
			monaca[_0xcd81[56]](_0xcd81[55], options);
			monaca[_0xcd81[58]][_0xcd81[56]](_0xcd81[57], options);
		}
		if (HTTP) {
			if (HTTP[_0xcd81[59]] === _0xcd81[60]) {
				const monaca = HTTP[_0xcd81[50]](`${_0xcd81[61]}${CSS[_0xcd81[54]](layer)}${_0xcd81[49]}`);
				monaca[_0xcd81[56]](_0xcd81[57], options);
			}
		}
		HTTP = this[_0xcd81[7]][_0xcd81[50]](`${_0xcd81[13]}${selectors[_0xcd81[62]]}${_0xcd81[48]}${searchSortBy}${_0xcd81[53]}${CSS[_0xcd81[54]](layer)}${_0xcd81[49]}`);
		if (HTTP) {
			HTTP[_0xcd81[56]](_0xcd81[55], options);
			HTTP[_0xcd81[58]][_0xcd81[56]](_0xcd81[57], options);
		}
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[28]] = function() {
		Object[_0xcd81[65]](this[_0xcd81[26]])[_0xcd81[34]](([cRed, cGreen]) => {
			cGreen[_0xcd81[45]][_0xcd81[34]]((mods) => {
				this[_0xcd81[47]](cRed, mods[_0xcd81[63]], Boolean(mods[_0xcd81[64]]));
			});
		});
	};
	LinkedOptions[_0xcd81[9]][_0xcd81[25]] = function() {
		return optionKeys[_0xcd81[35]]((object, name) => {
			const _0x8c70x1c = this[_0xcd81[7]][_0xcd81[50]](`${_0xcd81[13]}${selectors[_0xcd81[66]]}${_0xcd81[48]}${name}${_0xcd81[49]}`);
			const o_mocks = _0x8c70x1c ? _0x8c70x1c : this[_0xcd81[7]][_0xcd81[50]](`${_0xcd81[13]}${selectors[_0xcd81[62]]}${_0xcd81[48]}${name}${_0xcd81[67]}`);
			if (o_mocks) {
				object[name] = o_mocks[_0xcd81[68]];
			} else {
				object[name] = null;
			}
			return object;
		}, {});
	};
	const productSections = document[_0xcd81[30]](_0xcd81[69]);
	productSections[_0xcd81[34]]((canCreateDiscussions) => {
		new LinkedOptions(canCreateDiscussions);
	});
	
	{%- endif -%} } /* end-dbtfy-linked-options */
	
	
	 /* start-dbtfy-live-view */ function themeLiveView(){ {%- if settings.dbtfy_live_view -%}
	 'use strict';
	 /** @type {!Array} */
	 var _0x8b77 = [".dbtfy-live_view", "querySelectorAll", "length", "liveView", "getItem", "dbtfyLiveViewMin", "settings", "dbtfyLiveViewMax", "dbtfyLiveViewIntervalSteps", "dbtfyLiveViewIntervalTime", "getRandomNumberInRange", "random", "setItem", ".number-live_view", "querySelector", "innerHTML", "forEach"];
	 /**
		* @return {undefined}
		*/
	 function LiveView() {
		 /**
			* @return {undefined}
			*/
		 function innerTimer() {
			 const skipPool = +sessionStorage[_0x8b77[4]](_0x8b77[3]);
			 const pixelSizeTargetMax = theme[_0x8b77[10]](1, GET_AUTH_URL_TIMEOUT);
			 const zeroSizeMax = skipPool ? skipPool : theme[_0x8b77[10]](newH, dataLength);
			 const _0xa9e1xb = Math[_0x8b77[11]]();
			 let editingNow = 0;
			 let avgRangeEnd = 0;
			 if (_0xa9e1xb < 0.5) {
				 /** @type {number} */
				 avgRangeEnd = zeroSizeMax - pixelSizeTargetMax;
				 editingNow = avgRangeEnd > newH ? avgRangeEnd : newH;
			 } else {
				 avgRangeEnd = zeroSizeMax + pixelSizeTargetMax;
				 editingNow = avgRangeEnd < dataLength ? avgRangeEnd : dataLength;
			 }
			 sessionStorage[_0x8b77[12]](_0x8b77[3], editingNow);
			 remove(editingNow);
		 }
		 /**
			* @param {?} name
			* @return {undefined}
			*/
		 function remove(name) {
			 _0xa9e1x2[_0x8b77[16]]((canCreateDiscussions) => {
				 const availableDevicesDescriptions = canCreateDiscussions[_0x8b77[14]](_0x8b77[13]);
				 if (availableDevicesDescriptions) {
					 availableDevicesDescriptions[_0x8b77[15]] = name;
				 }
			 });
		 }
		 const _0xa9e1x2 = document[_0x8b77[1]](_0x8b77[0]);
		 if (!_0xa9e1x2[_0x8b77[2]]) {
			 return;
		 }
		 const editingNow = sessionStorage[_0x8b77[4]](_0x8b77[3]);
		 const newH = theme[_0x8b77[6]][_0x8b77[5]];
		 const dataLength = theme[_0x8b77[6]][_0x8b77[7]];
		 const GET_AUTH_URL_TIMEOUT = theme[_0x8b77[6]][_0x8b77[8]];
		 const rumbleSpeed = theme[_0x8b77[6]][_0x8b77[9]];
		 if (editingNow) {
			 remove(editingNow);
		 }
		 setInterval(innerTimer, rumbleSpeed);
	 }
	 LiveView();
	 {%- endif -%} }
	
	
	 function themeLiveViewDestroy() { {%- if settings.dbtfy_live_view -%}
	 'use strict';
	 /** @type {!Array} */
	 var _0xe34a = [".dbtfy-live_view", "querySelectorAll", "length", "remove", "forEach", "dbtfy-delivery_time-destroy", "contains", "classList", "body", ".live-view-delivery-time-features"];
	 destroyLiveView();
	 /**
		* @return {undefined}
		*/
	 function destroyLiveView() {
		 const _0xc61bx2 = document[_0xe34a[1]](_0xe34a[0]);
		 if (_0xc61bx2[_0xe34a[2]]) {
			 _0xc61bx2[_0xe34a[4]]((canCreateDiscussions) => {
				 canCreateDiscussions[_0xe34a[3]]();
			 });
		 }
		 if (document[_0xe34a[8]][_0xe34a[7]][_0xe34a[6]](_0xe34a[5])) {
			 const _0xc61bx4 = document[_0xe34a[1]](_0xe34a[9]);
			 _0xc61bx4[_0xe34a[4]]((canCreateDiscussions) => {
				 canCreateDiscussions[_0xe34a[3]]();
			 });
		 }
	 };
	
	 {%- endif -%} } /* end-dbtfy-live-view */
	
	
		 /* start-dbtfy-mega-menu */ function themeMegaMenu(){ {%- if settings.dbtfy_mega_menu -%}
		 'use strict';
		 /** @type {!Array} */
		 var _0x9085 = [".mm-item", "length", "position", "data", "eq", ".nav-container-menu .site-nav__item", "insertBefore", "each", "shopify:section:load", "dropdown", "on"];
		 /**
			* @return {undefined}
			*/
		 function MegaMenu() {
			 var $realtime = $(_0x9085[0]);
			 if (!$realtime[_0x9085[1]]) {
				 return;
			 }
			 $realtime[_0x9085[7]](function() {
				 var $T = $(this);
				 var _0xd6fax4 = $T[_0x9085[3]](_0x9085[2]);
				 var val = $(_0x9085[5])[_0x9085[4]](_0xd6fax4 - 1);
				 $T[_0x9085[6]](val);
			 });
		 }
		 $(document)[_0x9085[10]](_0x9085[8], function() {
			 MegaMenu();
			 theme[_0x9085[9]]();
		 });
		 MegaMenu();
		 {%- endif -%} }
	
	
		 function themeMegaMenuDestroy() { {%- if settings.dbtfy_mega_menu -%}
		 'use strict';
		 /** @type {!Array} */
		 var _0x314b = ["dbtfy-mega_menu-destroy", "add", "classList", "body", "shopify:section:load", "on", ".dbtfy-mega_menu", "querySelectorAll", "length", "remove", "forEach"];
		 document[_0x314b[3]][_0x314b[2]][_0x314b[1]](_0x314b[0]);
		 destroyMegaMenu();
		 $(document)[_0x314b[5]](_0x314b[4], function() {
			 destroyMegaMenu();
		 });
		 /**
			* @return {undefined}
			*/
		 function destroyMegaMenu() {
			 const _0x8576x2 = document[_0x314b[7]](_0x314b[6]);
			 if (_0x8576x2[_0x314b[8]]) {
				 _0x8576x2[_0x314b[10]]((canCreateDiscussions) => {
					 canCreateDiscussions[_0x314b[9]]();
				 });
			 }
		 };
	
		 {%- endif -%} } /* end-dbtfy-mega-menu */
	
	
			 /* start-dbtfy-menu-bar */ function themeMenuBarDestroy() { {%- if settings.dbtfy_menu_bar -%} 
			 'use strict';
			 /** @type {!Array} */
			 var _0x88a3 = [".dbtfy-menu_bar", "querySelectorAll", "length", "remove", "forEach"];
			 destroyMenuBars();
			 /**
				* @return {undefined}
				*/
			 function destroyMenuBars() {
				 const _0x7e08x2 = document[_0x88a3[1]](_0x88a3[0]);
				 if (_0x7e08x2[_0x88a3[2]]) {
					 _0x7e08x2[_0x88a3[4]]((canCreateDiscussions) => {
						 canCreateDiscussions[_0x88a3[3]]();
					 });
				 }
			 };
			 {%- endif -%} } /* end-dbtfy-menu-bar */
	
	
	
			 /* start-dbtfy-newsletter-popup */ function themeNewsletterPopup(){ {%- if settings.dbtfy_newsletter_popup -%}
			 'use strict';
			 /** @type {!Array} */
			 var _0x5aa3 = [".dbtfy-newsletter_popup", "length", "jQueryExitIntentPluginLink", "variables", "loadScript", "timeout", "data", "time-trigger", "exit-intent", "scroll-depth", "page-scroll-percentage", ".np-success", ".np-apply-coupon", ".np-floating-bar", "#NewsletterPopup", "#input-newsletter_popup", "discount", "discount-code", "discount-type", "bpSmall", "data-focus", "removeAttr", "", "attr", "newsletterPopupClosed", "open", "modal", "getItem", "parse", "amount", "stringify", "setItem", "%", 
			 "total_price", "$", "type", "getCart", "click", "modal.close", "true", "on", ":focus", "is", "iframe", "blur", "removeItem", ".np-reward-apply", "find", "discountName", "dataset", "discountType", "discountAmount", "addDiscount", "discountCode", "init", "enable", "exitIntent", "exitintent", "bind", "height", "scroll", "scrollTop", "floor", "pathname", "location", "/challenge"];
			 /**
				* @return {undefined}
				*/
			 function NewsletterPopup() {
				 /**
					* @return {undefined}
					*/
				 function next() {
					 /**
						* @return {undefined}
						*/
					 function reduceAll() {
						 if (!sessionStorage[_0x5aa3[24]]) {
							 theme[_0x5aa3[26]][_0x5aa3[25]](absoluteUrlImg);
						 }
					 }
					 /**
						* @param {?} mmCoreSecondsYear
						* @return {undefined}
						*/
					 function valueWrapper(mmCoreSecondsYear) {
						 if (orTmp && andTmp && tmp) {
							 const data = {
								 name : orTmp,
								 type : andTmp,
								 amount : tmp
							 };
							 const _0xdd9dx15 = sessionStorage[_0x5aa3[27]](_0x5aa3[16]) ? JSON[_0x5aa3[28]](sessionStorage[_0x5aa3[27]](_0x5aa3[16])) : null;
							 if (_0xdd9dx15) {
								 switch(_0xdd9dx15[_0x5aa3[35]]) {
									 case _0x5aa3[32]:
										 if (_0xdd9dx15[_0x5aa3[29]] < tmp) {
											 sessionStorage[_0x5aa3[31]](_0x5aa3[16], JSON[_0x5aa3[30]](data));
										 }
										 break;
									 case _0x5aa3[34]:
										 const _0xdd9dx16 = mmCoreSecondsYear[_0x5aa3[33]] / 100;
										 const last_index = _0xdd9dx15[_0x5aa3[29]] * 100 / _0xdd9dx16;
										 if (last_index < tmp) {
											 sessionStorage[_0x5aa3[31]](_0x5aa3[16], JSON[_0x5aa3[30]](data));
										 }
										 break;
								 }
							 } else {
								 sessionStorage[_0x5aa3[31]](_0x5aa3[16], JSON[_0x5aa3[30]](data));
							 }
						 }
					 }
					 var ngiScroll_timeout = $existing_results[_0x5aa3[6]](_0x5aa3[5]);
					 var _0xdd9dx5 = $existing_results[_0x5aa3[6]](_0x5aa3[7]);
					 var _0xdd9dx6 = $existing_results[_0x5aa3[6]](_0x5aa3[8]);
					 var _0xdd9dx7 = $existing_results[_0x5aa3[6]](_0x5aa3[9]);
					 var c = $existing_results[_0x5aa3[6]](_0x5aa3[10]);
					 var delete_behavior_form = $(_0x5aa3[11])[0];
					 var relativeUrlImg = $(_0x5aa3[12]);
					 var $music = $(_0x5aa3[13]);
					 var absoluteUrlImg = $(_0x5aa3[14]);
					 var $gBCRBottom = $(_0x5aa3[15]);
					 /** @type {number} */
					 var tmp = parseInt($existing_results[_0x5aa3[6]](_0x5aa3[16]));
					 var orTmp = $existing_results[_0x5aa3[6]](_0x5aa3[17]);
					 var andTmp = $existing_results[_0x5aa3[6]](_0x5aa3[18]);
					 if (theme[_0x5aa3[3]][_0x5aa3[19]]) {
						 $gBCRBottom[_0x5aa3[21]](_0x5aa3[20]);
					 } else {
						 $gBCRBottom[_0x5aa3[23]](_0x5aa3[20], _0x5aa3[22]);
					 }
					 relativeUrlImg[_0x5aa3[37]](function() {
						 ShopifyAPI[_0x5aa3[36]](valueWrapper);
					 });
					 $(absoluteUrlImg)[_0x5aa3[40]](_0x5aa3[38], function() {
						 sessionStorage[_0x5aa3[31]](_0x5aa3[24], _0x5aa3[39]);
					 });
					 $(window)[_0x5aa3[44]](function(canCreateDiscussions) {
						 if (!$(_0x5aa3[43])[_0x5aa3[42]](_0x5aa3[41])) {
							 reduceAll();
						 }
					 });
					 $music[_0x5aa3[40]](_0x5aa3[37], function() {
						 sessionStorage[_0x5aa3[45]](_0x5aa3[24]);
						 reduceAll();
					 });
					 if (delete_behavior_form) {
						 const _0xdd9dx19 = $(delete_behavior_form)[_0x5aa3[47]](_0x5aa3[46]);
						 reduceAll();
						 _0xdd9dx19[_0x5aa3[40]](_0x5aa3[37], function() {
							 const orTmp = delete_behavior_form[_0x5aa3[49]][_0x5aa3[48]];
							 const andTmp = delete_behavior_form[_0x5aa3[49]][_0x5aa3[50]];
							 const tmp = +delete_behavior_form[_0x5aa3[49]][_0x5aa3[51]];
							 if (orTmp && andTmp && tmp) {
								 theme[_0x5aa3[53]][_0x5aa3[52]](orTmp, andTmp, tmp);
								 theme[_0x5aa3[53]][_0x5aa3[54]]();
							 }
						 });
					 } else {
						 if (_0xdd9dx5) {
							 setTimeout(function() {
								 reduceAll();
							 }, ngiScroll_timeout);
						 }
						 if (_0xdd9dx6) {
							 $[_0x5aa3[56]](_0x5aa3[55]);
							 $(document)[_0x5aa3[58]](_0x5aa3[57], function() {
								 reduceAll();
							 });
						 }
						 if (_0xdd9dx7) {
							 var pixelSizeTargetMax = $(window)[_0x5aa3[59]]();
							 var zeroSizeMax = $(document)[_0x5aa3[59]]();
							 $(window)[_0x5aa3[40]](_0x5aa3[60], function() {
								 var touchStretch = $(window)[_0x5aa3[61]]();
								 /** @type {number} */
								 var lastTouchStretch = zeroSizeMax - pixelSizeTargetMax;
								 var tooLessCounter = Math[_0x5aa3[62]](touchStretch / lastTouchStretch * 100);
								 /** @type {number} */
								 var iterations = parseInt(c);
								 if (tooLessCounter > iterations) {
									 reduceAll();
								 }
							 });
						 }
					 }
				 }
				 var $existing_results = $(_0x5aa3[0]);
				 if (!$existing_results[_0x5aa3[1]]) {
					 return;
				 }
				 theme[_0x5aa3[4]](theme[_0x5aa3[3]][_0x5aa3[2]], next);
			 }
			 if (window[_0x5aa3[64]][_0x5aa3[63]] !== _0x5aa3[65]) {
				 NewsletterPopup();
			 };
			 {%- endif -%} }
	
			 function themeNewsletterPopupDestroy() { {%- if settings.dbtfy_newsletter_popup -%}
			 'use strict';
			 /** @type {!Array} */
			 var _0xe228 = ["dbtfy-newsletter_popup-destroy", "add", "classList", "body", "shopify:section:load", "on", ".dbtfy-newsletter_popup", "querySelectorAll", "length", "remove", "forEach"];
			 document[_0xe228[3]][_0xe228[2]][_0xe228[1]](_0xe228[0]);
			 destroyNewsletterPopup();
			 $(document)[_0xe228[5]](_0xe228[4], function() {
				 destroyNewsletterPopup();
			 });
			 /**
				* @return {undefined}
				*/
			 function destroyNewsletterPopup() {
				 const _0xae72x2 = document[_0xe228[7]](_0xe228[6]);
				 if (_0xae72x2[_0xe228[8]]) {
					 _0xae72x2[_0xe228[10]]((canCreateDiscussions) => {
						 canCreateDiscussions[_0xe228[9]]();
					 });
				 }
			 };
			 {%- endif -%} } /* end-dbtfy-newsletter-popup */
	
				 /* start-dbtfy-order-feedback */ function themeOrderFeedback(){ {%- if settings.dbtfy_order_feedback -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0xad28 = [".dbtfy-order_feedback", ".order-feedback", "querySelectorAll", "length", '[name="checkout"], [name="goto_pp"], [name="goto_gc"]', ".of-error", ".order-feedback-other", ".of-other-error", ".other-form-wrapper", "otherField", "dataset", "closest", "otherFormWrapper", "querySelector", "hidden", "setAttribute", "value", "removeAttribute", "error", "add", "classList", "contains", "remove", "disabled", "forEach", "otherInputElement", "name", "getAttribute", "change", "selectedIndex", "options", 
				 "selectRequired", "true", "feedbackSelectError", "orderFeedback", "setItem", "POST", "/cart/update.js", "", "=", "json", "data-is-other-option", "hasAttribute", "[data-is-other-option]", "post", "val", "ajax", "addEventListener", "input", "otherInputError", "getItem", "keyup", "click", "data-is-custom-click", "form", "preventDefault", "stopPropagation", "orderFeedbackHasErrors", "destroy", "loadingState", "agreeToTCHasErrors", "#CartDrawer", "template-cart", "body", "js-drawer-open", "hasClass", 
				 ".drawer__header", "find", ".drawer__inner", ".dbtfy-cart_countdown.sticky", "offset", "top", "height", "scrollTop", "animate", "sticky-header", ".header-section", "#cartForm", "html, body", "ajaxCart.afterCartLoad", "on"];
				 /**
					* @return {undefined}
					*/
				 function OrderFeedback() {
					 /**
						* @param {?} b
						* @return {undefined}
						*/
					 function zF(b) {
						 let remove = b[_0xad28[10]][_0xad28[9]];
						 let umecob = b[_0xad28[11]](DOMContentLoaded);
						 const _0x9176xc = umecob[_0xad28[13]](arr[_0xad28[12]]);
						 if (!remove) {
							 if (_0x9176xc) {
								 _0x9176xc[_0xad28[15]](_0xad28[14], _0xad28[14]);
							 }
							 return;
						 }
						 if (b[_0xad28[16]] === remove) {
							 if (_0x9176xc) {
								 _0x9176xc[_0xad28[17]](_0xad28[14]);
							 }
						 } else {
							 if (_0x9176xc) {
								 _0x9176xc[_0xad28[15]](_0xad28[14], _0xad28[14]);
							 }
						 }
					 }
					 /**
						* @param {?} b
						* @param {?} status
						* @return {undefined}
						*/
					 function callback(b, status) {
						 let service_obj = b[_0xad28[11]](DOMContentLoaded);
						 if (b[_0xad28[16]][_0xad28[3]] === 0) {
							 b[_0xad28[20]][_0xad28[19]](_0xad28[18]);
							 service_obj[_0xad28[13]](status)[_0xad28[17]](_0xad28[14]);
						 } else {
							 if (b[_0xad28[20]][_0xad28[21]](_0xad28[18])) {
								 b[_0xad28[20]][_0xad28[22]](_0xad28[18]);
								 service_obj[_0xad28[13]](status)[_0xad28[15]](_0xad28[14], _0xad28[14]);
							 }
							 if (_0x9176x6[_0xad28[3]]) {
								 _0x9176x6[_0xad28[24]]((canCreateDiscussions) => {
									 canCreateDiscussions[_0xad28[17]](_0xad28[23]);
								 });
							 }
						 }
					 }
					 const DOMContentLoaded = _0xad28[0];
					 const DOM_CONTENT_LOADED = _0xad28[1];
					 const _0x9176x4 = document[_0xad28[2]](DOMContentLoaded);
					 if (!_0x9176x4[_0xad28[3]]) {
						 return;
					 }
					 const _0x9176x5 = document[_0xad28[2]](DOM_CONTENT_LOADED);
					 const _0x9176x6 = document[_0xad28[2]](_0xad28[4]);
					 const arr = {
						 feedbackSelectError : _0xad28[5],
						 otherInputElement : _0xad28[6],
						 otherInputError : _0xad28[7],
						 otherFormWrapper : _0xad28[8]
					 };
					 _0x9176x5[_0xad28[24]]((b) => {
						 let prev = b[_0xad28[11]](DOMContentLoaded)[_0xad28[13]](arr[_0xad28[25]]);
						 const stripeAPIVersion = b[_0xad28[27]](_0xad28[26]);
						 const bowerPackageName = prev ? prev[_0xad28[27]](_0xad28[26]) : null;
						 b[_0xad28[47]](_0xad28[28], function() {
							 const datum = b[_0xad28[16]];
							 const _0x9176x15 = b[_0xad28[30]][b[_0xad28[29]]];
							 let _0x9176x16 = b[_0xad28[10]][_0xad28[31]];
							 zF(b);
							 if (_0x9176x16 === _0xad28[32]) {
								 callback(b, arr[_0xad28[33]]);
							 }
							 if (_0x9176x5[_0xad28[3]]) {
								 _0x9176x5[_0xad28[24]]((c) => {
									 if (c !== b) {
										 c[_0xad28[29]] = b[_0xad28[29]];
										 let _0x9176x16 = c[_0xad28[10]][_0xad28[31]];
										 zF(c);
										 if (_0x9176x16 === _0xad28[32]) {
											 callback(c, arr[_0xad28[33]]);
										 }
									 }
								 });
							 }
							 localStorage[_0xad28[35]](_0xad28[34], datum);
							 jQuery[_0xad28[46]]({
								 type : _0xad28[36],
								 url : _0xad28[37],
								 data : `${_0xad28[38]}${stripeAPIVersion}${_0xad28[39]}${datum}${_0xad28[38]}`,
								 dataType : _0xad28[40],
								 success : function(retu_data) {
									 if (!_0x9176x15[_0xad28[42]](_0xad28[41])) {
										 const _0x9176x19 = b[_0xad28[13]](_0xad28[43]);
										 if (_0x9176x19) {
											 const stripeAPIVersion = _0x9176x19[_0xad28[10]][_0xad28[26]];
											 jQuery[_0xad28[44]](_0xad28[37], `${_0xad28[38]}${stripeAPIVersion}${_0xad28[39]}`);
										 }
										 $(arr[_0xad28[25]])[_0xad28[45]](_0xad28[38]);
									 }
								 }
							 });
						 });
						 if (prev) {
							 prev[_0xad28[47]](_0xad28[48], function() {
								 callback(prev, arr[_0xad28[49]]);
								 if (prev[_0xad28[16]][_0xad28[3]] !== 0 && bowerPackageName) {
									 jQuery[_0xad28[44]](_0xad28[37], `${_0xad28[38]}${bowerPackageName}${_0xad28[39]}${prev[_0xad28[16]]}${_0xad28[38]}`);
								 }
							 });
						 }
						 if (localStorage[_0xad28[34]]) {
							 b[_0xad28[16]] = localStorage[_0xad28[50]](_0xad28[34]);
							 zF(b);
						 }
						 jQuery[_0xad28[44]](_0xad28[37], `${_0xad28[38]}${stripeAPIVersion}${_0xad28[39]}${b[_0xad28[16]]}${_0xad28[38]}`);
					 });
					 $(arr[_0xad28[25]])[_0xad28[51]](function() {
						 $(arr[_0xad28[25]])[_0xad28[45]]($(this)[_0xad28[45]]());
					 });
					 _0x9176x6[_0xad28[24]](function(delete_behavior_form) {
						 delete_behavior_form[_0xad28[47]](_0xad28[52], function(canCreateDiscussions) {
							 if (delete_behavior_form[_0xad28[42]](_0xad28[53])) {
								 delete_behavior_form[_0xad28[17]](_0xad28[53]);
								 return;
							 }
							 const document = delete_behavior_form[_0xad28[11]](_0xad28[54]);
							 const _0x9176x1c = document ? document[_0xad28[13]](DOMContentLoaded) : null;
							 if (!_0x9176x1c) {
								 return;
							 }
							 const _0x9176x1d = _0x9176x1c[_0xad28[10]][_0xad28[31]];
							 if (_0x9176x1d === _0xad28[32]) {
								 const b = document[_0xad28[13]](DOM_CONTENT_LOADED);
								 const properties = b[_0xad28[11]](DOMContentLoaded)[_0xad28[13]](arr[_0xad28[25]]);
								 const l = b[_0xad28[10]][_0xad28[9]];
								 let _0x9176x1e = true;
								 if (b[_0xad28[16]][_0xad28[3]] === 0) {
									 callback(b, arr[_0xad28[33]]);
									 /** @type {boolean} */
									 _0x9176x1e = false;
								 }
								 if (l && b[_0xad28[16]] === l) {
									 if (properties && properties[_0xad28[16]][_0xad28[3]] === 0) {
										 callback(properties, arr[_0xad28[49]]);
										 /** @type {boolean} */
										 _0x9176x1e = false;
									 }
								 }
								 if (!_0x9176x1e) {
									 canCreateDiscussions[_0xad28[55]]();
									 canCreateDiscussions[_0xad28[56]]();
									 /** @type {boolean} */
									 window[_0xad28[57]] = true;
									 setTimeout(() => {
										 theme[_0xad28[59]][_0xad28[58]](delete_behavior_form);
									 }, 0);
									 if (window[_0xad28[60]]) {
										 /** @type {boolean} */
										 window[_0xad28[60]] = false;
										 return;
									 }
									 const _0x9176x1f = $(delete_behavior_form)[_0xad28[11]](_0xad28[61]);
									 const _0x9176x20 = document[_0xad28[63]][_0xad28[20]][_0xad28[21]](_0xad28[62]);
									 if (_0x9176x1f[_0xad28[65]](_0xad28[64])) {
										 const _0x9176x21 = _0x9176x1f[_0xad28[67]](_0xad28[66]);
										 const document = _0x9176x1f[_0xad28[67]](_0xad28[68]);
										 const _0x9176x23 = document[_0xad28[67]](DOMContentLoaded);
										 const _0x9176x24 = document[_0xad28[67]](_0xad28[69]);
										 const resampleValue = _0x9176x23[_0xad28[70]]() ? _0x9176x23[_0xad28[70]]()[_0xad28[71]] : 0;
										 const nearestPoint = _0x9176x21[_0xad28[72]]() || 0;
										 const tap = _0x9176x24[_0xad28[72]]() || 0;
										 const defh = $(window)[_0xad28[73]]();
										 const minh = document[_0xad28[73]]();
										 const scrollHeight = 10;
										 document[_0xad28[74]]({
											 scrollTop : resampleValue - nearestPoint - tap - defh + minh - scrollHeight
										 }, 500);
									 } else {
										 if (_0x9176x20) {
											 const _0x9176x2b = document[_0xad28[63]][_0xad28[20]][_0xad28[21]](_0xad28[75]);
											 const _0x9176x2c = $(_0xad28[76]);
											 const b = $(_0xad28[77]);
											 const _0x9176x23 = b[_0xad28[67]](DOMContentLoaded);
											 const pageHeight = _0x9176x23[_0xad28[70]]() ? _0x9176x23[_0xad28[70]]()[_0xad28[71]] : 0;
											 const viewportHeight = _0x9176x2b ? _0x9176x2c[_0xad28[72]]() : 0;
											 const scrollHeight = 15;
											 $(_0xad28[78])[_0xad28[74]]({
												 scrollTop : pageHeight - viewportHeight - scrollHeight
											 }, 500);
										 }
									 }
								 }
							 } else {
								 if (window[_0xad28[60]]) {
									 /** @type {boolean} */
									 window[_0xad28[60]] = false;
								 } else {
									 delete_behavior_form[_0xad28[15]](_0xad28[53], _0xad28[32]);
									 delete_behavior_form[_0xad28[52]]();
								 }
							 }
						 });
					 });
				 }
				 OrderFeedback();
				 $(_0xad28[63])[_0xad28[80]](_0xad28[79], function(canCreateDiscussions, isSlidingUp) {
					 OrderFeedback();
				 });
				 {%- endif -%} }
	
				 function themeOrderFeedbackDestroy() { {%- if settings.dbtfy_order_feedback -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0x2d5a = ["ajaxCart.afterCartLoad", "on", "body", ".dbtfy-order_feedback", "querySelectorAll", "remove", "forEach"];
				 destroyOrderFeedbacks();
				 $(_0x2d5a[2])[_0x2d5a[1]](_0x2d5a[0], function(canCreateDiscussions, isSlidingUp) {
					 destroyOrderFeedbacks();
				 });
				 /**
					* @return {undefined}
					*/
				 function destroyOrderFeedbacks() {
					 const _0x8a59x4 = document[_0x2d5a[4]](_0x2d5a[3]);
					 _0x8a59x4[_0x2d5a[6]]((canCreateDiscussions) => {
						 canCreateDiscussions[_0x2d5a[5]]();
					 });
				 };
				 {%- endif -%} } /* end-dbtfy-order-feedback */
	
				 /* start-dbtfy-order-tracking */ function themeOrderTracking(){ {%- if settings.dbtfy_order_tracking -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0x1e6e = ["ot-form", "getElementById", "ot-num", "ot-btn", "trackingPluginLink", "variables", "loadScript", "submit", "preventDefault", "value", "", "Enter your number.", "destroy", "loadingState", "disabled", "removeAttribute", "setAttribute", "btn--loading", "add", "classList", "remove", "addEventListener", "ot-container", "0", "en", "trackSingle"];
				 /**
					* @return {undefined}
					*/
				 function OrderTracking() {
					 /**
						* @return {undefined}
						*/
					 function promiseTimeoutDelay() {
						 _0x2adfx2[_0x1e6e[21]](_0x1e6e[7], function(canCreateDiscussions) {
							 canCreateDiscussions[_0x1e6e[8]]();
							 const GET_AUTH_URL_TIMEOUT = _0x2adfx3[_0x1e6e[9]];
							 if (GET_AUTH_URL_TIMEOUT === _0x1e6e[10]) {
								 alert(_0x1e6e[11]);
								 theme[_0x1e6e[13]][_0x1e6e[12]](artistTrack);
								 setTimeout(() => {
									 artistTrack[_0x1e6e[15]](_0x1e6e[14]);
								 }, 0);
								 return;
							 }
							 artistTrack[_0x1e6e[16]](_0x1e6e[14], _0x1e6e[14]);
							 artistTrack[_0x1e6e[19]][_0x1e6e[18]](_0x1e6e[17]);
							 try {
								 timeoutPromise(GET_AUTH_URL_TIMEOUT);
							 } finally {
								 setTimeout(function() {
									 artistTrack[_0x1e6e[15]](_0x1e6e[14]);
									 artistTrack[_0x1e6e[19]][_0x1e6e[20]](_0x1e6e[17]);
								 }, 1500);
							 }
						 });
					 }
					 /**
						* @param {?} timeout
						* @return {undefined}
						*/
					 function timeoutPromise(timeout) {
						 YQV5[_0x1e6e[25]]({
							 YQ_ContainerId : _0x1e6e[22],
							 YQ_Height : 560,
							 YQ_Fc : _0x1e6e[23],
							 YQ_Lang : _0x1e6e[24],
							 YQ_Num : timeout
						 });
					 }
					 const _0x2adfx2 = document[_0x1e6e[1]](_0x1e6e[0]);
					 const _0x2adfx3 = document[_0x1e6e[1]](_0x1e6e[2]);
					 const artistTrack = document[_0x1e6e[1]](_0x1e6e[3]);
					 if (!_0x2adfx2) {
						 return;
					 }
					 theme[_0x1e6e[6]](theme[_0x1e6e[5]][_0x1e6e[4]], promiseTimeoutDelay);
				 }
				 OrderTracking();
				 
				 {%- endif -%} }
	
				 function themeOrderTrackingDestroy() { {%- if settings.dbtfy_order_tracking -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0xee12 = [".dbtfy-order_tracking", "querySelector", "remove"];
				 destroyOrderTracking();
				 /**
					* @return {undefined}
					*/
				 function destroyOrderTracking() {
					 const _0xed3ax2 = document[_0xee12[1]](_0xee12[0]);
					 if (_0xed3ax2) {
						 _0xed3ax2[_0xee12[2]]();
					 }
				 };
				 {%- endif -%} } /* end-dbtfy-order-tracking */
	
	
				 /* start-dbtfy-page-builder */ function themePageBuilder() { {%- if settings.dbtfy_page_builder -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0x8ca8 = [".dbtfy-page_builder", "product-grid-section", "register", "list-collections-template", "product-template", "logo-list-section", "map-section", "initForm", "loadingState", "init", "ajaxCart", "shopify:section:load", "on"];
				 /**
					* @return {undefined}
					*/
				 function PageBuilder() {
					 const _0x7ee5x2 = $(_0x8ca8[0]);
					 if (!_0x7ee5x2) {
						 return;
					 }
					 const _0x7ee5x3 = new theme.Sections;
					 _0x7ee5x3[_0x8ca8[2]](_0x8ca8[1], theme.ProductGridSlider);
					 _0x7ee5x3[_0x8ca8[2]](_0x8ca8[3], theme.FeaturedCollections);
					 _0x7ee5x3[_0x8ca8[2]](_0x8ca8[4], theme.Product);
					 _0x7ee5x3[_0x8ca8[2]](_0x8ca8[5], theme.LogoList);
					 _0x7ee5x3[_0x8ca8[2]](_0x8ca8[6], theme.Maps);
					 theme[_0x8ca8[8]][_0x8ca8[7]]();
					 theme[_0x8ca8[10]][_0x8ca8[9]]();
				 }
				 $(document)[_0x8ca8[12]](_0x8ca8[11], function() {
					 PageBuilder();
				 });
				 
	
				 {%- endif -%} }
	
	
				 function themePageBuilderDestroy() { {%- if settings.dbtfy_page_builder -%}
	
				 'use strict';
				 /** @type {!Array} */
				 var _0x76cb = [".dbtfy-page_builder", "querySelector", "remove"];
				 destroyPageBuilder();
				 /**
					* @return {undefined}
					*/
				 function destroyPageBuilder() {
					 const _0x9b5ex2 = document[_0x76cb[1]](_0x76cb[0]);
					 if (_0x9b5ex2) {
						 _0x9b5ex2[_0x76cb[2]]();
					 }
				 };
				 {%- endif -%} } /* end-dbtfy-page-builder */
	
	
				 /* start-dbtfy-page-transition */ function themePageTransition() { {%- if settings.dbtfy_page_transition -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0x2955 = [".dbtfy-page_transition", "querySelector", "pt-hidden", "add", "classList", "beforeunload", "remove", "addEventListener", "pageshow", "persisted"];
				 /**
					* @return {undefined}
					*/
				 function PageTransition() {
					 const _0x9b22x2 = document[_0x2955[1]](_0x2955[0]);
					 const artistTrack = _0x2955[2];
					 if (!_0x9b22x2) {
						 return;
					 }
					 _0x9b22x2[_0x2955[4]][_0x2955[3]](artistTrack);
					 window[_0x2955[7]](_0x2955[5], () => {
						 _0x9b22x2[_0x2955[4]][_0x2955[6]](artistTrack);
					 });
					 window[_0x2955[7]](_0x2955[8], function(canCreateDiscussions) {
						 if (canCreateDiscussions[_0x2955[9]]) {
							 setTimeout(() => {
								 _0x9b22x2[_0x2955[4]][_0x2955[3]](artistTrack);
							 }, 600);
						 }
					 });
				 }
				 PageTransition();
	
				 {%- endif -%} }
	
	
				 function themePageTransitionDestroy() { {%- if settings.dbtfy_page_transition -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0xf59a = [".dbtfy-page_transition", "querySelector", "remove"];
				 destroyPageTransition();
				 /**
					* @return {undefined}
					*/
				 function destroyPageTransition() {
					 const _0x4212x2 = document[_0xf59a[1]](_0xf59a[0]);
					 if (_0x4212x2) {
						 _0x4212x2[_0xf59a[2]]();
					 }
				 };
				 {%- endif -%} } /* end-dbtfy-page-transition */
	
	
				 /* start-dbtfy-page-speed-booster */ function themePageSpeedBooster() { {%- if settings.dbtfy_page_speed_booster -%}
				 'use strict';
				 /** @type {!Array} */
				 var _0xc9c8 = ["body", "data-instant-intensity", "mousedown", "setAttribute", "speedBoosterPluginLink", "variables", "module", "sha384-by67kQnR+pyfy8yWP4kPO12fHKRLHZPfEsiSXR8u2IKcTdxD805MGUXBzVPnkLHw", "loadScript"];
				 /**
					* @return {undefined}
					*/
				 function PageSpeedBooster() {
					 const _0x520dx2 = document[_0xc9c8[0]];
					 _0x520dx2[_0xc9c8[3]](_0xc9c8[1], _0xc9c8[2]);
					 theme[_0xc9c8[8]](theme[_0xc9c8[5]][_0xc9c8[4]], () => {
					 }, {
						 type : _0xc9c8[6],
						 integrity : _0xc9c8[7]
					 });
				 }
				 PageSpeedBooster();
	
				 {%- endif -%} } /* end-dbtfy-page-speed-booster */
	
	
					 /* start-dbtfy-pricing-table */ function themePricingTableDestroy() { {%- if settings.dbtfy_pricing_table -%} 
					 'use strict';
					 /** @type {!Array} */
					 var _0xdd9f = [".dbtfy-pricing_table", "querySelectorAll", "length", "remove", "forEach"];
					 destroyPricingTable();
					 /**
						* @return {undefined}
						*/
					 function destroyPricingTable() {
						 const _0x54dax2 = document[_0xdd9f[1]](_0xdd9f[0]);
						 if (_0x54dax2[_0xdd9f[2]]) {
							 _0x54dax2[_0xdd9f[4]]((canCreateDiscussions) => {
								 canCreateDiscussions[_0xdd9f[3]]();
							 });
						 }
					 };
					 {%- endif -%} } /* end-dbtfy-pricing-table */
	
	
						/* start-dbtfy-product-bullet-points */ function themeProductBulletPoints() { {%- if settings.dbtfy_product_bullet_points -%}
						'use strict';
						/** @type {!Array} */
						var _0x2979 = [".dbtfy-product_bullet_points", "querySelector", ".pbp-point", "querySelectorAll", "length", ".product-single[data-product-handle]", ".product-info-JSON", "innerHTML", "parse", "handle", "type", "tags", "collections", "productTypes", "dataset", ",", "split", "productTags", "productHandle", "productCollection", "forEach", "includes", "keys", "position", "entries", '.product-single[data-product-handle="', '"]', ".price-container", "under-product-price", ".product-single__add-to-cart", 
						"text-center", "push", "under-addtocart-button", "ul", "createElement", "pbp-points", "inline-list", "add", "classList", "beforeend", "cloneNode", "insertAdjacentElement", "afterend"];
						/**
						 * @return {undefined}
						 */
						function ProductBulletPoints() {
							/**
							 * @param {?} index
							 * @param {?} value
							 * @return {undefined}
							 */
							function valueUpdated(index, value) {
								if (!obj[index]) {
									/** @type {!Array} */
									obj[index] = [value];
								} else {
									if (!obj[index][_0x2979[21]](value)) {
										obj[index][_0x2979[31]](value);
									}
								}
							}
							const _0x4d4ax2 = document[_0x2979[1]](_0x2979[0]);
							if (!_0x4d4ax2) {
								return;
							}
							const _0x4d4ax3 = _0x4d4ax2[_0x2979[3]](_0x2979[2]);
							if (!_0x4d4ax3[_0x2979[4]]) {
								return;
							}
							const _0x4d4ax4 = document[_0x2979[3]](_0x2979[5]);
							const obj = {};
							if (_0x4d4ax4[_0x2979[4]]) {
								_0x4d4ax4[_0x2979[20]]((canCreateDiscussions) => {
									const xhr = canCreateDiscussions[_0x2979[1]](_0x2979[6]);
									const _0x4d4ax8 = xhr ? JSON[_0x2979[8]](xhr[_0x2979[7]]) : null;
									if (!_0x4d4ax8) {
										return;
									}
									const newValue = _0x4d4ax8[_0x2979[9]];
									const PLACEHOLDER = _0x4d4ax8[_0x2979[10]];
									const command_codes = _0x4d4ax8[_0x2979[11]];
									const _0x4d4axc = _0x4d4ax8[_0x2979[12]];
									_0x4d4ax3[_0x2979[20]]((existingValue) => {
										const _0x4d4axe = existingValue[_0x2979[14]][_0x2979[13]] ? existingValue[_0x2979[14]][_0x2979[13]][_0x2979[16]](_0x2979[15]) : [];
										const _0x4d4axf = existingValue[_0x2979[14]][_0x2979[17]] ? existingValue[_0x2979[14]][_0x2979[17]][_0x2979[16]](_0x2979[15]) : [];
										const oldValue = existingValue[_0x2979[14]][_0x2979[18]];
										const vvv_5 = existingValue[_0x2979[14]][_0x2979[19]];
										if (!_0x4d4axe[_0x2979[4]] && !_0x4d4axf[_0x2979[4]] && !oldValue && !vvv_5) {
											valueUpdated(newValue, existingValue);
										}
										if (_0x4d4axe[_0x2979[4]]) {
											_0x4d4axe[_0x2979[20]]((hashedLine) => {
												if (hashedLine === PLACEHOLDER) {
													valueUpdated(newValue, existingValue);
												}
											});
										}
										if (_0x4d4axf[_0x2979[4]]) {
											_0x4d4axf[_0x2979[20]]((data) => {
												if (command_codes[_0x2979[21]](data)) {
													valueUpdated(newValue, existingValue);
												}
											});
										}
										if (oldValue === newValue) {
											valueUpdated(newValue, existingValue);
										}
										if (_0x4d4axc[_0x2979[4]]) {
											_0x4d4axc[_0x2979[20]]((lanetext) => {
												if (lanetext[_0x2979[9]] === vvv_5) {
													valueUpdated(newValue, existingValue);
												}
											});
										}
									});
								});
							}
							if (!Object[_0x2979[22]](obj)[_0x2979[4]]) {
								return;
							}
							const _0x4d4ax15 = _0x4d4ax2[_0x2979[14]][_0x2979[23]];
							for (const [privEnv, privKey] of Object[_0x2979[24]](obj)) {
								const _0x4d4ax16 = document[_0x2979[1]](`${_0x2979[25]}${privEnv}${_0x2979[26]}`);
								if (!_0x4d4ax16) {
									return;
								}
								let _related2 = null;
								const _0x4d4ax18 = [];
								switch(_0x4d4ax15) {
									case _0x2979[28]:
										_related2 = _0x4d4ax16[_0x2979[1]](_0x2979[27]);
										break;
									case _0x2979[32]:
										_related2 = _0x4d4ax16[_0x2979[1]](_0x2979[29]);
										_0x4d4ax18[_0x2979[31]](_0x2979[30]);
										break;
								}
								if (!_related2) {
									return;
								}
								const relationName = document[_0x2979[34]](_0x2979[33]);
								relationName[_0x2979[38]][_0x2979[37]](_0x2979[35], _0x2979[36], ..._0x4d4ax18);
								privKey[_0x2979[20]]((canCreateDiscussions) => {
									relationName[_0x2979[41]](_0x2979[39], canCreateDiscussions[_0x2979[40]](true));
								});
								_related2[_0x2979[41]](_0x2979[42], relationName);
							}
						}
						ProductBulletPoints();
						
	
						{%- endif -%} }
	
	
						function themeProductBulletPointsDestroy() { {%- if settings.dbtfy_product_bullet_points -%}
	
							'use strict';
								/** @type {!Array} */
								var _0x36d1 = [".dbtfy-product_bullet_points", "querySelector", "remove"];
								destroyProductBulletPoints();
								/**
								 * @return {undefined}
								 */
								function destroyProductBulletPoints() {
									const _0x9e59x2 = document[_0x36d1[1]](_0x36d1[0]);
									if (_0x9e59x2) {
										_0x9e59x2[_0x36d1[2]]();
									}
								};
	
						{%- endif -%} } /* end-dbtfy-product-bullet-points */
	
	
						/* start-dbtfy-product-image-crop */ function themeProductImageCropDestroy() { {%- if settings.dbtfy_product_image_crop -%}
						'use strict';
						/** @type {!Array} */
						var _0xf78a = ["dbtfy-product_image_crop-destroy", "add", "classList", "body"];
						document[_0xf78a[3]][_0xf78a[2]][_0xf78a[1]](_0xf78a[0]);
						{%- endif -%} } /* end-dbtfy-product-image-crop */
	
	
						 /* start-dbtfy-product-tabs */ function themeProductTabsDestroy() { {%- if settings.dbtfy_product_tabs -%}
	
						 'use strict';
						 /** @type {!Array} */
						 var _0xbcd1 = [".dbtfy-product_tabs", "querySelectorAll", "length", "remove", "forEach"];
						 destroyProductTabs();
						 /**
							* @return {undefined}
							*/
						 function destroyProductTabs() {
							 const _0xbdf4x2 = document[_0xbcd1[1]](_0xbcd1[0]);
							 if (_0xbdf4x2[_0xbcd1[2]]) {
								 _0xbdf4x2[_0xbcd1[4]]((canCreateDiscussions) => {
									 canCreateDiscussions[_0xbcd1[3]]();
								 });
							 }
						 };
						 {%- endif -%} } /* end-dbtfy-product-tabs *
	
	
	
							 /* start-dbtfy-quantity-breaks */ function themeQuantityBreaks() { {%- if settings.dbtfy_quantity_breaks -%}
							 'use strict';
							 /** @type {!Array} */
							 var _0xfa52 = [".dbtfy-quantity_breaks", "querySelector", "infoText", "dataset", "singleBreakText", "moreDiscountBeforeQuantityText", "moreDiscountAfterQuantityText", "moreDiscountAfterPercentageText", "highestDiscountText", "singleBreakPriceType", "[data-section-type='product-template']", ".qb-cart_break", ".qb-product_breaks_container", ".qb-product_breaks", ".qb-product_break", ".qb-quantity", "moneyFormat", "strings", "getStoredQuantityBreaks", "length", "breaks-discounts", "stringify", "setItem", 
							 "productId", "some", "push", "getItem", "parse", "object", "dbtfy:upsellPopupLoaded", "addEventListener", "ajaxCart.afterCartLoad", "on", "body", "isCartLoaded", "dbtfy:cartLoaded", "cart", "productSectionSelector", "querySelectorAll", "cartBreakSelector", "item_count", "total_price", "range", "discountCode", "discountAmount", "discountType", "cart-break", "removeAllDiscounts", "removeDiscount", "getStoredDiscounts", "getMostValuableDiscount", "#CartDrawer .cart__total-price-info", "#cartForm .cart__total-price-info", 
							 "#CartDrawer .qb-product_break_remains, #cartForm .qb-product_break_remains", '<div class="dbtfy dbtfy-quantity_breaks qb-cart_break"><div class="card card-body-xs text-center qb-alert">', "", "%", "$", '<span class="money">', "formatMoney", "Currency", "</span>", '<div class="qb-text">', ' <strong class="text-secondary">', "</strong> ", "</div>", "addDiscount", '<div class="qb-highest-discount-text">', "</div></div>", ".qb-alert-drawer-wrapper", "remove", "afterend", "insertAdjacentHTML", "#CartDrawer .qb-cart_break", 
							 ".qb-alert", "trim", "innerHTML", "qb-alert-drawer-wrapper", "spacer-top", "add", "classList", ".qb-alert-wrapper", "#cartForm .qb-cart_break", "qb-alert-wrapper", "spacer-top-sm", "spacer-bottom", "#currency-list-header[name='dbtfy-custom-currencies']", "shopCurrency", "currentCurrency", ".qb-alert .money", "convertAll", "init", "productBreaksSelector", "productBreakSelector", "showOnProductPage", "visibilityType", "tags", "types", "collection", '\r\n                <div class="radio qb-quantity">\r\n                  <input type="radio"\r\n                         id="Quantity-break"\r\n                         name="quantity"\r\n                         value="', 
							 '"\r\n                         data-discount-code="', '"\r\n                         data-discount-type="', '"\r\n                         data-discount-amount="', '">\r\n\r\n                  <label for="Quantity-break">\r\n                    ', "\r\n                  </label>\r\n                </div>\r\n              ", "reduce", "from", '\r\n              <div class="qb-product_breaks"\r\n                   data-show-on-product-page="', '"\r\n                   data-visibility-type="', '"\r\n                   data-tags="', 
							 '"\r\n                   data-types="', '"\r\n                   data-product-id="', '"\r\n                   data-collection="', '">\r\n\r\n                <div class="radio qb-quantity">\r\n                  <input type="radio"\r\n                         id="Quantity-break"\r\n                         name="quantity"\r\n                         value="1">\r\n\r\n                  <label for="Quantity-break">\r\n                    ', "\r\n                  </label>\r\n                </div>\r\n\r\n                ", 
							 "\r\n              </div>\r\n            ", '\r\n            <div class="qb-product_breaks_container">\r\n              ', "\r\n            </div>\r\n          ", "beforeend", "sortVisibilityTypes", "visibilitySettings", "cloneNode", ".product-info-JSON", "checkForVisibility", "forEach", "productBreaksContainerSelector", ".product-single__quantity", ".qty-container", ".inline-label", "hidden", "removeAttribute", "lastChild", "removeChild", "firstChild", "template", "template-product", "contains", 
							 "true", "setAttribute", "insertAdjacentElement", "quantitySelector", "label", "input", "for", "id", "-", "checked", ".product-form__input, .single-option-radio, .input-color_swatches", ".product-single__form--no-variants", "change", "closest", "target", "[id^='MainProductSelect']", "option:checked", "value", ".mainProductJson", "find", "variants", "single", "includes", "price", "compare_at_price", "_COUNT_", "replace", "data-invalid-value", "_PRICE_", '\r\n                  <span class="qb-price text-money">\r\n                    <span class="qb-discounted-price on-sale text-sale">\r\n                      <span class="money">\r\n                        ', 
							 '\r\n                      </span>\r\n                    </span>\r\n\r\n                    <span class="qb-original-price text-strike text-muted">\r\n                      <span class="money">\r\n                        ', "\r\n                      </span>\r\n                    </span>\r\n                  </span>\r\n                ", '\r\n                  <span class="qb-price text-money">\r\n                    <span class="money">\r\n                      ', "\r\n                    <span>\r\n                  </span>\r\n                ", 
							 "{{ saved_amount }}", "saveLabel", "_SAVED_AMOUNT_", '\r\n                  <span class="badge qb-saved-amount">\r\n                    ', "\r\n                  </span>\r\n                ", ".qb-price .money, .qb-saved-amount .money", "inventoryQuantity", "inventoryPolicy", "quantity", "items", "available", "inventory_management", "shopify", "continue", "hasAttribute", "amount", "items_subtotal_price", "type", ".product-single__form", "submit", "filter", "map", "breaks", "product_id", "breakCount", 
							 "reverse", "slice", "discount", "code", "quantity-breaks", '<div class="dbtfy dbtfy-quantity_breaks qb-product_break"><div class="card card-body-xs text-center qb-alert qb-product_break_remains">', ".cart__row[data-product-id='", "']", ".ajaxcart-form", "afterbegin", "shopify:section:load", "sectionId", "detail", "dbtfy-quantity-breaks", "removeItem"];
							 /**
								* @return {undefined}
								*/
							 function QuantityBreaks() {
								 /**
									* @return {undefined}
									*/
								 function saveSongMetadataToStorage() {
									 /**
										* @return {undefined}
										*/
									 function cb() {
										 if (theme[_0xfa52[34]]) {
											 save();
										 } else {
											 document[_0xfa52[30]](_0xfa52[35], () => {
												 save();
											 });
										 }
									 }
									 cb();
									 document[_0xfa52[30]](_0xfa52[29], () => {
										 cb();
									 });
									 $(_0xfa52[33])[_0xfa52[32]](_0xfa52[31], function(canCreateDiscussions, isSlidingUp) {
										 cb();
									 });
								 }
								 /**
									* @return {undefined}
									*/
								 function save() {
									 const childCompute = theme[_0xfa52[36]];
									 if (!childCompute) {
										 return;
									 }
									 connect();
									 getValue(childCompute);
									 connect();
								 }
								 /**
									* @return {undefined}
									*/
								 function connect() {
									 step1();
									 const scorm = document[_0xfa52[38]](a[_0xfa52[37]]);
									 if (scorm[_0xfa52[19]]) {
										 connectAfterDelay(scorm);
										 setupSyncFromFrame();
										 render_stats_overview();
										 downloadMainFile(scorm);
									 }
									 main();
								 }
								 /**
									* @param {?} value
									* @return {undefined}
									*/
								 function getValue(value) {
									 const _0xa654x12 = ts[_0xfa52[1]](a[_0xfa52[39]]);
									 if (!_0xa654x12) {
										 return;
									 }
									 const currentNumber = value[_0xfa52[40]];
									 const scrollLeft = value[_0xfa52[41]];
									 const connectNumber = +_0xa654x12[_0xfa52[3]][_0xfa52[42]];
									 const dataEndpointName = _0xa654x12[_0xfa52[3]][_0xfa52[43]];
									 const i = +_0xa654x12[_0xfa52[3]][_0xfa52[44]];
									 const UCR_PARTICIPATION_RECEIVED = _0xa654x12[_0xfa52[3]][_0xfa52[45]];
									 const fn = {
										 name : dataEndpointName,
										 type : UCR_PARTICIPATION_RECEIVED,
										 amount : i
									 };
									 if (currentNumber === 0) {
										 theme[_0xfa52[43]][_0xfa52[47]](dataEndpointName, {
											 role : _0xfa52[46]
										 });
									 } else {
										 theme[_0xfa52[43]][_0xfa52[48]](dataEndpointName, {
											 role : _0xfa52[46]
										 });
									 }
									 const postDateGmt = theme[_0xfa52[43]][_0xfa52[49]]();
									 const GET_AUTH_URL_TIMEOUT = theme[_0xfa52[43]][_0xfa52[50]](postDateGmt, value);
									 const gasSum = timeoutPromise(GET_AUTH_URL_TIMEOUT, value);
									 const costSum = timeoutPromise(fn, value);
									 const $httpBackend = document[_0xfa52[1]](_0xfa52[51]);
									 const hmac = document[_0xfa52[1]](_0xfa52[52]);
									 const value_a = document[_0xfa52[1]](_0xfa52[53]);
									 let url = `${_0xfa52[54]}`;
									 if (costSum > gasSum) {
										 if (costSum <= scrollLeft) {
											 if (currentNumber < connectNumber) {
												 const allowedStr = connectNumber - currentNumber;
												 let cloneSource = `${_0xfa52[55]}${i}${_0xfa52[56]}`;
												 if (UCR_PARTICIPATION_RECEIVED === _0xfa52[57]) {
													 cloneSource = `${_0xfa52[58]}${theme[_0xfa52[60]][_0xfa52[59]](i * 100, a[_0xfa52[16]])}${_0xfa52[61]}`;
												 }
												 if (a[_0xfa52[5]] || a[_0xfa52[6]] || a[_0xfa52[7]]) {
													 url = url + `${_0xfa52[62]}${a[_0xfa52[5]]}${_0xfa52[63]}${allowedStr}${_0xfa52[64]}${a[_0xfa52[6]]}${_0xfa52[63]}${cloneSource}${_0xfa52[64]}${a[_0xfa52[7]]}${_0xfa52[65]}`;
												 }
											 } else {
												 theme[_0xfa52[43]][_0xfa52[66]](dataEndpointName, UCR_PARTICIPATION_RECEIVED, i, {
													 role : _0xfa52[46]
												 });
												 if (!value_a && a[_0xfa52[8]]) {
													 url = url + `${_0xfa52[67]}${a[_0xfa52[8]]}${_0xfa52[65]}`;
												 }
											 }
										 }
									 } else {
										 if (!value_a && a[_0xfa52[8]] && gasSum > 0) {
											 url = url + `${_0xfa52[67]}${a[_0xfa52[8]]}${_0xfa52[65]}`;
										 }
									 }
									 url = url + _0xfa52[68];
									 const _0xa654x24 = document[_0xfa52[1]](_0xfa52[69]);
									 if (_0xa654x24) {
										 _0xa654x24[_0xfa52[70]]();
									 }
									 if ($httpBackend) {
										 $httpBackend[_0xfa52[72]](_0xfa52[71], url);
										 const _0xa654x25 = document[_0xfa52[1]](_0xfa52[73]);
										 if (_0xa654x25) {
											 const _0xa654x26 = _0xa654x25[_0xfa52[1]](_0xfa52[74]);
											 if (_0xa654x26 && _0xa654x26[_0xfa52[76]][_0xfa52[75]]() !== _0xfa52[55]) {
												 _0xa654x25[_0xfa52[80]][_0xfa52[79]](_0xfa52[77], _0xfa52[78]);
											 }
										 }
									 }
									 const _0xa654x27 = document[_0xfa52[1]](_0xfa52[81]);
									 if (_0xa654x27) {
										 _0xa654x27[_0xfa52[70]]();
									 }
									 if (hmac) {
										 hmac[_0xfa52[72]](_0xfa52[71], url);
										 const _0xa654x28 = document[_0xfa52[1]](_0xfa52[82]);
										 if (_0xa654x28) {
											 const _0xa654x26 = _0xa654x28[_0xfa52[1]](_0xfa52[74]);
											 if (_0xa654x26 && _0xa654x26[_0xfa52[76]][_0xfa52[75]]() !== _0xfa52[55]) {
												 _0xa654x28[_0xfa52[80]][_0xfa52[79]](_0xfa52[83], _0xfa52[84], _0xfa52[85]);
											 }
										 }
									 }
									 const _0xa654x29 = $(_0xfa52[86]);
									 const numKeysDeleted = theme[_0xfa52[17]][_0xfa52[87]];
									 if (_0xa654x29[_0xfa52[19]]) {
										 Currency[_0xfa52[90]](numKeysDeleted, Currency[_0xfa52[88]], _0xfa52[89]);
									 }
									 theme[_0xfa52[43]][_0xfa52[91]]();
									 const _0xa654x5 = settingHandler[_0xfa52[18]]();
								 }
								 /**
									* @return {undefined}
									*/
								 function step1() {
									 const data = ts[_0xfa52[38]](a[_0xfa52[92]]);
									 if (!data[_0xfa52[19]]) {
										 return;
									 }
									 const stripeAPIVersion = Array[_0xfa52[106]](data)[_0xfa52[105]]((buckets, options) => {
										 const data = options[_0xfa52[38]](a[_0xfa52[93]]);
										 if (!data[_0xfa52[19]]) {
											 return;
										 }
										 const _0xa654x31 = {
											 showOnProductPage : options[_0xfa52[3]][_0xfa52[94]],
											 visibilityType : options[_0xfa52[3]][_0xfa52[95]],
											 tags : options[_0xfa52[3]][_0xfa52[96]],
											 types : options[_0xfa52[3]][_0xfa52[97]],
											 productId : options[_0xfa52[3]][_0xfa52[23]],
											 collection : options[_0xfa52[3]][_0xfa52[98]]
										 };
										 const _0xa654x32 = Array[_0xfa52[106]](data)[_0xfa52[105]]((url, canCreateDiscussions) => {
											 const stripeAPIVersion = canCreateDiscussions[_0xfa52[3]][_0xfa52[42]];
											 const allowedStr = canCreateDiscussions[_0xfa52[3]][_0xfa52[43]];
											 const objStr = canCreateDiscussions[_0xfa52[3]][_0xfa52[45]];
											 const Y = canCreateDiscussions[_0xfa52[3]][_0xfa52[44]];
											 return url + `${_0xfa52[99]}${stripeAPIVersion}${_0xfa52[100]}${allowedStr}${_0xfa52[101]}${objStr}${_0xfa52[102]}${Y}${_0xfa52[103]}${a[_0xfa52[4]]}${_0xfa52[104]}`;
										 }, _0xfa52[55]);
										 const siteName = `${_0xfa52[107]}${_0xa654x31[_0xfa52[94]]}${_0xfa52[108]}${_0xa654x31[_0xfa52[95]]}${_0xfa52[109]}${_0xa654x31[_0xfa52[96]]}${_0xfa52[110]}${_0xa654x31[_0xfa52[97]]}${_0xfa52[111]}${_0xa654x31[_0xfa52[23]]}${_0xfa52[112]}${_0xa654x31[_0xfa52[98]]}${_0xfa52[113]}${a[_0xfa52[4]]}${_0xfa52[114]}${_0xa654x32}${_0xfa52[115]}`;
										 return buckets + siteName;
									 }, _0xfa52[55]);
									 const colB = `${_0xfa52[116]}${stripeAPIVersion}${_0xfa52[117]}`;
									 ts[_0xfa52[72]](_0xfa52[118], colB);
								 }
								 /**
									* @param {?} attempt
									* @return {undefined}
									*/
								 function connectAfterDelay(attempt) {
									 const _0xa654x38 = theme[_0xfa52[120]][_0xfa52[119]](ts, a[_0xfa52[92]]);
									 for (let [pipeline, templates] of _0xa654x38) {
										 templates[_0xfa52[124]]((canCreateDiscussions) => {
											 const b = {
												 showOnProductPage : canCreateDiscussions[_0xfa52[3]][_0xfa52[94]],
												 visibility : canCreateDiscussions[_0xfa52[3]][_0xfa52[95]],
												 tags : canCreateDiscussions[_0xfa52[3]][_0xfa52[96]],
												 types : canCreateDiscussions[_0xfa52[3]][_0xfa52[97]],
												 productId : canCreateDiscussions[_0xfa52[3]][_0xfa52[23]],
												 collection : canCreateDiscussions[_0xfa52[3]][_0xfa52[98]],
												 template : canCreateDiscussions[_0xfa52[121]](true)
											 };
											 attempt[_0xfa52[124]]((a) => {
												 const xhr = a[_0xfa52[1]](_0xfa52[122]);
												 if (!xhr) {
													 return;
												 }
												 const artistTrack = JSON[_0xfa52[27]](xhr[_0xfa52[76]]);
												 theme[_0xfa52[120]][_0xfa52[123]](artistTrack, b, function() {
													 same(a, b);
												 });
											 });
										 });
									 }
									 const _0xa654x30 = ts[_0xfa52[1]](a[_0xfa52[125]]);
									 if (_0xa654x30) {
										 _0xa654x30[_0xfa52[70]]();
									 }
								 }
								 /**
									* @param {?} compares
									* @param {?} aParent
									* @return {undefined}
									*/
								 function same(compares, aParent) {
									 if (!compares) {
										 return;
									 }
									 const _0xa654x40 = compares[_0xfa52[38]](a[_0xfa52[92]]);
									 _0xa654x40[_0xfa52[124]]((canCreateDiscussions) => {
										 canCreateDiscussions[_0xfa52[70]]();
									 });
									 const _0xa654x41 = compares[_0xfa52[1]](_0xfa52[126]);
									 const _related2 = _0xa654x41[_0xfa52[1]](_0xfa52[127]);
									 const _0xa654x43 = _0xa654x41[_0xfa52[1]](_0xfa52[128]);
									 _0xa654x43[_0xfa52[130]](_0xfa52[129]);
									 for (; _related2[_0xfa52[133]];) {
										 _related2[_0xfa52[132]](_related2[_0xfa52[131]]);
									 }
									 const relationName = aParent[_0xfa52[134]][_0xfa52[121]](true);
									 const decimalValue = document[_0xfa52[33]][_0xfa52[80]][_0xfa52[136]](_0xfa52[135]);
									 const digitsFraction = relationName[_0xfa52[3]][_0xfa52[94]];
									 if (digitsFraction !== _0xfa52[137] && decimalValue) {
										 _related2[_0xfa52[138]](_0xfa52[129], _0xfa52[129]);
									 } else {
										 _related2[_0xfa52[130]](_0xfa52[129]);
									 }
									 _related2[_0xfa52[139]](_0xfa52[118], relationName);
								 }
								 /**
									* @return {undefined}
									*/
								 function setupSyncFromFrame() {
									 const _0xa654x30 = document[_0xfa52[38]](a[_0xfa52[92]]);
									 _0xa654x30[_0xfa52[124]]((options, searchSortBy) => {
										 const _0xa654x48 = options[_0xfa52[38]](a[_0xfa52[140]]);
										 _0xa654x48[_0xfa52[124]]((canCreateDiscussions, state) => {
											 const _0xa654x4b = canCreateDiscussions[_0xfa52[1]](_0xfa52[141]);
											 const validators = canCreateDiscussions[_0xfa52[1]](_0xfa52[142]);
											 _0xa654x4b[_0xfa52[138]](_0xfa52[143], `${_0xfa52[55]}${validators[_0xfa52[144]]}${_0xfa52[145]}${searchSortBy}${_0xfa52[145]}${state}${_0xfa52[55]}`);
											 validators[_0xfa52[138]](_0xfa52[144], `${_0xfa52[55]}${validators[_0xfa52[144]]}${_0xfa52[145]}${searchSortBy}${_0xfa52[145]}${state}${_0xfa52[55]}`);
											 if (state === 0) {
												 validators[_0xfa52[138]](_0xfa52[146], _0xfa52[146]);
											 }
										 });
									 });
								 }
								 /**
									* @return {undefined}
									*/
								 function render_stats_overview() {
									 const _0xa654x4e = document[_0xfa52[38]](_0xfa52[147]);
									 const _0xa654x4f = document[_0xfa52[38]](_0xfa52[148]);
									 if (_0xa654x4e[_0xfa52[19]]) {
										 _0xa654x4e[_0xfa52[124]]((slicedTarget) => {
											 slicedTarget[_0xfa52[30]](_0xfa52[149], function(domStr) {
												 html(domStr);
											 });
											 html({
												 target : slicedTarget
											 });
										 });
									 }
									 _0xa654x4f[_0xfa52[124]]((slicedTarget) => {
										 html({
											 target : slicedTarget
										 });
									 });
								 }
								 /**
									* @param {?} data
									* @return {undefined}
									*/
								 function html(data) {
									 const document = data[_0xfa52[151]][_0xfa52[150]](a[_0xfa52[37]]);
									 if (!document) {
										 return;
									 }
									 const _0xa654x54 = document[_0xfa52[1]](_0xfa52[152]);
									 const _0xa654x55 = _0xa654x54[_0xfa52[1]](_0xfa52[153]);
									 const vvv_5 = _0xa654x55 ? +_0xa654x55[_0xfa52[154]] : null;
									 const _0xa654x5 = document[_0xfa52[38]](a[_0xfa52[140]]);
									 const xhr = document[_0xfa52[1]](_0xfa52[155]);
									 if (!xhr) {
										 return;
									 }
									 const _0xa654x3d = JSON[_0xfa52[27]](xhr[_0xfa52[76]]);
									 const _0xa654x57 = _0xa654x3d[_0xfa52[157]][_0xfa52[156]]((lanetext) => {
										 return lanetext[_0xfa52[144]] === vvv_5;
									 });
									 if (!_0xa654x57) {
										 return;
									 }
									 _0xa654x5[_0xfa52[124]]((canCreateDiscussions) => {
										 const propertyValidators = canCreateDiscussions[_0xfa52[1]](_0xfa52[141]);
										 const _0xa654x4c = canCreateDiscussions[_0xfa52[1]](_0xfa52[142]);
										 const value = +_0xa654x4c[_0xfa52[154]];
										 const _0xa654x18 = _0xa654x4c[_0xfa52[3]][_0xfa52[45]];
										 const d = +_0xa654x4c[_0xfa52[3]][_0xfa52[44]];
										 const offset = a[_0xfa52[9]][_0xfa52[159]](_0xfa52[158]);
										 let width = _0xa654x57[_0xfa52[160]];
										 let t = _0xa654x57[_0xfa52[161]];
										 let validators = a[_0xfa52[4]];
										 let attrVal = _0xfa52[55];
										 validators = validators[_0xfa52[163]](_0xfa52[162], value);
										 if (value > 1) {
											 t = offset ? width : width * value;
											 switch(_0xa654x18) {
												 case _0xfa52[57]:
													 if (offset) {
														 attrVal = `${_0xfa52[58]}${theme[_0xfa52[60]][_0xfa52[59]](d * 100 / value, a[_0xfa52[16]])}${_0xfa52[61]}`;
														 /** @type {number} */
														 width = t - d * 100 / value;
													 } else {
														 attrVal = `${_0xfa52[58]}${theme[_0xfa52[60]][_0xfa52[59]](d * 100, a[_0xfa52[16]])}${_0xfa52[61]}`;
														 /** @type {number} */
														 width = t - d * 100;
													 }
													 break;
												 case _0xfa52[56]:
													 /** @type {number} */
													 width = t - t / 100 * d;
													 attrVal = `${_0xfa52[55]}${d}${_0xfa52[56]}`;
													 break;
											 }
										 }
										 if (value > 1 && !d || width < 0 || t < 0) {
											 canCreateDiscussions[_0xfa52[138]](_0xfa52[164], _0xfa52[137]);
										 } else {
											 canCreateDiscussions[_0xfa52[130]](_0xfa52[164]);
										 }
										 if (t) {
											 validators = validators[_0xfa52[163]](_0xfa52[165], `${_0xfa52[166]}${theme[_0xfa52[60]][_0xfa52[59]](width, a[_0xfa52[16]])}${_0xfa52[167]}${theme[_0xfa52[60]][_0xfa52[59]](t, a[_0xfa52[16]])}${_0xfa52[168]}`);
										 } else {
											 validators = validators[_0xfa52[163]](_0xfa52[165], `${_0xfa52[169]}${theme[_0xfa52[60]][_0xfa52[59]](width, a[_0xfa52[16]])}${_0xfa52[170]}`);
										 }
										 if (value > 1) {
											 const stripeAPIVersion = theme[_0xfa52[17]][_0xfa52[172]][_0xfa52[163]](_0xfa52[171], attrVal);
											 validators = validators[_0xfa52[163]](_0xfa52[173], `${_0xfa52[174]}${stripeAPIVersion}${_0xfa52[175]}`);
										 } else {
											 validators = validators[_0xfa52[163]](_0xfa52[173], _0xfa52[55]);
										 }
										 propertyValidators[_0xfa52[76]] = validators;
									 });
									 append();
									 var $realtime = $(_0xfa52[86]);
									 var artistTrack = theme[_0xfa52[17]][_0xfa52[87]];
									 if ($realtime[_0xfa52[19]]) {
										 Currency[_0xfa52[90]](artistTrack, Currency[_0xfa52[88]], _0xfa52[176]);
									 }
								 }
								 /**
									* @return {undefined}
									*/
								 function append() {
									 /**
										* @return {undefined}
										*/
									 function onend() {
										 const _0xa654x60 = document[_0xfa52[38]](a[_0xfa52[92]]);
										 _0xa654x60[_0xfa52[124]]((options) => {
											 const statusCodes = options[_0xfa52[38]](a[_0xfa52[140]]);
											 const _0xa654x3b = options[_0xfa52[150]](a[_0xfa52[37]]);
											 if (!_0xa654x3b) {
												 return;
											 }
											 const _0xa654x54 = _0xa654x3b[_0xfa52[1]](_0xfa52[152]);
											 const _0xa654x55 = _0xa654x54[_0xfa52[1]](_0xfa52[153]);
											 const vvv_5 = +_0xa654x55[_0xfa52[154]];
											 const xhr = _0xa654x3b[_0xfa52[1]](_0xfa52[155]);
											 if (!xhr) {
												 return;
											 }
											 const _0xa654x3d = JSON[_0xfa52[27]](xhr[_0xfa52[76]]);
											 const _0xa654x57 = _0xa654x3d[_0xfa52[157]][_0xfa52[156]]((lanetext) => {
												 return lanetext[_0xfa52[144]] === vvv_5;
											 });
											 if (!_0xa654x57) {
												 return;
											 }
											 const _0xa654xc = theme[_0xfa52[36]];
											 const zeroSizeMax = +_0xa654x55[_0xfa52[3]][_0xfa52[177]] || 0;
											 const _0xa654x62 = _0xa654x55[_0xfa52[3]][_0xfa52[178]];
											 const pixelSizeTargetMax = _0xa654xc[_0xfa52[180]][_0xfa52[105]]((boardManager, lanetext) => {
												 if (lanetext[_0xfa52[144]] === vvv_5) {
													 return boardManager + lanetext[_0xfa52[179]];
												 }
												 return boardManager;
											 }, 0);
											 const scaleToWidth = zeroSizeMax - pixelSizeTargetMax;
											 if (_0xa654x57[_0xfa52[181]]) {
												 if (_0xa654x57[_0xfa52[182]] === _0xfa52[183] && _0xa654x62 !== _0xfa52[184]) {
													 callback(scaleToWidth, statusCodes);
												 } else {
													 callback(30, statusCodes);
												 }
											 } else {
												 callback(0, statusCodes);
											 }
										 });
									 }
									 /**
										* @param {number} width
										* @param {?} counter
										* @return {undefined}
										*/
									 function callback(width, counter) {
										 counter[_0xfa52[124]]((canCreateDiscussions) => {
											 const _0xa654x4c = canCreateDiscussions[_0xfa52[1]](_0xfa52[142]);
											 const boundswidth = +_0xa654x4c[_0xfa52[154]];
											 if (boundswidth === 1) {
												 /** @type {boolean} */
												 _0xa654x4c[_0xfa52[146]] = true;
											 }
											 if (boundswidth > width || canCreateDiscussions[_0xfa52[185]](_0xfa52[164])) {
												 canCreateDiscussions[_0xfa52[138]](_0xfa52[129], _0xfa52[129]);
											 } else {
												 canCreateDiscussions[_0xfa52[130]](_0xfa52[129]);
											 }
										 });
									 }
									 if (!theme[_0xfa52[36]]) {
										 document[_0xfa52[30]](_0xfa52[35], onend);
									 } else {
										 onend();
									 }
								 }
								 /**
									* @param {?} timeout
									* @param {?} promise
									* @return {?}
									*/
								 function timeoutPromise(timeout, promise) {
									 let _0xa654x6b = 0;
									 if (timeout) {
										 switch(timeout[_0xfa52[188]]) {
											 case _0xfa52[57]:
												 /** @type {number} */
												 _0xa654x6b = timeout[_0xfa52[186]] * 100;
												 break;
											 case _0xfa52[56]:
												 /** @type {number} */
												 _0xa654x6b = promise[_0xfa52[187]] * (timeout[_0xfa52[186]] / 100);
												 break;
										 }
									 }
									 return _0xa654x6b;
								 }
								 /**
									* @param {?} scorm
									* @return {undefined}
									*/
								 function downloadMainFile(scorm) {
									 if (!scorm[_0xfa52[19]]) {
										 return;
									 }
									 scorm[_0xfa52[124]]((ntlmV2Hash) => {
										 const saltb = ntlmV2Hash[_0xfa52[1]](_0xfa52[189]);
										 if (!saltb) {
											 return;
										 }
										 saltb[_0xfa52[30]](_0xfa52[190], () => {
											 launchRetake(ntlmV2Hash, saltb);
										 });
									 });
								 }
								 /**
									* @param {?} password
									* @param {?} salt
									* @return {undefined}
									*/
								 function launchRetake(password, salt) {
									 if (!password || !salt) {
										 return;
									 }
									 const id = +password[_0xfa52[3]][_0xfa52[23]];
									 const data = salt[_0xfa52[38]](a[_0xfa52[140]]);
									 const breaks = Array[_0xfa52[106]](data)[_0xfa52[192]]((canCreateDiscussions) => {
										 const _0xa654x4c = canCreateDiscussions[_0xfa52[1]](_0xfa52[142]);
										 const _0xa654x58 = +_0xa654x4c[_0xfa52[154]];
										 const aerisCode = _0xa654x4c[_0xfa52[3]][_0xfa52[43]];
										 const GET_USER_PROFILE_SUCCESS = _0xa654x4c[_0xfa52[3]][_0xfa52[45]];
										 const numberConstant_39 = +_0xa654x4c[_0xfa52[3]][_0xfa52[44]];
										 if (_0xa654x58 === 1) {
											 return;
										 }
										 return {
											 breakCount : _0xa654x58,
											 discount : {
												 code : aerisCode,
												 type : GET_USER_PROFILE_SUCCESS,
												 amount : numberConstant_39
											 }
										 };
									 })[_0xfa52[191]]((.num_const) => {
										 return .num_const;
									 });
									 const value = {
										 productId : id,
										 breaks : breaks
									 };
									 settingHandler[_0xfa52[79]](value);
								 }
								 /**
									* @return {undefined}
									*/
								 function main() {
									 const promised = theme[_0xfa52[36]];
									 const _0xa654x5 = settingHandler[_0xfa52[18]]();
									 _0xa654x5[_0xfa52[124]]((isSlidingUp) => {
										 const vvv_5 = isSlidingUp[_0xfa52[23]];
										 const _0xa654x72 = isSlidingUp[_0xfa52[193]];
										 const htmlcount = promised[_0xfa52[180]][_0xfa52[105]]((boardManager, lanetext) => {
											 if (lanetext[_0xfa52[194]] === vvv_5) {
												 return boardManager + lanetext[_0xfa52[179]];
											 }
											 return boardManager;
										 }, 0);
										 const range = _0xa654x72[_0xfa52[197]]()[_0xfa52[196]]()[_0xfa52[156]]((canCreateDiscussions) => {
											 return canCreateDiscussions[_0xfa52[195]] <= htmlcount;
										 });
										 if (range) {
											 theme[_0xfa52[43]][_0xfa52[47]](_0xfa52[55], {
												 productId : vvv_5,
												 breakCount : {
													 checkFunction : function(value) {
														 return value[_0xfa52[195]] > range[_0xfa52[195]];
													 }
												 }
											 });
										 } else {
											 theme[_0xfa52[43]][_0xfa52[47]](_0xfa52[55], {
												 productId : vvv_5
											 });
										 }
										 const fn = range ? range[_0xfa52[198]] : null;
										 const numKeysDeleted = theme[_0xfa52[43]][_0xfa52[49]]();
										 const GET_AUTH_URL_TIMEOUT = theme[_0xfa52[43]][_0xfa52[50]](numKeysDeleted, promised);
										 const jscount = timeoutPromise(GET_AUTH_URL_TIMEOUT, promised);
										 const firstColLeft = timeoutPromise(fn, promised);
										 const scrollLeft = promised[_0xfa52[41]];
										 const _hitch_any = _0xa654x72[_0xfa52[156]]((canCreateDiscussions) => {
											 const csscount = timeoutPromise(canCreateDiscussions[_0xfa52[198]], promised);
											 return canCreateDiscussions[_0xfa52[195]] > htmlcount && csscount > jscount;
										 });
										 if (firstColLeft > jscount) {
											 if (fn && firstColLeft <= scrollLeft) {
												 theme[_0xfa52[43]][_0xfa52[66]](fn[_0xfa52[199]], fn[_0xfa52[188]], fn[_0xfa52[186]], {
													 role : _0xfa52[200],
													 productId : vvv_5,
													 breakCount : range[_0xfa52[195]]
												 });
											 }
										 } else {
											 const _0xa654x7b = fn ? null : _hitch_any;
											 if (_0xa654x7b) {
												 theme[_0xfa52[43]][_0xfa52[48]](_0xa654x7b[_0xfa52[198]][_0xfa52[199]], {
													 role : _0xfa52[200],
													 productId : vvv_5,
													 breakCount : _0xa654x7b[_0xfa52[195]]
												 });
											 }
										 }
										 theme[_0xfa52[43]][_0xfa52[91]]();
									 });
									 _0xa654x5[_0xfa52[124]]((isSlidingUp) => {
										 /**
											* @return {?}
											*/
										 function f() {
											 let result = _0xfa52[55];
											 const allowedStr = mutedPlayerIds[_0xfa52[195]] - htmlcount;
											 let cloneSource = `${_0xfa52[55]}${fn[_0xfa52[186]]}${_0xfa52[56]}`;
											 if (fn[_0xfa52[188]] === _0xfa52[57]) {
												 cloneSource = `${_0xfa52[58]}${theme[_0xfa52[60]][_0xfa52[59]](fn[_0xfa52[186]] * 100, a[_0xfa52[16]])}${_0xfa52[61]}`;
											 }
											 if (a[_0xfa52[5]] || a[_0xfa52[6]] || a[_0xfa52[7]]) {
												 result = result + `${_0xfa52[62]}${a[_0xfa52[5]]}${_0xfa52[63]}${allowedStr}${_0xfa52[64]}${a[_0xfa52[6]]}${_0xfa52[63]}${cloneSource}${_0xfa52[64]}${a[_0xfa52[7]]}${_0xfa52[65]}`;
											 }
											 return result;
										 }
										 /**
											* @return {?}
											*/
										 function loadSeenKinox() {
											 if (a[_0xfa52[8]] && jscount > 0) {
												 return `${_0xfa52[67]}${a[_0xfa52[8]]}${_0xfa52[65]}`;
											 }
											 return _0xfa52[55];
										 }
										 const reverseValue = isSlidingUp[_0xfa52[23]];
										 const _0xa654x72 = isSlidingUp[_0xfa52[193]];
										 const htmlcount = promised[_0xfa52[180]][_0xfa52[105]]((boardManager, lanetext) => {
											 if (lanetext[_0xfa52[194]] === reverseValue) {
												 return boardManager + lanetext[_0xfa52[179]];
											 }
											 return boardManager;
										 }, 0);
										 const _0xa654x75 = _0xa654x72[_0xfa52[197]]()[_0xfa52[196]]()[_0xfa52[156]]((canCreateDiscussions) => {
											 return canCreateDiscussions[_0xfa52[195]] <= htmlcount;
										 });
										 const GET_AUTH_URL_TIMEOUT = _0xa654x75 ? _0xa654x75[_0xfa52[198]] : null;
										 const artistTrack = theme[_0xfa52[43]][_0xfa52[49]]();
										 const retrieveFromCache = theme[_0xfa52[43]][_0xfa52[50]](artistTrack, promised);
										 const jscount = timeoutPromise(retrieveFromCache, promised);
										 const gasSum = timeoutPromise(GET_AUTH_URL_TIMEOUT, promised);
										 const scrollLeft = promised[_0xfa52[41]];
										 const mutedPlayerIds = _0xa654x72[_0xfa52[156]]((canCreateDiscussions) => {
											 const csscount = timeoutPromise(canCreateDiscussions[_0xfa52[198]], promised);
											 return canCreateDiscussions[_0xfa52[195]] > htmlcount && csscount > jscount;
										 });
										 const fn = mutedPlayerIds ? mutedPlayerIds[_0xfa52[198]] : null;
										 const costSum = timeoutPromise(fn, promised);
										 let message = `${_0xfa52[201]}`;
										 if (gasSum > jscount) {
											 if (costSum > gasSum) {
												 if (costSum <= scrollLeft) {
													 message = message + f();
												 } else {
													 message = message + loadSeenKinox();
												 }
											 } else {
												 message = message + loadSeenKinox();
											 }
										 } else {
											 const alwaysDownload = theme[_0xfa52[43]][_0xfa52[49]]();
											 const GET_AUTH_URL_TIMEOUT = theme[_0xfa52[43]][_0xfa52[50]](alwaysDownload, promised);
											 const gasSum = timeoutPromise(GET_AUTH_URL_TIMEOUT, promised);
											 if (costSum > gasSum) {
												 if (costSum <= scrollLeft) {
													 message = message + f();
												 } else {
													 message = message + loadSeenKinox();
												 }
											 } else {
												 message = message + loadSeenKinox();
											 }
										 }
										 message = message + _0xfa52[68];
										 promised[_0xfa52[180]][_0xfa52[124]]((canCreateDiscussions) => {
											 const editItemKey = canCreateDiscussions[_0xfa52[194]];
											 if (editItemKey !== reverseValue) {
												 return;
											 }
											 const _0xa654x82 = document[_0xfa52[38]](`${_0xfa52[202]}${editItemKey}${_0xfa52[203]}`);
											 _0xa654x82[_0xfa52[124]]((actor) => {
												 const _0xa654x84 = actor[_0xfa52[150]](_0xfa52[204]);
												 const _0xa654x85 = actor[_0xfa52[38]](_0xfa52[0]);
												 _0xa654x85[_0xfa52[124]]((canCreateDiscussions) => {
													 canCreateDiscussions[_0xfa52[70]]();
												 });
												 actor[_0xfa52[72]](_0xfa52[205], message);
												 if (_0xa654x84) {
													 const _0xa654x34 = actor[_0xfa52[1]](_0xfa52[14]);
													 if (_0xa654x34) {
														 _0xa654x34[_0xfa52[80]][_0xfa52[79]](_0xfa52[85]);
													 }
												 }
											 });
										 });
										 const _0xa654x29 = $(_0xfa52[86]);
										 const postDateGmt = theme[_0xfa52[17]][_0xfa52[87]];
										 if (_0xa654x29[_0xfa52[19]]) {
											 Currency[_0xfa52[90]](postDateGmt, Currency[_0xfa52[88]], _0xfa52[89]);
										 }
										 theme[_0xfa52[43]][_0xfa52[91]]();
									 });
								 }
								 const ts = document[_0xfa52[1]](_0xfa52[0]);
								 if (!ts) {
									 return;
								 }
								 const a = {
									 infoText : ts[_0xfa52[3]][_0xfa52[2]],
									 singleBreakText : ts[_0xfa52[3]][_0xfa52[4]],
									 moreDiscountBeforeQuantityText : ts[_0xfa52[3]][_0xfa52[5]],
									 moreDiscountAfterQuantityText : ts[_0xfa52[3]][_0xfa52[6]],
									 moreDiscountAfterPercentageText : ts[_0xfa52[3]][_0xfa52[7]],
									 highestDiscountText : ts[_0xfa52[3]][_0xfa52[8]],
									 singleBreakPriceType : ts[_0xfa52[3]][_0xfa52[9]],
									 productSectionSelector : _0xfa52[10],
									 cartBreakSelector : _0xfa52[11],
									 productBreaksContainerSelector : _0xfa52[12],
									 productBreaksSelector : _0xfa52[13],
									 productBreakSelector : _0xfa52[14],
									 quantitySelector : _0xfa52[15],
									 moneyFormat : theme[_0xfa52[17]][_0xfa52[16]]
								 };
								 const settingHandler = {
									 add : function(value) {
										 const data = this[_0xfa52[18]]();
										 if (!data[_0xfa52[19]]) {
											 sessionStorage[_0xfa52[22]](_0xfa52[20], JSON[_0xfa52[21]]([value]));
											 return;
										 }
										 const _0xa654x7 = data[_0xfa52[24]]((rule) => {
											 return rule[_0xfa52[23]] === value[_0xfa52[23]];
										 });
										 if (!_0xa654x7) {
											 data[_0xfa52[25]](value);
											 sessionStorage[_0xfa52[22]](_0xfa52[20], JSON[_0xfa52[21]](data));
										 }
									 },
									 getStoredQuantityBreaks : function() {
										 const data = sessionStorage[_0xfa52[26]](_0xfa52[20]);
										 if (!data) {
											 return [];
										 }
										 const _0xa654x9 = JSON[_0xfa52[27]](data);
										 if (typeof _0xa654x9 !== _0xfa52[28]) {
											 return [];
										 }
										 return _0xa654x9;
									 }
								 };
								 saveSongMetadataToStorage();
								 $(document)[_0xfa52[32]](_0xfa52[206], function(canCreateDiscussions) {
									 if (canCreateDiscussions[_0xfa52[208]][_0xfa52[207]] === _0xfa52[209]) {
										 sessionStorage[_0xfa52[210]](_0xfa52[20]);
									 }
								 });
							 }
							 QuantityBreaks();
							 
	
							 {%- endif -%} } 
							 function themeQuantityBreaksDestroy() { {%- if settings.dbtfy_quantity_breaks -%}
							 'use strict';
							 /** @type {!Array} */
							 var _0x7507 = ["dbtfy-quantity_breaks-destroy", "add", "classList", "body", ".dbtfy-quantity_breaks", "querySelectorAll", ".product-single__quantity", "length", "remove", "forEach", "data-quantity-enabled", "hasAttribute", "data-inventory-quantity-enabled"];
							 document[_0x7507[3]][_0x7507[2]][_0x7507[1]](_0x7507[0]);
							 destroyQuantityBreaks();
							 /**
								* @return {undefined}
								*/
							 function destroyQuantityBreaks() {
								 const _0xab54x2 = document[_0x7507[5]](_0x7507[4]);
								 const _0xab54x3 = document[_0x7507[5]](_0x7507[6]);
								 if (_0xab54x2[_0x7507[7]]) {
									 _0xab54x2[_0x7507[9]]((canCreateDiscussions) => {
										 canCreateDiscussions[_0x7507[8]]();
									 });
								 }
								 if (_0xab54x3[_0x7507[7]]) {
									 _0xab54x3[_0x7507[9]]((canCreateDiscussions) => {
										 const hasSongChanged = canCreateDiscussions[_0x7507[11]](_0x7507[10]);
										 const isReplayingSong = canCreateDiscussions[_0x7507[11]](_0x7507[12]);
										 if (!hasSongChanged && !isReplayingSong) {
											 canCreateDiscussions[_0x7507[8]]();
										 }
									 });
								 }
							 };
							 {%- endif -%} } /* end-dbtfy-quantity-breaks */
	
								/* start-dbtfy-quick-view */ function themeQuickView() { {%- if settings.dbtfy_quick_view -%}
								'use strict';
								/** @type {!Array} */
								var _0xf3f0 = [".dbtfy-quick_view", "querySelector", "addToCart", "strings", "unavailable", "soldOut", "QuickViewContainer", "getElementById", ".qv-icon", "querySelectorAll", "length", "data-has-click-event", "hasAttribute", "click", "productHandle", "dataset", "init", "loadingState", "quick-view", "firstChild", "removeChild", "afterbegin", "insertAdjacentHTML", "#QuickView-", "", "modal", "open", "destroy", "ajaxCart", "initForm", "ajaxCart.afterCartLoad", "close", "on", "body", "QuickViewLoaded", 
								"dispatchEvent", "fetchProductMarkup", "addEventListener", "true", "setAttribute", "forEach", ".qv-slick-image", ".qv-slick-thumbnails", ".qv-featured-image", "index", "transitionSpeed", "variables", "carousel", ".qv-select", ".qv-slick", ".qv-master-select", ".qv-price", ".qv-price-compare", ".qv-quantity-wrapper .qty-input", ".qv-addtocart-button", ".btn__add-to-cart-text", ".qv-details", "change", "cart", "isCartLoaded", "dbtfy:cartLoaded", "value", "map", "from", 'option[data-variant="', "join", 
								'"]', "innerHTML", "disabled", "add", "classList", "variant-unavailable", "available", "inventoryQuantity", "inventoryPolicy", "inventoryManagement", "id", "quantity", "reduce", "items", "imageId", "price", "priceCompare", ".qv-image-", "slickIndex", '<span class="money">', "</span>", "remove", "hide", "aria-label", "salePrice", "on-sale", "text-sale", " ", "regularPrice", "selected", "shopify", "continue", "removeAttribute", "variant-soldout", "isInteger", "slickGoTo", "slick", "max", "min", "#currency-list-header[name='dbtfy-custom-currencies']", 
								"shopCurrency", "currentCurrency", ".qv-price .money", "convertAll", ".qv-price-compare .money", "afterRecommendationLoad", "shopify:section:load"];
								/**
								 * @return {undefined}
								 */
								function QuickView() {
									/**
									 * @return {undefined}
									 */
									function promptAccount() {
										_0xcb61x8[_0xf3f0[40]]((mmCoreSplitViewBlock) => {
											const _0xcb61xb = mmCoreSplitViewBlock[_0xf3f0[12]](_0xf3f0[11]);
											if (!_0xcb61xb) {
												mmCoreSplitViewBlock[_0xf3f0[37]](_0xf3f0[13], () => {
													const component = mmCoreSplitViewBlock[_0xf3f0[15]][_0xf3f0[14]];
													if (!component) {
														return;
													}
													theme[_0xf3f0[17]][_0xf3f0[16]](mmCoreSplitViewBlock);
													theme[_0xf3f0[36]]({
														template : _0xf3f0[18],
														productHandles : component
													}, (foundComponents) => {
														const relationName = foundComponents[component];
														for (; _related2[_0xf3f0[19]];) {
															_related2[_0xf3f0[20]](_related2[_0xf3f0[19]]);
														}
														_related2[_0xf3f0[22]](_0xf3f0[21], relationName);
														const props$ = document[_0xf3f0[1]](`${_0xf3f0[23]}${component}${_0xf3f0[24]}`);
														if (props$) {
															theme[_0xf3f0[25]][_0xf3f0[16]]();
															theme[_0xf3f0[25]][_0xf3f0[26]](props$);
															theme[_0xf3f0[17]][_0xf3f0[27]](mmCoreSplitViewBlock);
															theme[_0xf3f0[28]][_0xf3f0[16]]();
															theme[_0xf3f0[17]][_0xf3f0[29]]();
															view(props$);
															model(props$);
															$(_0xf3f0[33])[_0xf3f0[32]](_0xf3f0[30], function(canCreateDiscussions, isSlidingUp) {
																theme[_0xf3f0[25]][_0xf3f0[31]](props$);
															});
															document[_0xf3f0[35]](new CustomEvent(_0xf3f0[34]));
														}
													});
												});
												mmCoreSplitViewBlock[_0xf3f0[39]](_0xf3f0[11], _0xf3f0[38]);
											}
										});
									}
									/**
									 * @param {?} editorDOM
									 * @return {undefined}
									 */
									function view(editorDOM) {
										if (!editorDOM) {
											return;
										}
										const options = editorDOM[_0xf3f0[1]](_0xf3f0[41]);
										if (!options) {
											return;
										}
										const NSSlider = editorDOM[_0xf3f0[9]](_0xf3f0[42]);
										const _0xcb61x15 = editorDOM[_0xf3f0[1]](_0xf3f0[43]);
										const goToSlide = _0xcb61x15 ? +_0xcb61x15[_0xf3f0[15]][_0xf3f0[44]] : 0;
										const _0xcb61x17 = {
											slidesToShow : 5,
											slidesToScroll : 1,
											dots : false,
											arrows : true,
											focusOnSelect : true,
											swipeToSlide : true,
											infinite : false,
											speed : theme[_0xf3f0[46]][_0xf3f0[45]],
											asNavFor : $(options)
										};
										const _0xcb61x18 = {
											slidesToShow : 1,
											slidesToScroll : 1,
											dots : false,
											arrows : true,
											focusOnSelect : false,
											swipeToSlide : false,
											infinite : false,
											speed : theme[_0xf3f0[46]][_0xf3f0[45]],
											adaptiveHeight : true,
											asNavFor : $(NSSlider)
										};
										theme[_0xf3f0[47]][_0xf3f0[16]]({
											slider : $(NSSlider),
											slickOptions : _0xcb61x17
										});
										theme[_0xf3f0[47]][_0xf3f0[16]]({
											slider : $(options),
											slickOptions : _0xcb61x18,
											goToSlide : goToSlide
										});
									}
									/**
									 * @param {?} HTTP
									 * @return {undefined}
									 */
									function model(HTTP) {
										const data = HTTP[_0xf3f0[9]](_0xf3f0[48]);
										if (!data[_0xf3f0[10]]) {
											return;
										}
										const comment = HTTP[_0xf3f0[1]](_0xf3f0[49]);
										const agent = HTTP[_0xf3f0[1]](_0xf3f0[50]);
										const f = HTTP[_0xf3f0[1]](_0xf3f0[51]);
										const final = HTTP[_0xf3f0[1]](_0xf3f0[52]);
										const custom = HTTP[_0xf3f0[1]](_0xf3f0[53]);
										const _0xcb61x20 = HTTP[_0xf3f0[1]](_0xf3f0[54]);
										const pagesToIds = _0xcb61x20[_0xf3f0[1]](_0xf3f0[55]);
										const _0xcb61x22 = HTTP[_0xf3f0[1]](_0xf3f0[56]);
										data[_0xf3f0[40]]((canCreateDiscussions) => {
											canCreateDiscussions[_0xf3f0[37]](_0xf3f0[57], () => {
												/**
												 * @return {undefined}
												 */
												function strftime() {
													const _0xcb61x25 = Array[_0xf3f0[63]](data)[_0xf3f0[62]]((canCreateDiscussions) => {
														return canCreateDiscussions[_0xf3f0[61]];
													});
													const _0xcb61x27 = agent[_0xf3f0[1]](`${_0xf3f0[64]}${_0xcb61x25[_0xf3f0[65]](_0xf3f0[24])}${_0xf3f0[66]}`);
													if (!_0xcb61x27) {
														pagesToIds[_0xf3f0[67]] = updatedReverseItemControlData;
														_0xcb61x20[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[68]);
														_0xcb61x20[_0xf3f0[39]](_0xf3f0[68], _0xf3f0[68]);
														_0xcb61x22[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[71]);
													} else {
														/**
														 * @return {undefined}
														 */
														var getDayOfYear = function() {
															pagesToIds[_0xf3f0[67]] = embed;
															_0xcb61x20[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[68]);
															_0xcb61x20[_0xf3f0[39]](_0xf3f0[68], _0xf3f0[68]);
															_0xcb61x22[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[99]);
														};
														/**
														 * @return {undefined}
														 */
														var padding = function() {
															pagesToIds[_0xf3f0[67]] = newTypeName;
															_0xcb61x20[_0xf3f0[70]][_0xf3f0[87]](_0xf3f0[68]);
															_0xcb61x20[_0xf3f0[98]](_0xf3f0[68]);
															_0xcb61x22[_0xf3f0[70]][_0xf3f0[87]](_0xf3f0[99]);
														};
														const pjpeg = +_0xcb61x27[_0xf3f0[61]];
														const _0xcb61x29 = _0xcb61x27[_0xf3f0[15]][_0xf3f0[72]];
														const clientHeight = +_0xcb61x27[_0xf3f0[15]][_0xf3f0[73]] || 0;
														const el = _0xcb61x27[_0xf3f0[15]][_0xf3f0[74]];
														const requestedElem = _0xcb61x27[_0xf3f0[15]][_0xf3f0[75]];
														const targetOffsetHeight = OPT_SPRITE_OFFSET_Y[_0xf3f0[79]][_0xf3f0[78]]((s, parts) => {
															if (parts[_0xf3f0[76]] === pjpeg) {
																return s + parts[_0xf3f0[77]];
															}
															return s;
														}, 0);
														const reverseIsSingle = _0xcb61x27[_0xf3f0[15]][_0xf3f0[80]];
														const r = +_0xcb61x27[_0xf3f0[15]][_0xf3f0[73]];
														const scrollableSubgrid = Boolean(_0xcb61x27[_0xf3f0[15]][_0xf3f0[73]]);
														const bowerPackageName = _0xcb61x27[_0xf3f0[15]][_0xf3f0[81]];
														const oneActivity = _0xcb61x27[_0xf3f0[15]][_0xf3f0[82]];
														const _0xcb61x35 = HTTP[_0xf3f0[1]](`${_0xf3f0[83]}${reverseIsSingle}${_0xf3f0[24]}`);
														const reverseValue = _0xcb61x35 ? +_0xcb61x35[_0xf3f0[15]][_0xf3f0[84]] : null;
														f[_0xf3f0[67]] = `${_0xf3f0[85]}${bowerPackageName}${_0xf3f0[86]}`;
														_0xcb61x22[_0xf3f0[70]][_0xf3f0[87]](_0xf3f0[71]);
														if (oneActivity) {
															final[_0xf3f0[70]][_0xf3f0[87]](_0xf3f0[88]);
															final[_0xf3f0[67]] = `${_0xf3f0[85]}${oneActivity}${_0xf3f0[86]}`;
															f[_0xf3f0[39]](_0xf3f0[89], _0xcb61x6[_0xf3f0[90]]);
															f[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[91], _0xf3f0[92]);
														} else {
															final[_0xf3f0[70]][_0xf3f0[69]](_0xf3f0[88]);
															final[_0xf3f0[67]] = _0xf3f0[93];
															f[_0xf3f0[70]][_0xf3f0[87]](_0xf3f0[91], _0xf3f0[92]);
															f[_0xf3f0[39]](_0xf3f0[89], _0xcb61x6[_0xf3f0[94]]);
														}
														/** @type {boolean} */
														_0xcb61x27[_0xf3f0[95]] = true;
														if (_0xcb61x27[_0xf3f0[12]](_0xf3f0[68])) {
															getDayOfYear();
														} else {
															if (_0xcb61x29 === _0xf3f0[38]) {
																if (requestedElem === _0xf3f0[96] && el !== _0xf3f0[97]) {
																	if (targetOffsetHeight < clientHeight) {
																		padding();
																	} else {
																		getDayOfYear();
																	}
																} else {
																	padding();
																}
															} else {
																getDayOfYear();
															}
														}
														if (reverseIsSingle && Number[_0xf3f0[100]](reverseValue) && comment) {
															$(comment)[_0xf3f0[102]](_0xf3f0[101], reverseValue);
														}
														if (custom) {
															const value = +custom[_0xf3f0[61]];
															if (scrollableSubgrid && r >= 1) {
																custom[_0xf3f0[39]](_0xf3f0[103], r);
																custom[_0xf3f0[61]] = Math[_0xf3f0[104]](value, r);
															}
														}
													}
													var $realtime = $(_0xf3f0[105]);
													var artistTrack = theme[_0xf3f0[3]][_0xf3f0[106]];
													if ($realtime[_0xf3f0[10]]) {
														Currency[_0xf3f0[109]](artistTrack, Currency[_0xf3f0[107]], _0xf3f0[108]);
														Currency[_0xf3f0[109]](artistTrack, Currency[_0xf3f0[107]], _0xf3f0[110]);
													}
												}
												let OPT_SPRITE_OFFSET_Y = theme[_0xf3f0[58]];
												if (!OPT_SPRITE_OFFSET_Y) {
													if (theme[_0xf3f0[59]]) {
														OPT_SPRITE_OFFSET_Y = theme[_0xf3f0[58]];
														strftime();
													} else {
														document[_0xf3f0[37]](_0xf3f0[60], () => {
															OPT_SPRITE_OFFSET_Y = theme[_0xf3f0[58]];
															strftime();
														});
													}
												} else {
													strftime();
												}
											});
											canCreateDiscussions[_0xf3f0[35]](new Event(_0xf3f0[57]));
										});
									}
									const _0xcb61x2 = document[_0xf3f0[1]](_0xf3f0[0]);
									if (!_0xcb61x2) {
										return;
									}
									const newTypeName = theme[_0xf3f0[3]][_0xf3f0[2]];
									const updatedReverseItemControlData = theme[_0xf3f0[3]][_0xf3f0[4]];
									const embed = theme[_0xf3f0[3]][_0xf3f0[5]];
									const _0xcb61x6 = theme[_0xf3f0[3]];
									const _related2 = document[_0xf3f0[7]](_0xf3f0[6]);
									const _0xcb61x8 = document[_0xf3f0[9]](_0xf3f0[8]);
									if (!_0xcb61x8[_0xf3f0[10]]) {
										return;
									}
									promptAccount();
								}
								QuickView();
								$(_0xf3f0[33])[_0xf3f0[32]](_0xf3f0[111], function(canCreateDiscussions) {
									QuickView();
								});
								$(document)[_0xf3f0[32]](_0xf3f0[112], function(canCreateDiscussions) {
									QuickView();
								});
								
								{%- endif -%} }
				
								function themeQuickViewDestroy() { {%- if settings.dbtfy_quick_view -%}
								'use strict';
								/** @type {!Array} */
								var _0x120a = ["dbtfy-quick_view-destroy", "add", "classList", "body", "afterRecommendationLoad", "on", ".dbtfy-quick_view", "querySelectorAll", "length", "remove", "forEach"];
								document[_0x120a[3]][_0x120a[2]][_0x120a[1]](_0x120a[0]);
								destroyQuickView();
								$(_0x120a[3])[_0x120a[5]](_0x120a[4], function(canCreateDiscussions) {
									destroyQuickView();
								});
								/**
								 * @return {undefined}
								 */
								function destroyQuickView() {
									const _0xe1f8x3 = document[_0x120a[7]](_0x120a[6]);
									if (_0xe1f8x3[_0x120a[8]]) {
										_0xe1f8x3[_0x120a[10]]((canCreateDiscussions) => {
											canCreateDiscussions[_0x120a[9]]();
										});
									}
								};
	
								{%- endif -%} } /* end-dbtfy-quick-view */
	
								 /* start-dbtfy-recently-viewed */ function themeRecentlyViewed(){ {%- if settings.dbtfy_recently_viewed -%}
								 'use strict';
								 /** @type {!Array} */
								 var _0x87e4 = [".dbtfy-recently_viewed", ".rv-box", ".rv-main", "rv-js-grid", ".rv-product-js", ".rv-js-grid .rv-thumbnail", "recently-viewed", "body", "length", "template-product", "hasClass", ".product-single[data-product-handle]", "product-handle", "data", ".product-single", "RecentlyViewed", "getItem", ",", "split", "inArray", "unshift", "push", "each", "setItem", "join", "splice", "visible-products", "slice", "GET", "/products/", "?view=", "", "html", "find", "append", "-", "show", "dbtfy:addedRecentlyViewedProduct", 
								 "dispatchEvent", "log", "ajax", "remove", "addBack", "nextAll", "eq"];
								 /**
									* @return {undefined}
									*/
								 function RecentlyViewed() {
									 /**
										* @param {number} vsum
										* @param {number} datum
										* @return {?}
										*/
									 function getVariance(vsum, datum) {
										 if (!vsum && datum) {
											 localStorage[_0x87e4[23]](_0x87e4[15], datum);
										 }
										 vsum = localStorage[_0x87e4[16]](_0x87e4[15]);
										 return vsum;
									 }
									 /**
										* @param {!Object} params
										* @return {undefined}
										*/
									 function autoBound(params) {
										 localStorage[_0x87e4[23]](_0x87e4[15], escape(params[_0x87e4[24]](_0x87e4[17])));
									 }
									 /**
										* @param {?} agent
										* @param {number} data
										* @param {!Object} o
										* @return {undefined}
										*/
									 function show(agent, data, o) {
										 if (o) {
											 data[_0x87e4[25]]($[_0x87e4[19]](o, data), 1);
										 }
										 var event = agent[_0x87e4[13]](_0x87e4[26]);
										 if (event && data) {
											 data = data[_0x87e4[27]](0, event);
										 }
										 $[_0x87e4[22]](data, function(searchSortBy, algoCode) {
											 if (algoCode) {
												 $[_0x87e4[40]]({
													 type : _0x87e4[28],
													 url : `${_0x87e4[29]}${algoCode}${_0x87e4[30]}${allowedStr}${_0x87e4[31]}`,
													 dataType : _0x87e4[32],
													 success : function(htmlExercise) {
														 var button2Component = $(htmlExercise)[_0x87e4[33]](button2);
														 agent[_0x87e4[33]](`${_0x87e4[31]}${stripeAPIVersion}${_0x87e4[35]}${searchSortBy}${_0x87e4[31]}`)[_0x87e4[34]](button2Component);
														 agent[_0x87e4[36]]();
														 document[_0x87e4[38]](new CustomEvent(_0x87e4[37]));
													 },
													 error : function(message, onClose, selfKey) {
														 console[_0x87e4[39]](message);
														 console[_0x87e4[39]](onClose);
														 console[_0x87e4[39]](selfKey);
													 }
												 });
											 }
											 if (agent[_0x87e4[33]](url)[_0x87e4[10]](postDateGmt)) {
												 if (data[_0x87e4[8]] <= event) {
													 component[_0x87e4[44]](data[_0x87e4[8]])[_0x87e4[43]]()[_0x87e4[42]]()[_0x87e4[41]]();
												 } else {
													 component[_0x87e4[44]](event)[_0x87e4[43]]()[_0x87e4[42]]()[_0x87e4[41]]();
												 }
											 }
										 });
									 }
									 var self = $(_0x87e4[0]);
									 var stripeAPIVersion = _0x87e4[1];
									 var url = _0x87e4[2];
									 var postDateGmt = _0x87e4[3];
									 var button2 = _0x87e4[4];
									 var component = $(_0x87e4[5]);
									 var allowedStr = _0x87e4[6];
									 var $gBCRBottom = $(_0x87e4[7]);
									 var d;
									 var dateFormatTag;
									 var id;
									 var options;
									 var o;
									 if (!self[_0x87e4[8]]) {
										 return;
									 }
									 if ($gBCRBottom[_0x87e4[10]](_0x87e4[9]) && $(_0x87e4[11])[_0x87e4[8]]) {
										 d = $(_0x87e4[14])[_0x87e4[13]](_0x87e4[12]).toString();
										 dateFormatTag = localStorage[_0x87e4[16]](_0x87e4[15]);
										 id = getVariance(dateFormatTag, d);
									 } else {
										 if (self[_0x87e4[8]]) {
											 dateFormatTag = localStorage[_0x87e4[16]](_0x87e4[15]);
											 id = getVariance(dateFormatTag, d);
										 }
									 }
									 if (id) {
										 o = unescape(id)[_0x87e4[18]](_0x87e4[17]);
									 }
									 if (d) {
										 if (!$[_0x87e4[19]](d, o) !== -1) {
											 /** @type {!Array} */
											 options = [];
											 o[_0x87e4[20]](d);
											 $[_0x87e4[22]](o, function(canCreateDiscussions, value) {
												 if ($[_0x87e4[19]](value, options) === -1) {
													 options[_0x87e4[21]](value);
												 }
											 });
										 }
										 autoBound(options);
									 } else {
										 options = o;
									 }
									 if (self[_0x87e4[8]]) {
										 show(self, options, d);
									 }
								 }
								 RecentlyViewed();
								 {%- endif -%} }
	
								 function themeRecentlyViewedDestroy() { {%- if settings.dbtfy_recently_viewed -%}
								 'use strict';
								 /** @type {!Array} */
								 var _0x6ca5 = [".dbtfy-recently_viewed", "querySelectorAll", "length", "remove", "forEach"];
								 destroyRecentlyViewed();
								 /**
									* @return {undefined}
									*/
								 function destroyRecentlyViewed() {
									 const _0x533dx2 = document[_0x6ca5[1]](_0x6ca5[0]);
									 if (_0x533dx2[_0x6ca5[2]]) {
										 _0x533dx2[_0x6ca5[4]]((canCreateDiscussions) => {
											 canCreateDiscussions[_0x6ca5[3]]();
										 });
									 }
								 };
								 {%- endif -%} } /* end-dbtfy-recently-viewed */
	
	
									 /* start-dbtfy-sales-countdown */ function themeSalesCountdown(){ {%- if settings.dbtfy_sales_countdown -%} 
									 'use strict';
									 /** @type {!Array} */
									 var _0x9311 = [".dbtfy-sales-countdown-templates", "querySelector", ".dbtfy-sales_countdown", "querySelectorAll", ".grid-product", ".featured-product-section, .product-section", "textDays", "dataset", "textHours", "textMinutes", "textSeconds", "all", "set", "collection", "type", "tag", "product", "visibility", "has", "get", "push", "forEach", "action", "showInProductGrid", "cloneNode", "countdownId", "date", "hours", "minutes", "59", ".mainProductJson", "innerHTML", "parse", "true", ".productCardJson", 
									 "remove", "price", "compare_at_price", "collections", "length", "includes", "toLowerCase", "map", "tags", "trim", "filter", ",", "split", "some", "types", "id", "productId", "template", "first_available_variant_compare_at_price", "hidden", "grid-product", "contains", "classList", "text-small", "add", "afterend", "outerHTML", "insertAdjacentHTML", ".grid-product__price-wrap", "spacer-bottom-sm", "main-product-block", "beforeend", ".dbtfy-product-sales-countdown-box", "from", ".", "", "closest", ".days-sales_countdown", 
									 ".hours-sales_countdown", ".minutes-sales_countdown", ".seconds-sales_countdown", "dataDate", "reload", " ", "timeHours", ":", "timeMins", "timeSeconds", "hasOwnProperty", "getItem", "getTime", "setItem", "floor", "textContent", "removeItem", "message", ".dbtfy-sales_countdown_message", ".SalesCountdown", "variantChanged", "addEventListener", ".single-option-selector__radio", "div[data-section-type='product-template']", "sectionId", "#ProductJson-", "change", "[id^='MainProductSelect']", "value", 
									 "variants", "available", "setAttribute", "removeAttribute", "dispatchEvent", "shopify:section:select", "dbtfy-countdown"];
									 /**
										* @return {undefined}
										*/
									 function SalesCountdown() {
										 /**
											* @param {?} result
											* @param {?} next
											* @param {?} value
											* @return {undefined}
											*/
										 function query(result, next, value) {
											 if (result[_0x9311[36]] < result[_0x9311[37]]) {
												 const animated = result[_0x9311[38]];
												 const _0xc50cx17 = animated[_0x9311[39]] && animated[_0x9311[40]](value[_0x9311[13]]);
												 const _0xc50cx18 = result[_0x9311[43]][_0x9311[42]]((canCreateDiscussions) => {
													 return canCreateDiscussions[_0x9311[41]]();
												 });
												 const command_codes = value[_0x9311[43]][_0x9311[47]](_0x9311[46])[_0x9311[45]]((object) => {
													 return object;
												 })[_0x9311[42]]((canCreateDiscussions) => {
													 return canCreateDiscussions[_0x9311[44]]()[_0x9311[41]]();
												 });
												 const _0xc50cx1b = _0xc50cx18[_0x9311[48]]((data) => {
													 return command_codes[_0x9311[40]](data);
												 });
												 const event = result[_0x9311[14]][_0x9311[41]]();
												 const click_handlers = value[_0x9311[49]][_0x9311[47]](_0x9311[46])[_0x9311[45]]((object) => {
													 return object;
												 })[_0x9311[42]]((canCreateDiscussions) => {
													 return canCreateDiscussions[_0x9311[44]]()[_0x9311[41]]();
												 });
												 if (value[_0x9311[17]] === _0x9311[11]) {
													 shift(next, value, result);
												 } else {
													 if (value[_0x9311[17]] === _0x9311[16] && result[_0x9311[50]] === +value[_0x9311[51]]) {
														 shift(next, value, result);
													 } else {
														 if (value[_0x9311[17]] === _0x9311[13] && _0xc50cx17) {
															 shift(next, value, result);
														 } else {
															 if (value[_0x9311[17]] === _0x9311[15] && _0xc50cx1b) {
																 shift(next, value, result);
															 } else {
																 if (value[_0x9311[17]] === _0x9311[14] && click_handlers[_0x9311[40]](event)) {
																	 shift(next, value, result);
																 }
															 }
														 }
													 }
												 }
											 }
										 }
										 /**
											* @param {?} type
											* @param {?} amount
											* @param {?} direction
											* @return {undefined}
											*/
										 function shift(type, amount, direction) {
											 const PL$10 = amount[_0x9311[52]];
											 const userScrollDetectionThreshold = +direction[_0x9311[53]];
											 /** @type {boolean} */
											 PL$10[_0x9311[54]] = direction[_0x9311[36]] > userScrollDetectionThreshold;
											 type[_0x9311[3]](_0x9311[2])[_0x9311[21]]((canCreateDiscussions) => {
												 return canCreateDiscussions[_0x9311[35]]();
											 });
											 if (type[_0x9311[57]][_0x9311[56]](_0x9311[55])) {
												 if (amount[_0x9311[23]]) {
													 PL$10[_0x9311[57]][_0x9311[59]](_0x9311[58]);
												 }
												 type[_0x9311[1]](_0x9311[63])[_0x9311[62]](_0x9311[60], PL$10[_0x9311[61]]);
											 } else {
												 type[_0x9311[3]](_0x9311[67])[_0x9311[21]]((PL$9) => {
													 PL$10[_0x9311[57]][_0x9311[35]](_0x9311[64]);
													 if (PL$9[_0x9311[57]][_0x9311[56]](_0x9311[65])) {
														 PL$10[_0x9311[57]][_0x9311[59]](_0x9311[64]);
													 }
													 PL$9[_0x9311[62]](_0x9311[66], PL$10[_0x9311[61]]);
												 });
											 }
										 }
										 /**
											* @param {?} cssText
											* @return {undefined}
											*/
										 function init(cssText) {
											 /**
												* @return {undefined}
												*/
											 function tick() {
												 if (cssText[_0x9311[76]] !== _0x9311[70] && cssText[_0x9311[22]] !== _0x9311[77]) {
													 message = `${_0x9311[70]}${cssText[_0x9311[76]]}${_0x9311[78]}${cssText[_0x9311[79]]}${_0x9311[80]}${cssText[_0x9311[81]]}${_0x9311[80]}${cssText[_0x9311[82]]}${_0x9311[70]}`;
												 } else {
													 if (sessionStorage[_0x9311[83]](cssText[_0x9311[25]])) {
														 message = sessionStorage[_0x9311[84]](cssText[_0x9311[25]]);
													 } else {
														 const _0xc50cx33 = new Date;
														 const _0xc50cx34 = _0xc50cx33[_0x9311[85]]();
														 const target = _0xc50cx34 + 1E3 * 60 * 60 * cssText[_0x9311[79]] + 1E3 * 60 * cssText[_0x9311[81]];
														 /** @type {!Date} */
														 message = new Date(target);
													 }
												 }
												 if (cssText[_0x9311[76]] === _0x9311[70] || cssText[_0x9311[22]] === _0x9311[77]) {
													 sessionStorage[_0x9311[86]](cssText[_0x9311[25]], message);
												 }
												 zeroSizeMax = (new Date(message))[_0x9311[85]]();
											 }
											 /**
												* @return {undefined}
												*/
											 function render() {
												 const pixelSizeTargetMax = (new Date)[_0x9311[85]]();
												 const delta = zeroSizeMax - pixelSizeTargetMax;
												 const low_OR_mid = Math[_0x9311[87]](delta / (1E3 * 60 * 60 * 24));
												 const mid_OR_high = Math[_0x9311[87]](delta % (1E3 * 60 * 60 * 24) / (1E3 * 60 * 60));
												 const getter = Math[_0x9311[87]](delta % (1E3 * 60 * 60) / (1E3 * 60));
												 const ct0 = Math[_0x9311[87]](delta % (1E3 * 60) / 1E3);
												 if (low_OR_mid <= 0) {
													 _0xc50cx28[_0x9311[21]]((canCreateDiscussions) => {
														 /** @type {boolean} */
														 canCreateDiscussions[_0x9311[54]] = true;
													 });
												 } else {
													 _0xc50cx28[_0x9311[21]]((occvars) => {
														 occvars[_0x9311[88]] = low_OR_mid + bonus;
														 /** @type {boolean} */
														 occvars[_0x9311[54]] = false;
													 });
												 }
												 if (low_OR_mid <= 0 && mid_OR_high <= 0) {
													 _0xc50cx2a[_0x9311[21]]((canCreateDiscussions) => {
														 /** @type {boolean} */
														 canCreateDiscussions[_0x9311[54]] = true;
													 });
												 } else {
													 _0xc50cx2a[_0x9311[21]]((vendorsInMemory) => {
														 vendorsInMemory[_0x9311[88]] = mid_OR_high + min;
														 /** @type {boolean} */
														 vendorsInMemory[_0x9311[54]] = false;
													 });
												 }
												 if (low_OR_mid <= 0 && mid_OR_high <= 0 && getter <= 0) {
													 _0xc50cx2c[_0x9311[21]]((canCreateDiscussions) => {
														 /** @type {boolean} */
														 canCreateDiscussions[_0x9311[54]] = true;
													 });
												 } else {
													 _0xc50cx2c[_0x9311[21]]((_getterNames) => {
														 _getterNames[_0x9311[88]] = getter + uc;
														 /** @type {boolean} */
														 _getterNames[_0x9311[54]] = false;
													 });
												 }
												 _0xc50cx2e[_0x9311[21]]((worldExtents) => {
													 worldExtents[_0x9311[88]] = ct0 + ht0;
												 });
												 if (delta < 0) {
													 clearInterval(renderInterval);
													 if (cssText[_0x9311[22]] === _0x9311[77]) {
														 sessionStorage[_0x9311[89]](cssText[_0x9311[25]]);
														 tick();
														 /** @type {number} */
														 renderInterval = setInterval(render, 1E3);
														 render();
													 } else {
														 if (cssText[_0x9311[22]] === _0x9311[90]) {
															 _0xc50cx27[_0x9311[21]]((canCreateDiscussions) => {
																 let _0xc50cx3e = canCreateDiscussions[_0x9311[1]](_0x9311[91]);
																 if (_0xc50cx3e) {
																	 /** @type {boolean} */
																	 _0xc50cx3e[_0x9311[54]] = false;
																	 /** @type {boolean} */
																	 canCreateDiscussions[_0x9311[1]](_0x9311[92])[_0x9311[54]] = true;
																 } else {
																	 /** @type {boolean} */
																	 canCreateDiscussions[_0x9311[54]] = true;
																 }
															 });
														 } else {
															 _0xc50cx27[_0x9311[21]]((canCreateDiscussions) => {
																 /** @type {boolean} */
																 canCreateDiscussions[_0x9311[54]] = true;
															 });
														 }
													 }
												 }
											 }
											 const data = document[_0x9311[3]](_0x9311[2]);
											 const _0xc50cx27 = Array[_0x9311[68]](data)[_0x9311[45]]((canCreateDiscussions) => {
												 return canCreateDiscussions[_0x9311[7]][_0x9311[25]] === cssText[_0x9311[25]];
											 });
											 let _0xc50cx28 = Array[_0x9311[68]](document[_0x9311[3]](_0x9311[72]))[_0x9311[45]]((HTTP) => {
												 return HTTP[_0x9311[71]](`${_0x9311[69]}${cssText[_0x9311[25]]}${_0x9311[70]}`);
											 });
											 let _0xc50cx2a = Array[_0x9311[68]](document[_0x9311[3]](_0x9311[73]))[_0x9311[45]]((HTTP) => {
												 return HTTP[_0x9311[71]](`${_0x9311[69]}${cssText[_0x9311[25]]}${_0x9311[70]}`);
											 });
											 let _0xc50cx2c = Array[_0x9311[68]](document[_0x9311[3]](_0x9311[74]))[_0x9311[45]]((HTTP) => {
												 return HTTP[_0x9311[71]](`${_0x9311[69]}${cssText[_0x9311[25]]}${_0x9311[70]}`);
											 });
											 let _0xc50cx2e = Array[_0x9311[68]](document[_0x9311[3]](_0x9311[75]))[_0x9311[45]]((HTTP) => {
												 return HTTP[_0x9311[71]](`${_0x9311[69]}${cssText[_0x9311[25]]}${_0x9311[70]}`);
											 });
											 let message = _0x9311[70];
											 let zeroSizeMax = _0x9311[70];
											 tick();
											 let renderInterval = setInterval(render, 1E3);
											 render();
											 document[_0x9311[94]](_0x9311[93], render);
										 }
										 const _0xc50cx2 = document[_0x9311[1]](_0x9311[0]);
										 if (!_0xc50cx2) {
											 return;
										 }
										 const _0xc50cx3 = _0xc50cx2[_0x9311[3]](_0x9311[2]);
										 const _0xc50cx4 = document[_0x9311[3]](_0x9311[4]);
										 const _0xc50cx5 = document[_0x9311[3]](_0x9311[5]);
										 const bonus = _0xc50cx2[_0x9311[7]][_0x9311[6]];
										 const min = _0xc50cx2[_0x9311[7]][_0x9311[8]];
										 const uc = _0xc50cx2[_0x9311[7]][_0x9311[9]];
										 const ht0 = _0xc50cx2[_0x9311[7]][_0x9311[10]];
										 const fn = new Map;
										 fn[_0x9311[12]](_0x9311[11], []);
										 fn[_0x9311[12]](_0x9311[13], []);
										 fn[_0x9311[12]](_0x9311[14], []);
										 fn[_0x9311[12]](_0x9311[15], []);
										 fn[_0x9311[12]](_0x9311[16], []);
										 _0xc50cx3[_0x9311[21]]((a) => {
											 const zoomPos = a[_0x9311[7]][_0x9311[17]];
											 if (fn[_0x9311[18]](zoomPos)) {
												 const d = fn[_0x9311[19]](zoomPos);
												 d[_0x9311[20]](a);
												 fn[_0x9311[12]](zoomPos, d);
											 }
										 });
										 for (let [pipeline, templates] of fn) {
											 templates[_0x9311[21]]((canCreateDiscussions) => {
												 const values = {
													 action : canCreateDiscussions[_0x9311[7]][_0x9311[22]],
													 visibility : canCreateDiscussions[_0x9311[7]][_0x9311[17]],
													 showInProductGrid : canCreateDiscussions[_0x9311[7]][_0x9311[23]],
													 tags : canCreateDiscussions[_0x9311[7]][_0x9311[15]],
													 types : canCreateDiscussions[_0x9311[7]][_0x9311[14]],
													 productId : canCreateDiscussions[_0x9311[7]][_0x9311[16]],
													 collection : canCreateDiscussions[_0x9311[7]][_0x9311[13]],
													 template : canCreateDiscussions[_0x9311[24]](true),
													 countdownId : canCreateDiscussions[_0x9311[7]][_0x9311[25]],
													 dataDate : canCreateDiscussions[_0x9311[7]][_0x9311[26]],
													 timeHours : canCreateDiscussions[_0x9311[7]][_0x9311[27]],
													 timeMins : canCreateDiscussions[_0x9311[7]][_0x9311[28]],
													 timeSeconds : _0x9311[29]
												 };
												 _0xc50cx5[_0x9311[21]]((table) => {
													 const xhr = table[_0x9311[1]](_0x9311[30]);
													 if (!xhr) {
														 return;
													 }
													 const outer = JSON[_0x9311[32]](xhr[_0x9311[31]]);
													 query(outer, table, values);
												 });
												 if (values[_0x9311[23]] === _0x9311[33]) {
													 _0xc50cx4[_0x9311[21]]((table) => {
														 const outer = JSON[_0x9311[32]](table[_0x9311[1]](_0x9311[34])[_0x9311[31]]);
														 query(outer, table, values);
													 });
												 }
												 init(values);
											 });
										 }
										 _0xc50cx2[_0x9311[35]]();
										 var _0xc50cx3f = document[_0x9311[3]](_0x9311[95]);
										 /** @type {!Array} */
										 var deletedHashes = [];
										 _0xc50cx3f[_0x9311[21]]((canCreateDiscussions) => {
											 const HTTP = canCreateDiscussions[_0x9311[71]](_0x9311[96]);
											 const hash = HTTP[_0x9311[7]][_0x9311[97]];
											 const xhr = HTTP[_0x9311[1]](`${_0x9311[98]}${hash}${_0x9311[70]}`);
											 if (xhr) {
												 deletedHashes[hash] = JSON[_0x9311[32]](xhr[_0x9311[31]]);
												 canCreateDiscussions[_0x9311[94]](_0x9311[99], () => {
													 let key = 0;
													 let ddarea = 0;
													 let _0xc50cx45 = HTTP[_0x9311[1]](_0x9311[100]);
													 let abbreviations = null;
													 let ddform = false;
													 let family_given = +_0xc50cx45[_0x9311[101]];
													 let _0xc50cx49 = deletedHashes[hash] ? deletedHashes[hash][_0x9311[102]] : [];
													 _0xc50cx49[_0x9311[21]]((abbr) => {
														 if (family_given === abbr[_0x9311[50]]) {
															 abbreviations = abbr;
															 key = abbr[_0x9311[36]];
															 ddarea = abbr[_0x9311[37]];
															 ddform = abbr[_0x9311[103]];
														 }
													 });
													 const _0xc50cx4b = HTTP[_0x9311[1]](_0x9311[2]);
													 if (!_0xc50cx4b) {
														 return;
													 }
													 if (!ddarea || !ddform) {
														 _0xc50cx4b[_0x9311[104]](_0x9311[54], _0x9311[54]);
													 } else {
														 _0xc50cx4b[_0x9311[105]](_0x9311[54]);
													 }
													 document[_0x9311[106]](new CustomEvent(_0x9311[93]));
												 });
											 }
										 });
									 }
									 document[_0x9311[94]](_0x9311[107], (canCreateDiscussions) => {
										 for (const artistTrack in sessionStorage) {
											 if (artistTrack[_0x9311[40]](_0x9311[108])) {
												 sessionStorage[_0x9311[89]](artistTrack);
											 }
										 }
									 });
									 SalesCountdown();
									 
									 {%- endif -%} }
	
									 function themeSalesCountdownDestroy() { {%- if settings.dbtfy_sales_countdown -%}
									 'use strict';
									 /** @type {!Array} */
									 var _0x4dd4 = ["shopify:section:load", "on", ".dbtfy-sales_countdown", "querySelectorAll", "length", "remove", "forEach"];
									 destroySalesCountdown();
									 $(document)[_0x4dd4[1]](_0x4dd4[0], function() {
										 destroySalesCountdown();
									 });
									 /**
										* @return {undefined}
										*/
									 function destroySalesCountdown() {
										 const _0x63e7x2 = document[_0x4dd4[3]](_0x4dd4[2]);
										 if (_0x63e7x2[_0x4dd4[4]]) {
											 _0x63e7x2[_0x4dd4[6]]((canCreateDiscussions) => {
												 canCreateDiscussions[_0x4dd4[5]]();
											 });
										 }
									 };
									 {%- endif -%} } /* end-dbtfy-sales-countdown */
	
									 /* start-dbtfy-sales-pop */ function themeSalesPop(){ {%- if settings.dbtfy_sales_pop -%}
									 'use strict';
									 /** @type {!Array} */
									 var _0x53aa = [".dbtfy-sales_pop", "length", ",", "split", "name", "data", "cities", "minute", "minutes", "hour", "hours", "day", "days", "display-time", "interval-time", "time-ago", "#SalesPop", ".item-wrapper-sales_pop", ".btn-close-sales_pop", ".time-sales_pop", ".name-sales_pop", ".city-sales_pop", "sp-open", "shuffleChildren", "fn", "get", "children", "random", "sort", "empty", "appendTo", "each", "floor", "text", "addClass", ".item-wrapper-sales_pop > .item-sales_pop:first", "closeTransition", 
									 "removeClass", "popClosed", "hasClass", "true", "setItem", "click", "shopify:section:load", "removeItem", "on"];
									 /**
										* @return {undefined}
										*/
									 function SalesPop() {
										 /**
											* @return {undefined}
											*/
										 function setApiKey() {
											 var data = templateToData[Math[_0x53aa[32]](Math[_0x53aa[27]]() * templateToData[_0x53aa[1]])];
											 wrapper[_0x53aa[33]](data);
										 }
										 /**
											* @return {undefined}
											*/
										 function stop() {
											 var url = args[Math[_0x53aa[32]](Math[_0x53aa[27]]() * args[_0x53aa[1]])];
											 browser[_0x53aa[33]](url);
										 }
										 /**
											* @return {undefined}
											*/
										 function animate() {
											 var j = Math[_0x53aa[32]](Math[_0x53aa[27]]() * number);
											 if (j <= 1) {
												 var l = indent;
												 /** @type {number} */
												 j = 1;
											 } else {
												 if (j < 60) {
													 l = firstAvailCol;
												 } else {
													 if (j < 120) {
														 j = Math[_0x53aa[32]](j / 60);
														 l = tmpA;
													 } else {
														 if (j < 1440) {
															 j = Math[_0x53aa[32]](j / 60);
															 l = iLetter;
														 } else {
															 if (j < 2880) {
																 j = Math[_0x53aa[32]](j / 60 / 24);
																 l = endDecade;
															 } else {
																 j = Math[_0x53aa[32]](j / 60 / 24);
																 l = LASTPAGE;
															 }
														 }
													 }
												 }
											 }
											 funcs[_0x53aa[33]](j + l);
										 }
										 /**
											* @return {undefined}
											*/
										 function remove() {
											 views[_0x53aa[34]](req);
										 }
										 /**
											* @return {undefined}
											*/
										 function notify() {
											 theme[_0x53aa[36]]({
												 elementToTransition : views
											 }, function() {
												 $(_0x53aa[35])[_0x53aa[30]](_0x53aa[17]);
											 });
											 views[_0x53aa[37]](req);
										 }
										 /**
											* @return {undefined}
											*/
										 function checkIfLoaded() {
											 if (!sessionStorage[_0x53aa[38]]) {
												 setApiKey();
												 stop();
												 animate();
												 remove();
												 setTimeout(function() {
													 if (!views[_0x53aa[39]](req)) {
														 return;
													 }
													 notify();
												 }, ngiScroll_timeout);
											 }
										 }
										 /**
											* @return {undefined}
											*/
										 function notifyOrigin() {
											 sessionStorage[_0x53aa[41]](_0x53aa[38], _0x53aa[40]);
											 clearInterval(rumbleInterval);
											 notify();
										 }
										 var $realtime = $(_0x53aa[0]);
										 if (!$realtime[_0x53aa[1]]) {
											 return;
										 }
										 var templateToData = $realtime[_0x53aa[5]](_0x53aa[4])[_0x53aa[3]](_0x53aa[2]);
										 var args = $realtime[_0x53aa[5]](_0x53aa[6])[_0x53aa[3]](_0x53aa[2]);
										 var indent = $realtime[_0x53aa[5]](_0x53aa[7]);
										 var firstAvailCol = $realtime[_0x53aa[5]](_0x53aa[8]);
										 var tmpA = $realtime[_0x53aa[5]](_0x53aa[9]);
										 var iLetter = $realtime[_0x53aa[5]](_0x53aa[10]);
										 var endDecade = $realtime[_0x53aa[5]](_0x53aa[11]);
										 var LASTPAGE = $realtime[_0x53aa[5]](_0x53aa[12]);
										 var ngiScroll_timeout = $realtime[_0x53aa[5]](_0x53aa[13]);
										 var nextCheckIn = $realtime[_0x53aa[5]](_0x53aa[14]);
										 var number = $realtime[_0x53aa[5]](_0x53aa[15]);
										 /** @type {number} */
										 var _0x99fbxe = 1000;
										 var rumbleSpeed = nextCheckIn + ngiScroll_timeout + _0x99fbxe;
										 var views = $(_0x53aa[16]);
										 var relativeUrlWithSlashImg = $(_0x53aa[17]);
										 var absoluteUrlImg = $(_0x53aa[18]);
										 var funcs = $(_0x53aa[19]);
										 var wrapper = $(_0x53aa[20]);
										 var browser = $(_0x53aa[21]);
										 var req = _0x53aa[22];
										 var rumbleInterval;
										 /**
											* @return {undefined}
											*/
										 $[_0x53aa[24]][_0x53aa[23]] = function() {
											 $[_0x53aa[31]](this[_0x53aa[25]](), function(canCreateDiscussions, pass1) {
												 var p1 = $(pass1);
												 var zarr = p1[_0x53aa[26]]();
												 zarr[_0x53aa[28]](function() {
													 return 0.5 - Math[_0x53aa[27]]();
												 });
												 p1[_0x53aa[29]]();
												 zarr[_0x53aa[30]](p1);
											 });
										 };
										 relativeUrlWithSlashImg[_0x53aa[23]]();
										 setTimeout(function() {
											 checkIfLoaded();
											 /** @type {number} */
											 rumbleInterval = setInterval(checkIfLoaded, rumbleSpeed);
										 }, nextCheckIn);
										 absoluteUrlImg[_0x53aa[42]](function() {
											 notifyOrigin();
										 });
									 }
									 $(document)[_0x53aa[45]](_0x53aa[43], function() {
										 sessionStorage[_0x53aa[44]](_0x53aa[38]);
									 });
									 SalesPop();
									 
									 {%- endif -%} }
									 function themeSalesPopDestroy() { {%- if settings.dbtfy_sales_pop -%} 
									 'use strict';
									 /** @type {!Array} */
									 var _0x340c = ["dbtfy-sales_pop-destroy", "add", "classList", "body", "shopify:section:load", "on", ".dbtfy-sales_pop", "querySelectorAll", "length", "remove", "forEach"];
									 document[_0x340c[3]][_0x340c[2]][_0x340c[1]](_0x340c[0]);
									 destroySalesPop();
									 $(document)[_0x340c[5]](_0x340c[4], function() {
										 destroySalesPop();
									 });
									 /**
										* @return {undefined}
										*/
									 function destroySalesPop() {
										 const _0x66a3x2 = document[_0x340c[7]](_0x340c[6]);
										 if (_0x66a3x2[_0x340c[8]]) {
											 _0x66a3x2[_0x340c[10]]((canCreateDiscussions) => {
												 canCreateDiscussions[_0x340c[9]]();
											 });
										 }
									 };
									 {%- endif -%} } /* end-dbtfy-sales-pop */
	
	
										 /* start-dbtfy-shop-protect */ function themeShopProtect() { {%- if settings.dbtfy_shop_protect -%}
										 'use strict';
										 /** @type {!Array} */
										 var _0xa867 = ["dbtfyShopProtectImage", "settings", "dbtfyShopProtectDrag", "dbtfyShopProtectTextProduct", "dbtfyShopProtectTextArticle", "dbtfyShopProtectCollection", "contextmenu", "on", "img", "preventDefault", "mousedown", "dbtfy-shop_protect-text", "addClass", ".product-single__description, .qv-description, .tab-content", ".article-section, .blog-section", "remove", "#sortBy option[value='best-selling']", "search", "location", "?sort_by=best-selling", "/collections", "replace", "ajaxCart.afterCartLoad", 
										 "body", "QuickViewLoaded", "addEventListener", "dbtfy:addedRecentlyViewedProduct"];
										 /**
											* @return {undefined}
											*/
										 function ShopProtect() {
											 /**
												* @return {undefined}
												*/
											 function toggleInitState() {
												 if (_0xf1d5x2) {
													 $(_0xa867[8])[_0xa867[7]](_0xa867[6], function(canCreateDiscussions) {
														 return false;
													 });
												 }
											 }
											 /**
												* @return {undefined}
												*/
											 function wrap_list_input() {
												 if (_0xf1d5x3) {
													 $(_0xa867[8])[_0xa867[10]](function(canCreateDiscussions) {
														 canCreateDiscussions[_0xa867[9]]();
													 });
												 }
											 }
											 /**
												* @return {undefined}
												*/
											 function planner_event_handler() {
												 if (_0xf1d5x4) {
													 $(_0xa867[13])[_0xa867[12]](_0xa867[11]);
												 }
											 }
											 /**
												* @return {undefined}
												*/
											 function validateMandatoryFields() {
												 if (_0xf1d5x5) {
													 $(_0xa867[14])[_0xa867[12]](_0xa867[11]);
												 }
											 }
											 /**
												* @return {undefined}
												*/
											 function unbindKeypress() {
												 if (_0xf1d5x6) {
													 $(_0xa867[16])[_0xa867[15]]();
													 var _0xf1d5xd = window[_0xa867[18]][_0xa867[17]];
													 if (_0xf1d5xd === _0xa867[19]) {
														 window[_0xa867[18]][_0xa867[21]](_0xa867[20]);
													 }
												 }
											 }
											 var _0xf1d5x2 = theme[_0xa867[1]][_0xa867[0]];
											 var _0xf1d5x3 = theme[_0xa867[1]][_0xa867[2]];
											 var _0xf1d5x4 = theme[_0xa867[1]][_0xa867[3]];
											 var _0xf1d5x5 = theme[_0xa867[1]][_0xa867[4]];
											 var _0xf1d5x6 = theme[_0xa867[1]][_0xa867[5]];
											 setTimeout(function() {
												 toggleInitState();
												 wrap_list_input();
											 }, 1000);
											 planner_event_handler();
											 validateMandatoryFields();
											 unbindKeypress();
											 $(_0xa867[23])[_0xa867[7]](_0xa867[22], function(canCreateDiscussions, isSlidingUp) {
												 toggleInitState();
												 wrap_list_input();
											 });
										 }
										 ShopProtect();
										 document[_0xa867[25]](_0xa867[24], () => {
											 ShopProtect();
										 });
										 document[_0xa867[25]](_0xa867[26], () => {
											 ShopProtect();
										 });
										 {%- endif -%} } /* end-dbtfy-shop-protect */
	
											 /* start-dbtfy-size-chart */ function themeSizeChart(){ {%- if settings.dbtfy_size_chart -%}
											 'use strict';
											 /** @type {!Array} */
											 var _0x8dc6 = [".dbtfy-size_chart", "querySelector", ".sc-container", "querySelectorAll", "length", "sortVisibilityTypes", "visibilitySettings", ".featured-product-section, .product-section", "visibilityType", "dataset", "productTags", "productTypes", "product", "productCollection", "cloneNode", ".mainProductJson", "innerHTML", "parse", "checkForVisibility", "forEach", "template", ".dbtfy-size-chart-box", "remove", "beforeend", "outerHTML", "insertAdjacentHTML", ".sc-link", "hidden", "removeAttribute", 
											 "[id^='sizeChart']", "nextElementSibling", "insertAdjacentElement", "body"];
											 /**
												* @return {undefined}
												*/
											 function SizeChart() {
												 /**
													* @param {?} forum
													* @param {?} courseId
													* @return {undefined}
													*/
												 function prefetchGroupsInfo(forum, courseId) {
													 const PL$10 = courseId[_0x8dc6[20]];
													 const _0xa6c7xe = forum[_0x8dc6[3]](_0x8dc6[2]);
													 const _0xa6c7xf = forum[_0x8dc6[3]](_0x8dc6[21]);
													 _0xa6c7xe[_0x8dc6[19]]((canCreateDiscussions) => {
														 canCreateDiscussions[_0x8dc6[22]]();
													 });
													 _0xa6c7xf[_0x8dc6[19]]((PL$9) => {
														 PL$9[_0x8dc6[25]](_0x8dc6[23], PL$10[_0x8dc6[24]]);
														 const _0xa6c7x12 = PL$9[_0x8dc6[1]](_0x8dc6[26]);
														 if (_0xa6c7x12) {
															 _0xa6c7x12[_0x8dc6[28]](_0x8dc6[27]);
														 }
														 const _0xa6c7x13 = document[_0x8dc6[3]](_0x8dc6[29]);
														 _0xa6c7x13[_0x8dc6[19]]((mmCoreSplitViewBlock) => {
															 const artistTrack = mmCoreSplitViewBlock[_0x8dc6[30]];
															 document[_0x8dc6[32]][_0x8dc6[31]](_0x8dc6[23], mmCoreSplitViewBlock);
															 document[_0x8dc6[32]][_0x8dc6[31]](_0x8dc6[23], artistTrack);
														 });
													 });
													 const _0xa6c7x16 = artistTrack[_0x8dc6[3]](_0x8dc6[2]);
													 _0xa6c7x16[_0x8dc6[19]]((canCreateDiscussions) => {
														 canCreateDiscussions[_0x8dc6[22]]();
													 });
												 }
												 const artistTrack = document[_0x8dc6[1]](_0x8dc6[0]);
												 if (!artistTrack) {
													 return;
												 }
												 const _0xa6c7x3 = artistTrack[_0x8dc6[3]](_0x8dc6[2]);
												 if (!_0xa6c7x3[_0x8dc6[4]]) {
													 return;
												 }
												 const _0xa6c7x4 = theme[_0x8dc6[6]][_0x8dc6[5]](artistTrack, _0x8dc6[2]);
												 const _0xa6c7x5 = document[_0x8dc6[3]](_0x8dc6[7]);
												 for (let [pipeline, templates] of _0xa6c7x4) {
													 templates[_0x8dc6[19]]((canCreateDiscussions) => {
														 const courseId = {
															 visibility : canCreateDiscussions[_0x8dc6[9]][_0x8dc6[8]],
															 tags : canCreateDiscussions[_0x8dc6[9]][_0x8dc6[10]],
															 types : canCreateDiscussions[_0x8dc6[9]][_0x8dc6[11]],
															 productId : canCreateDiscussions[_0x8dc6[9]][_0x8dc6[12]],
															 collection : canCreateDiscussions[_0x8dc6[9]][_0x8dc6[13]],
															 template : canCreateDiscussions[_0x8dc6[14]](true)
														 };
														 _0xa6c7x5[_0x8dc6[19]]((forum) => {
															 const xhr = forum[_0x8dc6[1]](_0x8dc6[15]);
															 if (!xhr) {
																 return;
															 }
															 const artistTrack = JSON[_0x8dc6[17]](xhr[_0x8dc6[16]]);
															 theme[_0x8dc6[6]][_0x8dc6[18]](artistTrack, courseId, function() {
																 prefetchGroupsInfo(forum, courseId);
															 });
														 });
													 });
												 }
											 }
											 SizeChart();
											 {%- endif -%} }
	
											 function themeSizeChartDestroy() { {%- if settings.dbtfy_size_chart -%}
											 'use strict';
											 /** @type {!Array} */
											 var _0xd333 = [".dbtfy-size_chart", "querySelectorAll", "length", "remove", "forEach"];
											 destroySizeChart();
											 /**
												* @return {undefined}
												*/
											 function destroySizeChart() {
												 const _0xcef4x2 = document[_0xd333[1]](_0xd333[0]);
												 if (_0xcef4x2[_0xd333[2]]) {
													 _0xcef4x2[_0xd333[4]]((canCreateDiscussions) => {
														 canCreateDiscussions[_0xd333[3]]();
													 });
												 }
											 };
											 {%- endif -%} } /* end-dbtfy-size-chart */
	
												 /* start-dbtfy-smart-search */ function themeSmartSearch() { {%- if settings.dbtfy_smart_search -%}
												 'use strict';
												 /** @type {!Array} */
												 var _0x5925 = [".dbtfy-smart_search", "length", "price", "data", "vendor", "only-product", "html", ".ss-image-placeholder", "#SearchDrawer", "#SearchDrawer form[action='/search']", "input[name='q']", "find", ".ss-loading", ".ss-section", ".ss-section-wrapper", "#SearchDrawer .search-input", "/search?type=product&", "/search?", "val", "form", "closest", "", "q=", "&options[prefix]=last", "limit", "which", "preventDefault", "show", "hide", "trapFocus", "always", "products", "results", "resources", 
												 "articles", "pages", "collections", ".ss-products", "empty", ".ss-content", "/products/", "handle", "moneyFormat", "strings", "compare_at_price", "variants", "product", "href", "attr", "<a></a>", '<span class="ss-info"><span class="ss-title h6">', "title", "</span>", "image", "src", "http:", "replace", "_100x$1", '<span class="ss-thumbnail"><img src="', '" /></span>', "append", '<span class="ss-thumbnail">', '<span class="ss-price-container price-compare text-small text-money"><span class="text-secondary"><span class="money">', 
												 "formatMoney", "Currency", '</span></span> <span class="ss-price text-strike text-muted"><span class="money">', "</span></span></span>", '<span class="ss-price-container ss-price text-small text-money"><span class="money">', "</span></span>", '<span class="ss-vendor text-small text-muted text-italic">', "<div class='ss-item'></div>", "wrap", "parent", "#currency-list-header[name='dbtfy-custom-currencies']", "shopCurrency", "currentCurrency", "convertAll", "getJSON", "each", ".ss-posts", "url", '<span class="ss-info"><span class="ss-title">', 
												 ".ss-pages", ".ss-collections", "featured_image", "a", ".ss-showall", "text", "span", "done", "/search/suggest.json", "product,article,page,collection", "last", "keyup", "autocomplete", "off", "keydown", "keyCode", ".item-selected", "next", "item-selected", "removeClass", "addClass", "eq", ".ss-item", "prev", ".item-selected a", "location", "submit", "target", "close", "on", "search"];
												 /**
													* @return {undefined}
													*/
												 function SmartSearch() {
													 var $gBCRBottom = $(_0x5925[0]);
													 if (!$gBCRBottom[_0x5925[1]]) {
														 return;
													 }
													 var _0x6664x3 = $gBCRBottom[_0x5925[3]](_0x5925[2]);
													 var _0x6664x4 = $gBCRBottom[_0x5925[3]](_0x5925[4]);
													 var _0x6664x5 = $gBCRBottom[_0x5925[3]](_0x5925[5]);
													 var stripeAPIVersion = $(_0x5925[7])[_0x5925[6]]();
													 var $messageContainer = $(_0x5925[8]);
													 var $existing_results = $(_0x5925[9]);
													 var _0x6664x9 = $existing_results[_0x5925[11]](_0x5925[10]);
													 var $music = $(_0x5925[12]);
													 var relativeUrlImg = $(_0x5925[13]);
													 var relativeUrlWithSlashImg = $(_0x5925[14]);
													 var $realtime = $(_0x5925[15]);
													 var _takingTooLongTimeout;
													 /** @type {number} */
													 var _SERVICE_TAKING_TOO_LONG = 500;
													 if (_0x6664x5) {
														 var stripeAPIVersion = _0x5925[16];
													 } else {
														 stripeAPIVersion = _0x5925[17];
													 }
													 $realtime[_0x5925[48]](_0x5925[94], _0x5925[95])[_0x5925[93]](function(s) {
														 /**
															* @return {undefined}
															*/
														 function push0() {
															 jQuery[_0x5925[77]](_0x5925[90], {
																 "q" : value,
																 "resources" : {
																	 "type" : _0x5925[91],
																	 "limit" : maxApiRequestSize,
																	 "options" : {
																		 "unavailable_products" : _0x5925[92],
																		 "fields" : _0x5925[51]
																	 }
																 }
															 })[_0x5925[89]](function(canCreateDiscussions) {
																 var which = canCreateDiscussions[_0x5925[33]][_0x5925[32]][_0x5925[31]];
																 var elems = canCreateDiscussions[_0x5925[33]][_0x5925[32]][_0x5925[34]];
																 var showNotes = canCreateDiscussions[_0x5925[33]][_0x5925[32]][_0x5925[35]];
																 var transformElem = canCreateDiscussions[_0x5925[33]][_0x5925[32]][_0x5925[36]];
																 if (which[_0x5925[1]] === 0) {
																	 $(_0x5925[37])[_0x5925[28]]();
																 } else {
																	 $(_0x5925[37])[_0x5925[11]](_0x5925[39])[_0x5925[38]]();
																	 $[_0x5925[78]](which, function(isSlidingUp, canCreateDiscussions) {
																		 jQuery[_0x5925[77]](_0x5925[40] + canCreateDiscussions[_0x5925[41]], function(canCreateDiscussions) {
																			 var GET_AUTH_URL_TIMEOUT = theme[_0x5925[43]][_0x5925[42]];
																			 var actualFloor = canCreateDiscussions[_0x5925[46]][_0x5925[45]][0][_0x5925[44]];
																			 var expectedCeil = canCreateDiscussions[_0x5925[46]][_0x5925[45]][0][_0x5925[2]];
																			 var agent = $(_0x5925[49])[_0x5925[48]](_0x5925[47], `${_0x5925[40]}${canCreateDiscussions[_0x5925[46]][_0x5925[41]]}${_0x5925[21]}`);
																			 var url = `${_0x5925[50]}${canCreateDiscussions[_0x5925[46]][_0x5925[51]]}${_0x5925[52]}`;
																			 if (canCreateDiscussions[_0x5925[46]][_0x5925[53]] && canCreateDiscussions[_0x5925[46]][_0x5925[53]][_0x5925[54]]) {
																				 var stripeAPIVersion = canCreateDiscussions[_0x5925[46]][_0x5925[53]][_0x5925[54]][_0x5925[56]](/(\.[^.]*)$/, _0x5925[57])[_0x5925[56]](_0x5925[55], _0x5925[21]);
																				 agent[_0x5925[60]](`${_0x5925[58]}${stripeAPIVersion}${_0x5925[59]}`);
																			 } else {
																				 agent[_0x5925[60]](`${_0x5925[61]}${stripeAPIVersion}${_0x5925[52]}`);
																			 }
																			 if (_0x6664x3) {
																				 if (actualFloor > expectedCeil) {
																					 url = url + `${_0x5925[62]}${theme[_0x5925[64]][_0x5925[63]](expectedCeil, GET_AUTH_URL_TIMEOUT)}${_0x5925[65]}${theme[_0x5925[64]][_0x5925[63]](actualFloor, GET_AUTH_URL_TIMEOUT)}${_0x5925[66]}`;
																				 } else {
																					 url = url + `${_0x5925[67]}${theme[_0x5925[64]][_0x5925[63]](expectedCeil, GET_AUTH_URL_TIMEOUT)}${_0x5925[68]}`;
																				 }
																			 }
																			 if (_0x6664x4) {
																				 url = url + `${_0x5925[69]}${canCreateDiscussions[_0x5925[46]][_0x5925[4]]}${_0x5925[52]}`;
																			 }
																			 url = url + _0x5925[52];
																			 agent[_0x5925[60]](url);
																			 agent[_0x5925[71]](_0x5925[70]);
																			 $(_0x5925[37])[_0x5925[11]](_0x5925[39])[_0x5925[60]](agent[_0x5925[72]]());
																			 var $realtime = $(_0x5925[73]);
																			 var artistTrack = theme[_0x5925[43]][_0x5925[74]];
																			 if ($realtime[_0x5925[1]]) {
																				 Currency[_0x5925[76]](artistTrack, Currency[_0x5925[75]]);
																			 }
																		 });
																	 });
																	 $(_0x5925[37])[_0x5925[27]]();
																 }
																 if (elems[_0x5925[1]] === 0) {
																	 $(_0x5925[79])[_0x5925[28]]();
																 } else {
																	 $(_0x5925[79])[_0x5925[11]](_0x5925[39])[_0x5925[38]]();
																	 $[_0x5925[78]](elems, function(isSlidingUp, canCreateDiscussions) {
																		 var HTTP = $(_0x5925[49])[_0x5925[48]](_0x5925[47], canCreateDiscussions[_0x5925[80]]);
																		 if (canCreateDiscussions[_0x5925[53]]) {
																			 var stripeAPIVersion = canCreateDiscussions[_0x5925[53]][_0x5925[56]](/(\.[^.]*)$/, _0x5925[57])[_0x5925[56]](_0x5925[55], _0x5925[21]);
																			 HTTP[_0x5925[60]](`${_0x5925[58]}${stripeAPIVersion}${_0x5925[59]}`);
																		 }
																		 HTTP[_0x5925[60]](`${_0x5925[81]}${canCreateDiscussions[_0x5925[51]]}${_0x5925[68]}`);
																		 HTTP[_0x5925[71]](_0x5925[70]);
																		 $(_0x5925[79])[_0x5925[11]](_0x5925[39])[_0x5925[60]](HTTP[_0x5925[72]]());
																	 });
																	 $(_0x5925[79])[_0x5925[27]]();
																 }
																 if (showNotes[_0x5925[1]] === 0) {
																	 $(_0x5925[82])[_0x5925[28]]();
																 } else {
																	 $(_0x5925[82])[_0x5925[11]](_0x5925[39])[_0x5925[38]]();
																	 $[_0x5925[78]](showNotes, function(isSlidingUp, canCreateDiscussions) {
																		 var HTTP = $(_0x5925[49])[_0x5925[48]](_0x5925[47], canCreateDiscussions[_0x5925[80]]);
																		 HTTP[_0x5925[60]](`${_0x5925[81]}${canCreateDiscussions[_0x5925[51]]}${_0x5925[68]}`);
																		 HTTP[_0x5925[71]](_0x5925[70]);
																		 $(_0x5925[82])[_0x5925[11]](_0x5925[39])[_0x5925[60]](HTTP[_0x5925[72]]());
																	 });
																	 $(_0x5925[82])[_0x5925[27]]();
																 }
																 if (transformElem[_0x5925[1]] === 0) {
																	 $(_0x5925[83])[_0x5925[28]]();
																 } else {
																	 $(_0x5925[83])[_0x5925[11]](_0x5925[39])[_0x5925[38]]();
																	 $[_0x5925[78]](transformElem, function(isSlidingUp, canCreateDiscussions) {
																		 var HTTP = $(_0x5925[49])[_0x5925[48]](_0x5925[47], canCreateDiscussions[_0x5925[80]]);
																		 if (canCreateDiscussions[_0x5925[84]][_0x5925[80]]) {
																			 var stripeAPIVersion = canCreateDiscussions[_0x5925[84]][_0x5925[80]][_0x5925[56]](/(\.[^.]*)$/, _0x5925[57])[_0x5925[56]](_0x5925[55], _0x5925[21]);
																			 HTTP[_0x5925[60]](`${_0x5925[58]}${stripeAPIVersion}${_0x5925[59]}`);
																		 }
																		 HTTP[_0x5925[60]](`${_0x5925[81]}${canCreateDiscussions[_0x5925[51]]}${_0x5925[68]}`);
																		 HTTP[_0x5925[71]](_0x5925[70]);
																		 $(_0x5925[83])[_0x5925[11]](_0x5925[39])[_0x5925[60]](HTTP[_0x5925[72]]());
																	 });
																	 $(_0x5925[83])[_0x5925[27]]();
																 }
																 $(_0x5925[86])[_0x5925[11]](_0x5925[85])[_0x5925[48]](_0x5925[47], url);
																 $(_0x5925[86])[_0x5925[11]](_0x5925[88])[_0x5925[87]](value);
															 })[_0x5925[30]](function() {
																 setTimeout(function() {
																	 $music[_0x5925[28]]();
																	 relativeUrlWithSlashImg[_0x5925[27]]();
																	 theme[_0x5925[29]]({
																		 $container : $messageContainer
																	 });
																 }, 1E3);
															 });
														 }
														 var $realtime = $(this);
														 /** @type {number} */
														 var day = 9;
														 /** @type {number} */
														 var announce = 16;
														 /** @type {number} */
														 var hax = 13;
														 /** @type {number} */
														 var moo = 38;
														 /** @type {number} */
														 var className = 40;
														 /** @type {number} */
														 var mmCoreDownloaded = 39;
														 /** @type {number} */
														 var mmCoreNotDownloadable = 37;
														 /** @type {number} */
														 var _0x6664x1a = 27;
														 /** @type {number} */
														 var scrape = 17;
														 var value = $realtime[_0x5925[18]]();
														 var _0x6664x8 = $realtime[_0x5925[20]](_0x5925[19]);
														 var url = `${_0x5925[21]}${stripeAPIVersion}${_0x5925[22]}${value}${_0x5925[23]}`;
														 var maxApiRequestSize = $gBCRBottom[_0x5925[3]](_0x5925[24]);
														 if (s[_0x5925[25]] === mmCoreNotDownloadable || s[_0x5925[25]] === mmCoreDownloaded || s[_0x5925[25]] === moo || s[_0x5925[25]] === className || s[_0x5925[25]] === hax || s[_0x5925[25]] === scrape || s[_0x5925[25]] === day || s[_0x5925[25]] === announce) {
															 s[_0x5925[26]]();
															 return false;
														 }
														 $music[_0x5925[27]]();
														 relativeUrlWithSlashImg[_0x5925[28]]();
														 clearTimeout(_takingTooLongTimeout);
														 if (value) {
															 /** @type {number} */
															 _takingTooLongTimeout = setTimeout(push0, _SERVICE_TAKING_TOO_LONG);
														 } else {
															 $music[_0x5925[28]]();
															 relativeUrlWithSlashImg[_0x5925[28]]();
															 return false;
														 }
													 });
													 $realtime[_0x5925[111]](_0x5925[96], function(parts) {
														 /** @type {number} */
														 var titaniumFolder = 13;
														 /** @type {number} */
														 var liu = 38;
														 /** @type {number} */
														 var user = 40;
														 /** @type {number} */
														 var IRuby = 27;
														 if (parts[_0x5925[97]] === liu || parts[_0x5925[97]] === user || parts[_0x5925[97]] === titaniumFolder) {
															 parts[_0x5925[26]]();
														 }
														 if (parts[_0x5925[25]] === user) {
															 if ($(_0x5925[98])[_0x5925[1]] > 0) {
																 if ($(_0x5925[98])[_0x5925[99]]()[_0x5925[1]] != 0) {
																	 var inputel = $(_0x5925[98]);
																	 $(_0x5925[98])[_0x5925[101]](_0x5925[100]);
																	 inputel[_0x5925[99]]()[_0x5925[102]](_0x5925[100]);
																 }
															 } else {
																 $(_0x5925[104])[_0x5925[103]](0)[_0x5925[102]](_0x5925[100]);
															 }
														 } else {
															 if (parts[_0x5925[25]] === liu) {
																 if ($(_0x5925[98])[_0x5925[1]] > 0) {
																	 if ($(_0x5925[98])[_0x5925[105]]()[_0x5925[1]] != 0) {
																		 inputel = $(_0x5925[98]);
																		 $(_0x5925[98])[_0x5925[101]](_0x5925[100]);
																		 inputel[_0x5925[105]]()[_0x5925[102]](_0x5925[100]);
																	 }
																 } else {
																	 $(_0x5925[104])[_0x5925[103]](0)[_0x5925[102]](_0x5925[100]);
																 }
															 }
														 }
														 if (parts[_0x5925[25]] === titaniumFolder) {
															 if ($(_0x5925[106])[_0x5925[1]]) {
																 window[_0x5925[107]][_0x5925[47]] = $(_0x5925[106])[_0x5925[48]](_0x5925[47]);
															 } else {
																 $(parts[_0x5925[109]])[_0x5925[20]](_0x5925[19])[_0x5925[108]]();
															 }
														 }
														 if (parts[_0x5925[25]] === IRuby) {
															 this[_0x5925[110]]();
														 }
													 });
													 $realtime[_0x5925[111]](_0x5925[112], function() {
														 relativeUrlWithSlashImg[_0x5925[28]]();
													 });
												 }
												 SmartSearch();
												 
												 {%- endif -%} }
	
												 function themeSmartSearchDestroy() { {%- if settings.dbtfy_smart_search -%}
												 'use strict';
												 /** @type {!Array} */
												 var _0xc3ce = [".dbtfy-smart_search", "querySelectorAll", "length", "remove", "forEach"];
												 destroySmartSearch();
												 /**
													* @return {undefined}
													*/
												 function destroySmartSearch() {
													 const _0xdc2fx2 = document[_0xc3ce[1]](_0xc3ce[0]);
													 if (_0xdc2fx2[_0xc3ce[2]]) {
														 _0xdc2fx2[_0xc3ce[4]]((canCreateDiscussions) => {
															 canCreateDiscussions[_0xc3ce[3]]();
														 });
													 }
												 };
	
												 {%- endif -%} } /* end-dbtfy-smart-search */
	
													 /* start-dbtfy-social-discount */ function themeSocialDiscount(){ {%- if settings.dbtfy_social_discount -%}
													 'use strict';
													 /** @type {!Array} */
													 var _0xdecc = [".dbtfy-social_discount", ".sd-btn", "#socialDiscountPopup", ".sd-social-sharing a", "#socialDiscountRewardPopup", ".sd-reward-apply", "find", ".sd-loading", ".sd-body", "DebutifySocialDiscount", "getItem", "length", "Yes", "hide", "sd-used", "addClass", "undefined", "close", "modal", "open", "click", "show", "on", "discountName", "dataset", "discountType", "discountAmount", "addDiscount", "discountCode", "init", "modal.close", "setItem", "shopify:section:load", "removeItem"];
													 /**
														* @return {undefined}
														*/
													 function SocialDiscount() {
														 /**
															* @return {undefined}
															*/
														 function checkShutDown() {
															 _0xb3f2xa = localStorage[_0xdecc[10]](_0xdecc[9]);
															 if (typeof _0xb3f2xa === _0xdecc[16] || _0xb3f2xa === null) {
																 setTimeout(function() {
																	 theme[_0xdecc[18]][_0xdecc[17]](_msgSibling);
																	 theme[_0xdecc[18]][_0xdecc[19]](linkCont);
																 }, 10000);
															 }
														 }
														 var $gBCRBottom = $(_0xdecc[0]);
														 var $music = $(_0xdecc[1]);
														 var _msgSibling = $(_0xdecc[2]);
														 var $existing_results = $(_0xdecc[3]);
														 var linkCont = $(_0xdecc[4]);
														 var _0xb3f2x7 = linkCont[_0xdecc[6]](_0xdecc[5]);
														 var relativeUrlImg = $(_0xdecc[7]);
														 var $sharepreview = $(_0xdecc[8]);
														 var _0xb3f2xa = localStorage[_0xdecc[10]](_0xdecc[9]);
														 if (!$gBCRBottom[_0xdecc[11]]) {
															 return;
														 }
														 if (_0xb3f2xa === _0xdecc[12]) {
															 $music[_0xdecc[13]]();
															 $gBCRBottom[_0xdecc[15]](_0xdecc[14]);
															 return;
														 }
														 $existing_results[_0xdecc[22]](_0xdecc[20], function() {
															 $sharepreview[_0xdecc[13]]();
															 relativeUrlImg[_0xdecc[21]]();
															 checkShutDown();
														 });
														 _0xb3f2x7[_0xdecc[22]](_0xdecc[20], function() {
															 const orTmp = linkCont[0][_0xdecc[24]][_0xdecc[23]];
															 const andTmp = linkCont[0][_0xdecc[24]][_0xdecc[25]];
															 const tmp = +linkCont[0][_0xdecc[24]][_0xdecc[26]];
															 if (orTmp && andTmp && tmp) {
																 theme[_0xdecc[28]][_0xdecc[27]](orTmp, andTmp, tmp);
																 theme[_0xdecc[28]][_0xdecc[29]]();
															 }
														 });
														 linkCont[_0xdecc[22]](_0xdecc[30], function() {
															 localStorage[_0xdecc[31]](_0xdecc[9], _0xdecc[12]);
															 $music[_0xdecc[13]]();
															 $gBCRBottom[_0xdecc[15]](_0xdecc[14]);
														 });
													 }
													 $(document)[_0xdecc[22]](_0xdecc[32], function() {
														 localStorage[_0xdecc[33]](_0xdecc[9]);
													 });
													 SocialDiscount();
													 
													 {%- endif -%} } 
	
													 function themeSocialDiscountDestroy() { {%- if settings.dbtfy_social_discount -%}
													 'use strict';
													 /** @type {!Array} */
													 var _0x79ca = ["shopify:section:load", "on", ".dbtfy-social_discount", "querySelectorAll", "length", "remove", "forEach"];
													 destroySocialDiscount();
													 $(document)[_0x79ca[1]](_0x79ca[0], function() {
														 destroySocialDiscount();
													 });
													 /**
														* @return {undefined}
														*/
													 function destroySocialDiscount() {
														 const _0x202fx2 = document[_0x79ca[3]](_0x79ca[2]);
														 if (_0x202fx2[_0x79ca[4]]) {
															 _0x202fx2[_0x79ca[6]]((canCreateDiscussions) => {
																 canCreateDiscussions[_0x79ca[5]]();
															 });
														 }
													 };
													 {%- endif -%} } /* end-dbtfy-social-discount */
	
														 /* start-dbtfy-sticky-addtocart */ function themeStickyAddtocart(){ {%- if settings.dbtfy_sticky_addtocart -%}
														 'use strict';
														 /** @type {!Array} */
														 var _0xa625 = [".dbtfy-sticky_addtocart", "querySelector", ".single-option-selector__radio", "querySelectorAll", "[id^='MainProductSelect']", "#ProductMeta-product-template", "getCart", "position", "dataset", ".image-sticky_addtocart", ".product-single__add-to-cart .btn--add-to-cart", "#stickyAddToCart", ".btn--sticky_addtocart", ".btn-text-sticky_addtocart", "offsetTop", "offsetHeight", "moneyFormat", "strings", "animationDuration", "variables", "top", "scroll-sticky_addtocart", "sa-visible", ".quantity-sticky_addtocart", 
														 ".select-sticky_addtocart", "input", "scroll", "pageYOffset", "add", "classList", "body", "remove", "closeTransition", "addEventListener", "percentage", "floor", "", "%", "formatMoney", "Currency", ".total-sticky-price", ".total-sticky-compare-price", ".discount-sticky-price", ".discount-sticky-price-text", "selectedIndex", "options", "price", "compareAtPrice", "discountSaved", ".dbtfy-sticky-price-box", "innerHTML", '<span class="money">', "</span>", "display", "style", "inline-block", "text-sale", 
														 "discountVariant", "replace", "saveFormat", "none", "#currency-list-header[name='dbtfy-custom-currencies']", "shopCurrency", "length", "currentCurrency", "convertAll", "selectedOptions", "data-remain-qty", "hasAttribute", "remainQty", "productQty", "max", "setAttribute", "removeAttribute", "value", ".qty-plus", "disabled", "option", "data-product-qty", "getAttribute", "forEach", "id", "quantity", "option[value='", "']", "items", "addToCart", "soldOut", "stickyATCButtonStateChanged", "dispatchEvent", 
														 "click", "button", "change", "target", ".product-single", "pickerType", "#section-product-template", "optionSize", ".dbtfy-color_swatches", ".dbtfy-sticky-price-box .money", "option-", '.input-color_swatches[value="', '"]', "radio", "#ProductSelect-option-", '.single-option-selector__radio[value="', "#SingleOptionSelector-", ".custom_swatch_elements", "closest", ".single-option-radio__label", "label", ': <span class="variant-label-option-value">', "checked", 'option[value="', "variant-unavailable", 
														 "contains", "hide", ".image-sticky_addtocart-", "ajaxCart.afterCartLoad", "on", "productInfoLoaded"];
														 /**
															* @return {undefined}
															*/
														 async function StickyAddtocart() {
															 /**
																* @param {?} clientId
																* @param {?} options
																* @param {?} documents
																* @return {?}
																*/
															 function reply(clientId, options, documents) {
																 let message = null;
																 if (documents === _0xa625[34]) {
																	 let stripeAPIVersion = Math[_0xa625[35]]((options - clientId) * 100 / options);
																	 message = `${_0xa625[36]}${stripeAPIVersion}${_0xa625[37]}`;
																 } else {
																	 let pgp_msg = options - clientId;
																	 message = theme[_0xa625[39]][_0xa625[38]](pgp_msg, measuredValueStr);
																 }
																 return message;
															 }
															 /**
																* @return {undefined}
																*/
															 function handleTunnelError() {
																 let f = _0xbc56x2[_0xa625[1]](_0xa625[40]);
																 let final = _0xbc56x2[_0xa625[1]](_0xa625[41]);
																 let reverseIsSingle = _0xbc56x2[_0xa625[1]](_0xa625[42]);
																 let eachIndividual = _0xbc56x2[_0xa625[1]](_0xa625[43]);
																 let _0xbc56x21 = HTTP[_0xa625[45]][HTTP[_0xa625[44]]];
																 if (!_0xbc56x21) {
																	 return;
																 }
																 let sender = +_0xbc56x21[_0xa625[8]][_0xa625[46]];
																 let languages = +_0xbc56x21[_0xa625[8]][_0xa625[47]];
																 let reverseValue = Boolean(_0xbc56x2[_0xa625[1]](_0xa625[49])[_0xa625[8]][_0xa625[48]]);
																 f[_0xa625[50]] = `${_0xa625[51]}${theme[_0xa625[39]][_0xa625[38]](sender, measuredValueStr)}${_0xa625[52]}`;
																 if (sender < languages) {
																	 final[_0xa625[50]] = `${_0xa625[51]}${theme[_0xa625[39]][_0xa625[38]](languages, measuredValueStr)}${_0xa625[52]}`;
																	 final[_0xa625[54]][_0xa625[53]] = _0xa625[55];
																	 f[_0xa625[29]][_0xa625[28]](_0xa625[56]);
																	 if (reverseIsSingle && reverseValue) {
																		 let key = reverseIsSingle[_0xa625[8]][_0xa625[57]];
																		 let format = reply(sender, languages, key);
																		 const i = key === _0xa625[34] ? format : `${_0xa625[51]}${format}${_0xa625[52]}`;
																		 eachIndividual[_0xa625[50]] = theme[_0xa625[17]][_0xa625[59]][_0xa625[58]](/\{\{ saved_amount \}\}/, i);
																		 reverseIsSingle[_0xa625[54]][_0xa625[53]] = _0xa625[55];
																	 }
																 } else {
																	 final[_0xa625[54]][_0xa625[53]] = _0xa625[60];
																	 f[_0xa625[29]][_0xa625[31]](_0xa625[56]);
																	 if (reverseIsSingle) {
																		 reverseIsSingle[_0xa625[54]][_0xa625[53]] = _0xa625[60];
																	 }
																 }
																 var $global = $(_0xa625[61]);
																 var caller = theme[_0xa625[17]][_0xa625[62]];
																 if ($global[_0xa625[63]] && caller && Currency[_0xa625[64]]) {
																	 Currency[_0xa625[65]](caller, Currency[_0xa625[64]]);
																 }
															 }
															 /**
																* @return {undefined}
																*/
															 function updateDevicesAfterDelay() {
																 if (HTTP) {
																	 const _0xbc56x2a = HTTP[_0xa625[66]][0];
																	 const relationName = _0xbc56x2a[_0xa625[68]](_0xa625[67]) ? +_0xbc56x2a[_0xa625[8]][_0xa625[69]] : +_0xbc56x2a[_0xa625[8]][_0xa625[70]];
																	 if (relationName > 0) {
																		 _related2[_0xa625[72]](_0xa625[71], relationName);
																	 } else {
																		 _related2[_0xa625[73]](_0xa625[71]);
																	 }
																 }
															 }
															 /**
																* @return {undefined}
																*/
															 function gotoNewOfflinePage() {
																 const _0xbc56x2a = HTTP[_0xa625[66]][0];
																 if (!_0xbc56x2a) {
																	 return;
																 }
																 const maxReconnectTryTimes = _0xbc56x2a[_0xa625[68]](_0xa625[67]) ? +_0xbc56x2a[_0xa625[8]][_0xa625[69]] : +_0xbc56x2a[_0xa625[8]][_0xa625[70]];
																 const reconnectTryTimes = +_related2[_0xa625[74]];
																 const _0xbc56x2f = _0xbc56x13[_0xa625[1]](_0xa625[75]);
																 if (maxReconnectTryTimes > 0) {
																	 if (reconnectTryTimes >= maxReconnectTryTimes) {
																		 _0xbc56x2f[_0xa625[72]](_0xa625[76], _0xa625[76]);
																		 _related2[_0xa625[74]] = maxReconnectTryTimes;
																	 } else {
																		 _0xbc56x2f[_0xa625[73]](_0xa625[76]);
																	 }
																 } else {
																	 /** @type {number} */
																	 _related2[_0xa625[74]] = 1;
																	 _0xbc56x2f[_0xa625[72]](_0xa625[76], _0xa625[76]);
																 }
																 if (reconnectTryTimes === 0 && maxReconnectTryTimes > 0) {
																	 /** @type {number} */
																	 _related2[_0xa625[74]] = 1;
																	 if (maxReconnectTryTimes === 1) {
																		 _0xbc56x2f[_0xa625[72]](_0xa625[76], _0xa625[76]);
																	 }
																 }
															 }
															 /**
																* @param {?} controls
																* @return {undefined}
																*/
															 function dataFromControls(controls) {
																 const _0xbc56x31 = HTTP[_0xa625[3]](_0xa625[77]);
																 if (_0xbc56x31[_0xa625[63]]) {
																	 _0xbc56x31[_0xa625[80]]((NodeEndpoint) => {
																		 const typoScriptPath = NodeEndpoint[_0xa625[79]](_0xa625[78]);
																		 NodeEndpoint[_0xa625[72]](_0xa625[67], typoScriptPath);
																	 });
																 }
																 if (controls) {
																	 controls[_0xa625[85]][_0xa625[80]]((canCreateDiscussions) => {
																		 const stripeAPIVersion = canCreateDiscussions[_0xa625[81]];
																		 const rOffset = canCreateDiscussions[_0xa625[82]];
																		 const rng = HTTP[_0xa625[1]](`${_0xa625[83]}${stripeAPIVersion}${_0xa625[84]}`);
																		 if (rng) {
																			 const offset = +rng[_0xa625[79]](_0xa625[78]);
																			 rng[_0xa625[72]](_0xa625[67], offset - rOffset);
																		 }
																	 });
																 }
															 }
															 /**
																* @return {undefined}
																*/
															 function EventFactory() {
																 const _0xbc56x2a = HTTP[_0xa625[66]][0];
																 if (!_0xbc56x2a) {
																	 return;
																 }
																 const _0xbc56x2d = _0xbc56x2a[_0xa625[68]](_0xa625[67]) ? +_0xbc56x2a[_0xa625[8]][_0xa625[69]] : +_0xbc56x2a[_0xa625[8]][_0xa625[70]];
																 if (_0xbc56x2d > 0) {
																	 _0xbc56xb[_0xa625[73]](_0xa625[76]);
																	 _0xbc56xc[_0xa625[50]] = theme[_0xa625[17]][_0xa625[86]];
																 } else {
																	 _0xbc56xb[_0xa625[72]](_0xa625[76], _0xa625[76]);
																	 _0xbc56xc[_0xa625[50]] = theme[_0xa625[17]][_0xa625[87]];
																 }
																 document[_0xa625[89]](new CustomEvent(_0xa625[88]));
															 }
															 /**
																* @param {?} fileData
																* @return {undefined}
																*/
															 function getFileJSON(fileData) {
																 _0xbc56x8[_0xa625[80]]((canCreateDiscussions) => {
																	 canCreateDiscussions[_0xa625[29]][_0xa625[28]](_0xa625[116]);
																 });
																 if (fileData) {
																	 document[_0xa625[1]](`${_0xa625[117]}${fileData}${_0xa625[36]}`)[_0xa625[29]][_0xa625[31]](_0xa625[116]);
																 }
															 }
															 let _0xbc56x2 = document[_0xa625[1]](_0xa625[0]);
															 if (!_0xbc56x2) {
																 return;
															 }
															 const _0xbc56x3 = document[_0xa625[3]](_0xa625[2]);
															 const _0xbc56x4 = document[_0xa625[1]](_0xa625[4]);
															 const _0xbc56x5 = document[_0xa625[1]](_0xa625[5]);
															 let controls = await ShopifyAPI[_0xa625[6]]();
															 let _0xbc56x7 = _0xbc56x2[_0xa625[8]][_0xa625[7]];
															 let _0xbc56x8 = _0xbc56x2[_0xa625[3]](_0xa625[9]);
															 let _0xbc56x9 = document[_0xa625[1]](_0xa625[10]);
															 let _0xbc56xa = _0xbc56x2[_0xa625[1]](_0xa625[11]);
															 let _0xbc56xb = _0xbc56x2[_0xa625[1]](_0xa625[12]);
															 let _0xbc56xc = _0xbc56xb[_0xa625[1]](_0xa625[13]);
															 let windowWidth = _0xbc56x9[_0xa625[14]] + _0xbc56x9[_0xa625[15]];
															 let measuredValueStr = theme[_0xa625[17]][_0xa625[16]];
															 let animationSpeed = theme[_0xa625[19]][_0xa625[18]];
															 let artistTrack = _0xbc56x7 === _0xa625[20] ? null : _0xa625[21];
															 let GET_AUTH_URL_TIMEOUT = _0xa625[22];
															 let _0xbc56x12 = false;
															 let _0xbc56x13 = document[_0xa625[1]](_0xa625[23]);
															 let HTTP = _0xbc56x2[_0xa625[1]](_0xa625[24]);
															 let _related2 = _0xbc56x13[_0xa625[1]](_0xa625[25]);
															 window[_0xa625[33]](_0xa625[26], () => {
																 if (window[_0xa625[27]] > windowWidth) {
																	 _0xbc56xa[_0xa625[29]][_0xa625[28]](GET_AUTH_URL_TIMEOUT);
																	 if (artistTrack) {
																		 document[_0xa625[30]][_0xa625[29]][_0xa625[28]](artistTrack);
																	 }
																	 /** @type {boolean} */
																	 _0xbc56x12 = true;
																 } else {
																	 if (_0xbc56x12) {
																		 /** @type {boolean} */
																		 _0xbc56x12 = false;
																		 theme[_0xa625[32]]({
																			 elementToTransition : _0xbc56xa,
																			 animationSpeed : animationSpeed
																		 }, function() {
																			 _0xbc56xa[_0xa625[29]][_0xa625[31]](GET_AUTH_URL_TIMEOUT);
																			 if (artistTrack) {
																				 document[_0xa625[30]][_0xa625[29]][_0xa625[31]](artistTrack);
																			 }
																		 });
																	 }
																 }
															 });
															 dataFromControls(controls);
															 gotoNewOfflinePage();
															 handleTunnelError();
															 EventFactory();
															 if (_0xbc56x13) {
																 _0xbc56x13[_0xa625[3]](_0xa625[91])[_0xa625[80]]((canCreateDiscussions) => {
																	 canCreateDiscussions[_0xa625[33]](_0xa625[90], (canCreateDiscussions) => {
																		 gotoNewOfflinePage();
																	 });
																 });
															 }
															 if (HTTP) {
																 HTTP[_0xa625[33]](_0xa625[92], async(canCreateDiscussions) => {
																	 let _0xbc56x3b = canCreateDiscussions[_0xa625[93]];
																	 let fileData = _0xbc56x3b[_0xa625[74]];
																	 let postDateGmt = _0xbc56x3b[_0xa625[45]][_0xbc56x3b[_0xa625[44]]][_0xa625[8]][_0xa625[46]];
																	 const HTTP = document[_0xa625[1]](_0xa625[94]);
																	 const _0xbc56x3f = document[_0xa625[1]](_0xa625[96])[_0xa625[8]][_0xa625[95]];
																	 const newData = _0xbc56x3b[_0xa625[66]][0];
																	 const maxIndexForPotentialMatch = newData[_0xa625[8]][_0xa625[97]];
																	 const reverseIsSingle = !!document[_0xa625[1]](_0xa625[98]);
																	 getFileJSON(fileData);
																	 updateDevicesAfterDelay();
																	 gotoNewOfflinePage();
																	 EventFactory();
																	 _0xbc56x2[_0xa625[1]](_0xa625[40])[_0xa625[50]] = `${_0xa625[51]}${theme[_0xa625[39]][_0xa625[38]](postDateGmt, measuredValueStr)}${_0xa625[52]}`;
																	 handleTunnelError();
																	 let _0xbc56x27 = document[_0xa625[1]](_0xa625[61]);
																	 let GET_AUTH_URL_TIMEOUT = theme[_0xa625[17]][_0xa625[62]];
																	 if (_0xbc56x27) {
																		 Currency[_0xa625[65]](GET_AUTH_URL_TIMEOUT, Currency[_0xa625[64]], _0xa625[99]);
																	 }
																	 for (let i = 1; i <= maxIndexForPotentialMatch; i++) {
																		 const name = newData[_0xa625[8]][`${_0xa625[100]}${i}${_0xa625[36]}`];
																		 const reverseValue = HTTP[_0xa625[1]](`${_0xa625[101]}${name}${_0xa625[102]}`);
																		 if (_0xbc56x3f === _0xa625[103]) {
																			 const HTTP = document[_0xa625[1]](`${_0xa625[104]}${i - 1}${_0xa625[36]}`);
																			 HTTP[_0xa625[1]](`${_0xa625[105]}${name}${_0xa625[102]}`)[_0xa625[90]]();
																		 } else {
																			 const counterHandlers = document[_0xa625[1]](`${_0xa625[106]}${i - 1}${_0xa625[36]}`);
																			 counterHandlers[_0xa625[74]] = name;
																			 counterHandlers[_0xa625[89]](new Event(_0xa625[92]));
																		 }
																		 if (reverseIsSingle && reverseValue) {
																			 let _0xbc56x48 = reverseValue[_0xa625[108]](_0xa625[107]);
																			 let f = _0xbc56x48[_0xa625[1]](_0xa625[109]);
																			 let stripeAPIVersion = f[_0xa625[8]][_0xa625[110]];
																			 f[_0xa625[50]] = `${_0xa625[36]}${stripeAPIVersion}${_0xa625[111]}${reverseValue[_0xa625[74]]}${_0xa625[52]}`;
																			 /** @type {boolean} */
																			 reverseValue[_0xa625[112]] = true;
																		 }
																	 }
																 });
															 }
															 _0xbc56x3[_0xa625[80]]((canCreateDiscussions) => {
																 return canCreateDiscussions[_0xa625[33]](_0xa625[92], (canCreateDiscussions) => {
																	 let _0xbc56x4c = HTTP[_0xa625[1]](`${_0xa625[113]}${_0xbc56x4[_0xa625[74]]}${_0xa625[102]}`);
																	 if (!_0xbc56x5[_0xa625[29]][_0xa625[115]](_0xa625[114]) && _0xbc56x4c) {
																		 HTTP[_0xa625[74]] = _0xbc56x4[_0xa625[74]];
																		 getFileJSON(HTTP[_0xa625[74]]);
																		 EventFactory();
																		 handleTunnelError();
																	 }
																 });
															 });
															 $(_0xa625[30])[_0xa625[119]](_0xa625[118], function(canCreateDiscussions, controls) {
																 dataFromControls(controls);
																 gotoNewOfflinePage();
																 handleTunnelError();
																 EventFactory();
															 });
															 document[_0xa625[33]](_0xa625[120], () => {
																 EventFactory();
															 });
														 }
														 StickyAddtocart();
														 
														 {%- endif -%} }
	
														 function themeStickyAddtocartDestroy() { {%- if settings.dbtfy_sticky_addtocart -%}
														 'use strict';
														 /** @type {!Array} */
														 var _0x1968 = ["dbtfy-sticky_addtocart-destroy", "add", "classList", "body", ".dbtfy-sticky_addtocart", "querySelectorAll", "length", "remove", "forEach"];
														 document[_0x1968[3]][_0x1968[2]][_0x1968[1]](_0x1968[0]);
														 destroyStickyAddtocart();
														 /**
															* @return {undefined}
															*/
														 function destroyStickyAddtocart() {
															 const _0x8f7ex2 = document[_0x1968[5]](_0x1968[4]);
															 if (_0x8f7ex2[_0x1968[6]]) {
																 _0x8f7ex2[_0x1968[8]]((canCreateDiscussions) => {
																	 canCreateDiscussions[_0x1968[7]]();
																 });
															 }
														 };
														 {%- endif -%} } /* end-dbtfy-sticky-addtocart */
	
	
		/* start-dbtfy-synced-variant-image */ function themeSyncedVariantImage(){ {%- if settings.synced_variant_image -%}
		'use strict';
		/** @type {!Array} */
		var _0xdc59 = ["[data-section-type='product-template']", "querySelectorAll", "length", ".product-single__thumb", "sectionId", "dataset", "[id^=ProductJson-]", "querySelector", "innerHTML", "parse", ".product-single__media-group-wrapper .slick", "find", "variants", "beforeChange", "on", "afterChange", ".product-single__thumbnail", "closest", "", "-", "replace", "mediaId", "forEach", ".product-single__variants", "selectedIndex", "options", "featured_media", "id", "push", "option-", "includes", "values", 
		"filter", "shift", "option1", "option2", "option3", ".single-option-selector__radio[name='option", "'][value='", "'], .single-option-selector__radio[name='option", "'] option[value='", "'], .input-color_swatches[data-option-position='option", "']", ".single-option-selector__radio", "checked", "value", "change", "dispatchEvent"];
		/**
		 * @return {undefined}
		 */
		function SyncedVariantImage() {
			/**
			 * @param {?} projectDir
			 * @param {?} server
			 * @return {?}
			 */
			function ideProvider(projectDir, server) {
				const _0xa16fx12 = document[_0xdc59[7]](_0xdc59[23]);
				const newData = _0xa16fx12[_0xdc59[25]][_0xa16fx12[_0xdc59[24]]];
				let maxPixelValue = [];
				server[_0xdc59[12]][_0xdc59[22]]((data) => {
					if (data[_0xdc59[26]] && data[_0xdc59[26]][_0xdc59[27]] && data[_0xdc59[26]][_0xdc59[27]] === projectDir) {
						maxPixelValue[_0xdc59[28]](data);
					}
				});
				let stripeAPIVersion = 3;
				for (; stripeAPIVersion > 1;) {
					if (newData[_0xdc59[5]][`${_0xdc59[29]}${stripeAPIVersion}${_0xdc59[18]}`] != _0xdc59[18]) {
						const pixel = maxPixelValue[_0xdc59[32]]((descriptor) => {
							return Object[_0xdc59[31]](descriptor)[_0xdc59[30]](newData[_0xdc59[5]][`${_0xdc59[29]}${stripeAPIVersion}${_0xdc59[18]}`]);
						});
						maxPixelValue = pixel < 1 ? maxPixelValue : pixel;
					}
					stripeAPIVersion--;
				}
				return maxPixelValue[_0xdc59[33]]();
			}
			/**
			 * @param {?} HTTP
			 * @param {?} action$
			 * @return {undefined}
			 */
			function model(HTTP, action$) {
				const _0xa16fx19 = [action$[_0xdc59[34]], action$[_0xdc59[35]], action$[_0xdc59[36]]];
				_0xa16fx19[_0xdc59[22]]((ms, canCreateDiscussions) => {
					const _0xa16fx1c = HTTP[_0xdc59[1]](`${_0xdc59[37]}${canCreateDiscussions + 1}${_0xdc59[38]}${ms}${_0xdc59[39]}${canCreateDiscussions + 1}${_0xdc59[40]}${ms}${_0xdc59[41]}${canCreateDiscussions + 1}${_0xdc59[38]}${ms}${_0xdc59[42]}`);
					_0xa16fx1c[_0xdc59[22]]((percentiles) => {
						const hises = percentiles[_0xdc59[17]](_0xdc59[43]);
						/** @type {boolean} */
						percentiles[_0xdc59[44]] = true;
						percentiles[_0xdc59[45]] = ms;
						if (hises) {
							hises[_0xdc59[45]] = ms;
							hises[_0xdc59[47]](new Event(_0xdc59[46]));
						}
						percentiles[_0xdc59[47]](new Event(_0xdc59[46]));
					});
				});
			}
			const _0xa16fx2 = document[_0xdc59[1]](_0xdc59[0]);
			if (_0xa16fx2[_0xdc59[2]]) {
				_0xa16fx2[_0xdc59[22]]((body) => {
					const subwikiListsCache = body[_0xdc59[1]](_0xdc59[3]);
					if (subwikiListsCache[_0xdc59[2]] > 1) {
						const stripeAPIVersion = body[_0xdc59[5]][_0xdc59[4]];
						const xhr = body[_0xdc59[7]](_0xdc59[6]);
						const server = xhr ? JSON[_0xdc59[9]](xhr[_0xdc59[8]]) : null;
						if (!server) {
							return;
						}
						const _0xa16fx8 = $(body)[_0xdc59[11]](_0xdc59[10]);
						if (server[_0xdc59[12]][_0xdc59[2]] > 1) {
							let lastTrackInfoUrl = null;
							_0xa16fx8[_0xdc59[14]](_0xdc59[13], function(canCreateDiscussions, isSlidingUp, dontForceConstraints, trackInfoUrl) {
								/** @type {number} */
								lastTrackInfoUrl = trackInfoUrl;
							});
							_0xa16fx8[_0xdc59[14]](_0xdc59[15], function(canCreateDiscussions, isSlidingUp, wikiId) {
								if (lastTrackInfoUrl !== wikiId) {
									return;
								}
								/** @type {number} */
								lastTrackInfoUrl = 0;
								const _0xa16fxe = subwikiListsCache[wikiId][_0xdc59[17]](_0xdc59[16]);
								const projectDir = +_0xa16fxe[_0xdc59[5]][_0xdc59[21]][_0xdc59[20]](`${_0xdc59[18]}${stripeAPIVersion}${_0xdc59[19]}`, _0xdc59[18]);
								const action$ = ideProvider(projectDir, server);
								if (action$) {
									model(body, action$);
								}
							});
						}
					}
				});
			}
		}
		SyncedVariantImage();
		
		{%- endif -%} } /* end-dbtfy-synced-variant-image */
	
			/* start-dbtfy-trust-badge */ function themeTrustBadgeDestroy() { {%- if settings.dbtfy_trust_badge -%}
			'use strict';
			/** @type {!Array} */
			var _0x2c7c = [".dbtfy-trust_badge", "querySelectorAll", "length", "remove", "forEach"];
			destroyTrustBadge();
			/**
			 * @return {undefined}
			 */
			function destroyTrustBadge() {
				const _0xbaa3x2 = document[_0x2c7c[1]](_0x2c7c[0]);
				if (_0xbaa3x2[_0x2c7c[2]]) {
					_0xbaa3x2[_0x2c7c[4]]((canCreateDiscussions) => {
						canCreateDiscussions[_0x2c7c[3]]();
					});
				}
			};
			{%- endif -%} } /* end-dbtfy-trust-badge */
	
			/* start-dbtfy-upsell-bundles */ function themeUpsellBundles(){ {%- if settings.dbtfy_upsell_bundles -%}
	// WARNING! This file contains some subset of JS that is not supported by type inference.
	// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
	'use strict';
	var _0xee0b = [".dbtfy-upsell_bundles", "length", "#UpsellBundles", "position", "data", "sectionId", "productId", "limit", "/recommendations/products?&section_id=", "&product_id=", "&limit=", "", "discount-name", "discount-amount", "discount-type", ".btn-upsell_bundles", ".select-upsell_bundles", ".total-upsell_bundles", ".compare-total-upsell_bundles", ".discount-upsell_bundles", ".discount-upsell_bundles_text", "discount-variant", ".total-wrapper-upsell_bundles", "moneyFormat", "strings", ".image-wrapper-upsell_bundles", 
	"prependTo", ".current-image-upsell_bundles", ".form-wrapper-upsell_bundles", ".current-form-upsell_bundles", "button", ".dbtfy-trust_badge", "insertAfter", "#AddToCartForm--product-template", "click", "index", ".grid-image-", "-", "#upsellBundles-", ":checked", "is", "selected-image-upsell_bundles", "addClass", "active-upsell_bundles", "removeClass", "on", ".checkbox-upsell_bundles", "change", "val", "data-index", "attr", "#imageUpsellBundles-", "siblings", "option:selected", "find", ".dbtfy-upsell-bundle-current-price", 
	".dbtfy-upsell-bundle-price-wrapper", "next", ".dbtfy-upsell-bundle-compare-price", "price", "compare-at-price", "hide", "show", "text-sale", '<span class="money">', "formatMoney", "Currency", "</span>", "html", "ready", ".form-upsell_bundles.active-upsell_bundles", "querySelectorAll", "cartType", "settings", "remove", ".errors", "querySelector", "value", "id", "quantity", "push", "forEach", "add", "addDiscount", "discountCode", "init", "loadingState", "page", "template-cart", "contains", "classList", 
	"body", "update", "ajaxCart", "/cart", "assign", "location", "drawer", "ajaxCart.afterCartLoad", "destroy", "(", "responseText", ")", "message", "status", '<div class="errors qty-error">', "description", "</div>", "after", "addItemFromForm", "upsellBundles", "getItem", "parse", "getAll", "stringify", "setItem", "some", "filter", "removeItem", "percentage", "round", "%", "replace", "saveFormat", ".form-item-upsell_bundles", "closest", "children", "each", "$", "data-discount-applied", "true", "removeAttr", 
	"total", "#currency-list-header[name='dbtfy-custom-currencies']", "shopCurrency", "currentCurrency", "convertAll", "checked", "call", "disabled", "setAttribute", "removeAttribute", "reduce", "from", "discount", "variantIds", "entries", "variant_id", "items", "every", "name", "hasDiscount", "type", "amount", "removeDiscount", "specific-upsell_bundles", "hasClass", "trim", "then", "get", "shopify:section:load"];
	function UpsellBundles() {
		function _0xd9c7xc$jscomp$0() {
			function _0xd9c7x36$jscomp$0(start, stop) {
				let attrVal = null;
				_0xd9c7x11$jscomp$0[_0xee0b[61]]();
				_0xd9c7xf$jscomp$0[_0xee0b[44]](_0xee0b[63]);
				if (stop > start) {
					if (_0xd9c7x13$jscomp$0 === _0xee0b[119]) {
						const stripeAPIVersion = Math[_0xee0b[120]]((stop - start) * 100 / stop);
						if (stripeAPIVersion <= 100) {
							attrVal = `${_0xee0b[11]}${stripeAPIVersion}${_0xee0b[121]}`;
						}
					} else {
						const artistTrack = stop - start;
						if (artistTrack > 0) {
							attrVal = `${_0xee0b[64]}${theme[_0xee0b[66]][_0xee0b[65]](artistTrack, _0xd9c7x14$jscomp$0)}${_0xee0b[67]}`;
						}
					}
					if (attrVal) {
						_0xd9c7x12$jscomp$0[_0xee0b[68]](theme[_0xee0b[24]][_0xee0b[123]][_0xee0b[122]](/\{\{ saved_amount \}\}/, attrVal));
						_0xd9c7xf$jscomp$0[_0xee0b[42]](_0xee0b[63]);
						_0xd9c7x11$jscomp$0[_0xee0b[62]]();
					}
				}
			}
			function _0xd9c7x3b$jscomp$0() {
				let index = 0;
				let size = 0;
				let tmpTimeVal = _0xd9c7x3$jscomp$0[_0xee0b[54]](_0xee0b[124])[_0xee0b[1]];
				let selTimeVal = 0;
				_0xd9c7xe$jscomp$0[_0xee0b[127]](function() {
					var _0xd9c7x3e = $(this)[_0xee0b[125]](_0xee0b[124])[_0xee0b[54]](_0xee0b[46]);
					if (_0xd9c7x3e[_0xee0b[40]](_0xee0b[39])) {
						selTimeVal++;
						index = index + parseInt($(this)[_0xee0b[126]](_0xee0b[53])[_0xee0b[4]](_0xee0b[59]));
						let currentSize = parseInt($(this)[_0xee0b[126]](_0xee0b[53])[_0xee0b[4]](_0xee0b[60]));
						if (currentSize > 0) {
							size = size + currentSize;
						} else {
							size = size + parseInt($(this)[_0xee0b[126]](_0xee0b[53])[_0xee0b[4]](_0xee0b[59]));
						}
					}
				});
				if (tmpTimeVal === selTimeVal) {
					if (_0xd9c7x9$jscomp$0 && _0xd9c7xa$jscomp$0 && _0xd9c7xb$jscomp$0) {
						const i = index;
						switch(_0xd9c7xb$jscomp$0) {
							case _0xee0b[121]:
								index = index - index / 100 * _0xd9c7xa$jscomp$0;
								break;
							case _0xee0b[128]:
								index = index - _0xd9c7xa$jscomp$0 * 100;
								break;
						}
						if (index > 0) {
							size = i;
							_0xd9c7x3$jscomp$0[_0xee0b[50]](_0xee0b[129], _0xee0b[130]);
						} else {
							index = i;
							_0xd9c7x3$jscomp$0[_0xee0b[131]](_0xee0b[129]);
						}
					}
				}
				_0xd9c7xf$jscomp$0[_0xee0b[4]](_0xee0b[132], index)[_0xee0b[68]](`${_0xee0b[64]}${theme[_0xee0b[66]][_0xee0b[65]](index, _0xd9c7x14$jscomp$0)}${_0xee0b[67]}`);
				if (index < size) {
					_0xd9c7x10$jscomp$0[_0xee0b[4]](_0xee0b[132], size)[_0xee0b[68]](`${_0xee0b[64]}${theme[_0xee0b[66]][_0xee0b[65]](size, _0xd9c7x14$jscomp$0)}${_0xee0b[67]}`);
					_0xd9c7x10$jscomp$0[_0xee0b[62]]();
				} else {
					_0xd9c7x10$jscomp$0[_0xee0b[61]]();
				}
				_0xd9c7x36$jscomp$0(index, size);
				var $global = $(_0xee0b[133]);
				var caller = theme[_0xee0b[24]][_0xee0b[134]];
				if ($global[_0xee0b[1]] && caller && Currency[_0xee0b[135]]) {
					Currency[_0xee0b[136]](caller, Currency[_0xee0b[135]]);
				}
			}
			function _0xd9c7x43$jscomp$0() {
				const _0xd9c7x44 = document[_0xee0b[76]](_0xee0b[15]);
				const addedGroups = document[_0xee0b[71]](_0xee0b[46]);
				const activeGroups = [][_0xee0b[117]][_0xee0b[138]](addedGroups, function(canCreateDiscussions) {
					return !canCreateDiscussions[_0xee0b[137]];
				});
				if (addedGroups[_0xee0b[1]] === activeGroups[_0xee0b[1]]) {
					_0xd9c7x44[_0xee0b[90]][_0xee0b[82]](_0xee0b[139]);
					_0xd9c7x44[_0xee0b[140]](_0xee0b[139], _0xee0b[139]);
				} else {
					_0xd9c7x44[_0xee0b[90]][_0xee0b[74]](_0xee0b[139]);
					_0xd9c7x44[_0xee0b[141]](_0xee0b[139], _0xee0b[139]);
				}
			}
			function _0xd9c7x48$jscomp$0() {
				const data = document[_0xee0b[71]](_0xee0b[46]);
				const editBoardDataId = Boolean(_0xd9c7x3$jscomp$0[_0xee0b[50]](_0xee0b[129]));
				let _0xd9c7x48 = false;
				const editBoardId = Array[_0xee0b[143]](data)[_0xee0b[142]]((res, state) => {
					return state[_0xee0b[137]] ? res + 1 : res;
				}, 0);
				if (editBoardId === data[_0xee0b[1]] && editBoardDataId) {
					_0xd9c7x48 = true;
				}
				return _0xd9c7x48;
			}
			function _0xd9c7x4e$jscomp$0() {
				const isnan = [];
				_0xd9c7xe$jscomp$0[_0xee0b[127]](function() {
					const _0xd9c7x50 = $(this);
					const o = _0xd9c7x50[_0xee0b[48]]();
					isnan[_0xee0b[80]](+o);
				});
				return isnan;
			}
			function _0xd9c7x51$jscomp$0(primaryTxHex) {
				const _0xd9c7x52 = _0xd9c7x32$jscomp$0[_0xee0b[113]]();
				_0xd9c7x52[_0xee0b[81]]((canCreateDiscussions) => {
					const _0xd9c7x54 = canCreateDiscussions[_0xee0b[144]];
					const target = canCreateDiscussions[_0xee0b[145]][_0xee0b[142]](function(eventsDict, event) {
						eventsDict[event] = (eventsDict[event] || 0) + 1;
						return eventsDict;
					}, {});
					const _0xd9c7x58 = Object[_0xee0b[146]](target);
					const _0xd9c7x59 = _0xd9c7x58[_0xee0b[149]](([Infinity, targetStamp]) => {
						return primaryTxHex[_0xee0b[148]][_0xee0b[116]]((depsStamps) => {
							return depsStamps[_0xee0b[147]] === +Infinity && depsStamps[_0xee0b[79]] >= targetStamp;
						});
					});
					if (_0xd9c7x59) {
						if (!theme[_0xee0b[84]][_0xee0b[151]](_0xd9c7x54[_0xee0b[150]])) {
							theme[_0xee0b[84]][_0xee0b[83]](_0xd9c7x54[_0xee0b[150]], _0xd9c7x54[_0xee0b[152]], _0xd9c7x54[_0xee0b[153]]);
						}
					} else {
						theme[_0xee0b[84]][_0xee0b[154]](_0xd9c7x54[_0xee0b[150]]);
					}
				});
				theme[_0xee0b[84]][_0xee0b[85]]();
			}
			var _0xd9c7xd$jscomp$0 = $(_0xee0b[15]);
			var _0xd9c7xe$jscomp$0 = $(_0xee0b[16]);
			var _0xd9c7xf$jscomp$0 = $(_0xee0b[17]);
			let _0xd9c7x10$jscomp$0 = $(_0xee0b[18]);
			let _0xd9c7x11$jscomp$0 = $(_0xee0b[19]);
			let _0xd9c7x12$jscomp$0 = $(_0xee0b[20]);
			let _0xd9c7x13$jscomp$0 = $(_0xee0b[22])[_0xee0b[4]](_0xee0b[21]);
			let _0xd9c7x14$jscomp$0 = theme[_0xee0b[24]][_0xee0b[23]];
			$(_0xee0b[27])[_0xee0b[26]](_0xee0b[25]);
			$(_0xee0b[29])[_0xee0b[26]](_0xee0b[28]);
			if (_0xd9c7x4$jscomp$0 === _0xee0b[30]) {
				if ($(_0xee0b[31])[_0xee0b[1]]) {
					_0xd9c7x2$jscomp$0[_0xee0b[32]](_0xee0b[31]);
				} else {
					_0xd9c7x2$jscomp$0[_0xee0b[32]](_0xee0b[33]);
				}
			}
			$(_0xee0b[46])[_0xee0b[45]](_0xee0b[34], function() {
				var $realtime = $(this);
				var stripeAPIVersion = $realtime[_0xee0b[4]](_0xee0b[6]);
				var allowedStr = $realtime[_0xee0b[4]](_0xee0b[35]);
				var $gBCRBottom = $(`${_0xee0b[36]}${stripeAPIVersion}${_0xee0b[37]}${allowedStr}${_0xee0b[11]}`);
				var $existing_results = $(`${_0xee0b[38]}${stripeAPIVersion}${_0xee0b[37]}${allowedStr}${_0xee0b[11]}`);
				if ($realtime[_0xee0b[40]](_0xee0b[39])) {
					$gBCRBottom[_0xee0b[42]](_0xee0b[41]);
					$existing_results[_0xee0b[42]](_0xee0b[43]);
				} else {
					$gBCRBottom[_0xee0b[44]](_0xee0b[41]);
					$existing_results[_0xee0b[44]](_0xee0b[43]);
				}
				_0xd9c7x43$jscomp$0();
				_0xd9c7x3b$jscomp$0();
			});
			_0xd9c7xe$jscomp$0[_0xee0b[45]](_0xee0b[47], function() {
				var stripeAPIVersion = $(this)[_0xee0b[48]]();
				var allowedStr = $(this)[_0xee0b[50]](_0xee0b[49]);
				var $realtime = $(`${_0xee0b[51]}${stripeAPIVersion}${_0xee0b[37]}${allowedStr}${_0xee0b[11]}`);
				var _0xd9c7x1b = $realtime[_0xee0b[52]]();
				let _0xd9c7x1c = $(this)[_0xee0b[54]](_0xee0b[53]);
				let HTTP = $(this)[_0xee0b[57]](_0xee0b[56])[_0xee0b[54]](_0xee0b[55]);
				let agent = $(this)[_0xee0b[57]](_0xee0b[56])[_0xee0b[54]](_0xee0b[58]);
				let actualFloor = _0xd9c7x1c[_0xee0b[4]](_0xee0b[59]);
				let expectedCeil = _0xd9c7x1c[_0xee0b[4]](_0xee0b[60]);
				_0xd9c7x1b[_0xee0b[61]]();
				$realtime[_0xee0b[62]]();
				if (actualFloor > expectedCeil) {
					HTTP[_0xee0b[44]](_0xee0b[63]);
					agent[_0xee0b[61]]();
				} else {
					HTTP[_0xee0b[42]](_0xee0b[63]);
					agent[_0xee0b[62]]();
				}
				HTTP[_0xee0b[68]](`${_0xee0b[64]}${theme[_0xee0b[66]][_0xee0b[65]](actualFloor, _0xd9c7x14$jscomp$0)}${_0xee0b[67]}`);
				agent[_0xee0b[68]](`${_0xee0b[64]}${theme[_0xee0b[66]][_0xee0b[65]](expectedCeil, _0xd9c7x14$jscomp$0)}${_0xee0b[67]}`);
				_0xd9c7x3b$jscomp$0();
			});
			$(document)[_0xee0b[69]](function() {
				_0xd9c7x3b$jscomp$0();
			});
			_0xd9c7xd$jscomp$0[_0xee0b[45]](_0xee0b[34], function() {
				const _0xd9c7x21$jscomp$0 = $(this);
				const _0xd9c7x22$jscomp$0 = document[_0xee0b[71]](_0xee0b[70]);
				const _0xd9c7x23$jscomp$0 = theme[_0xee0b[73]][_0xee0b[72]];
				_0xd9c7x2$jscomp$0[_0xee0b[54]](_0xee0b[75])[_0xee0b[74]]();
				const _0xd9c7x24$jscomp$0 = [];
				_0xd9c7x22$jscomp$0[_0xee0b[81]]((canCreateDiscussions) => {
					const _0xd9c7x26 = canCreateDiscussions[_0xee0b[76]](_0xee0b[16]);
					const value = +_0xd9c7x26[_0xee0b[77]];
					const _0xd9c7x28 = _0xd9c7x24$jscomp$0[_0xee0b[54]]((htmlvalue) => {
						return htmlvalue[_0xee0b[78]] === value;
					});
					if (_0xd9c7x28) {
						_0xd9c7x28[_0xee0b[79]]++;
					} else {
						_0xd9c7x24$jscomp$0[_0xee0b[80]]({
							id : value,
							quantity : 1
						});
					}
				});
				ShopifyAPI[_0xee0b[109]]({
					data : {
						items : _0xd9c7x24$jscomp$0
					},
					forms : _0xd9c7x22$jscomp$0
				}, (canCreateDiscussions) => {
					const _0xd9c7x2b = _0xd9c7x48$jscomp$0();
					if (_0xd9c7x2b) {
						const _0xd9c7x2c = _0xd9c7x4e$jscomp$0();
						const artistTrack = {
							productId : _0xd9c7x6$jscomp$0,
							variantIds : _0xd9c7x2c,
							discount : {
								name : _0xd9c7x9$jscomp$0,
								type : _0xd9c7xb$jscomp$0,
								amount : _0xd9c7xa$jscomp$0
							}
						};
						_0xd9c7x32$jscomp$0[_0xee0b[74]](_0xd9c7x6$jscomp$0);
						_0xd9c7x32$jscomp$0[_0xee0b[82]](artistTrack);
						if (_0xd9c7x9$jscomp$0 && _0xd9c7xb$jscomp$0 && _0xd9c7xa$jscomp$0) {
							theme[_0xee0b[84]][_0xee0b[83]](_0xd9c7x9$jscomp$0, _0xd9c7xb$jscomp$0, _0xd9c7xa$jscomp$0);
						}
						theme[_0xee0b[84]][_0xee0b[85]]();
					}
					theme[_0xee0b[86]][_0xee0b[85]](_0xd9c7x21$jscomp$0);
					if (_0xd9c7x23$jscomp$0 === _0xee0b[87]) {
						if (document[_0xee0b[91]][_0xee0b[90]][_0xee0b[89]](_0xee0b[88])) {
							theme[_0xee0b[93]][_0xee0b[92]]();
						} else {
							window[_0xee0b[96]][_0xee0b[95]](_0xee0b[94]);
						}
					} else {
						if (_0xd9c7x23$jscomp$0 === _0xee0b[97]) {
							theme[_0xee0b[93]][_0xee0b[92]]();
							$(_0xee0b[91])[_0xee0b[45]](_0xee0b[98], function(canCreateDiscussions, isSlidingUp) {
								theme[_0xee0b[86]][_0xee0b[99]](_0xd9c7x21$jscomp$0);
							});
						}
					}
				}, (_0xd9c7x2f$jscomp$0, _0xd9c7x30$jscomp$0, _0xd9c7x25$jscomp$1) => {
					const _0xd9c7x31$jscomp$0 = eval(`${_0xee0b[100]}${_0xd9c7x2f$jscomp$0[_0xee0b[101]]}${_0xee0b[102]}`);
					theme[_0xee0b[86]][_0xee0b[99]](_0xd9c7x21$jscomp$0);
					if (_0xd9c7x31$jscomp$0[_0xee0b[103]]) {
						if (_0xd9c7x31$jscomp$0[_0xee0b[104]] === 422) {
							_0xd9c7x21$jscomp$0[_0xee0b[108]](`${_0xee0b[105]}${_0xd9c7x31$jscomp$0[_0xee0b[106]]}${_0xee0b[107]}`);
						}
					}
				});
			});
			const _0xd9c7x32$jscomp$0 = {
				getAll : function() {
					const _moduleMap = JSON[_0xee0b[112]](sessionStorage[_0xee0b[111]](_0xee0b[110]));
					if (!_moduleMap) {
						return [];
					}
					return _moduleMap;
				},
				get : function(do_not_create) {
					const _0xd9c7x33 = JSON[_0xee0b[112]](sessionStorage[_0xee0b[111]](_0xee0b[110]));
					if (!_0xd9c7x33) {
						return null;
					}
					return _0xd9c7x33[_0xee0b[54]]((canCreateDiscussions) => {
						return canCreateDiscussions[_0xee0b[6]] === +do_not_create;
					});
				},
				add : function(value) {
					const data = this[_0xee0b[113]]() || [];
					data[_0xee0b[80]](value);
					sessionStorage[_0xee0b[115]](_0xee0b[110], JSON[_0xee0b[114]](data));
				},
				has : function(thIs) {
					const _0xd9c7x33 = this[_0xee0b[113]]();
					if (!_0xd9c7x33) {
						return false;
					}
					return _0xd9c7x33[_0xee0b[116]]((canCreateDiscussions) => {
						return canCreateDiscussions[_0xee0b[6]] === +thIs;
					});
				},
				remove : function(animation) {
					const _0xd9c7x33 = this[_0xee0b[113]]();
					if (!_0xd9c7x33) {
						return;
					}
					const data = _0xd9c7x33[_0xee0b[117]]((object) => {
						return object[_0xee0b[6]] !== animation;
					});
					if (!data[_0xee0b[1]]) {
						sessionStorage[_0xee0b[118]](_0xee0b[110]);
					} else {
						sessionStorage[_0xee0b[115]](_0xee0b[110], JSON[_0xee0b[114]](data));
					}
					return true;
				}
			};
			$(_0xee0b[91])[_0xee0b[45]](_0xee0b[98], function(canCreateDiscussions, primaryTxHex) {
				_0xd9c7x51$jscomp$0(primaryTxHex);
			});
		}
		var _0xd9c7x2$jscomp$0 = $(_0xee0b[0]);
		if (!_0xd9c7x2$jscomp$0[_0xee0b[1]]) {
			return;
		}
		var _0xd9c7x3$jscomp$0 = $(_0xee0b[2]);
		var _0xd9c7x4$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[3]);
		var _0xd9c7x5$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[5]);
		var _0xd9c7x6$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[6]);
		var _0xd9c7x7$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[7]);
		var _0xd9c7x8$jscomp$0 = `${_0xee0b[8]}${_0xd9c7x5$jscomp$0}${_0xee0b[9]}${_0xd9c7x6$jscomp$0}${_0xee0b[10]}${_0xd9c7x7$jscomp$0}${_0xee0b[11]}`;
		const _0xd9c7x9$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[12]);
		const _0xd9c7xa$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[13]);
		const _0xd9c7xb$jscomp$0 = _0xd9c7x3$jscomp$0[_0xee0b[4]](_0xee0b[14]);
		if (_0xd9c7x3$jscomp$0[_0xee0b[156]](_0xee0b[155])) {
			_0xd9c7xc$jscomp$0();
		} else {
			$[_0xee0b[159]](_0xd9c7x8$jscomp$0)[_0xee0b[158]](function(delete_behavior_form) {
				var artistTrack = $(delete_behavior_form)[_0xee0b[54]](_0xee0b[2])[_0xee0b[68]]();
				if (artistTrack && artistTrack[_0xee0b[157]]() !== _0xee0b[11]) {
					_0xd9c7x3$jscomp$0[_0xee0b[68]](artistTrack);
					_0xd9c7xc$jscomp$0();
				}
			});
		}
		$(document)[_0xee0b[45]](_0xee0b[160], function() {
			_0xd9c7xc$jscomp$0();
			sessionStorage[_0xee0b[118]](_0xee0b[110]);
		});
	}
	UpsellBundles();
	
	{%- endif -%} }
	
	function themeUpsellBundlesDestroy() { {%- if settings.dbtfy_upsell_bundles -%}
	'use strict';
	/** @type {!Array} */
	var _0xe000 = [".dbtfy-upsell_bundles", "querySelectorAll", "length", "remove", "forEach"];
	destroyUpsellBundles();
	/**
	 * @return {undefined}
	 */
	function destroyUpsellBundles() {
		const _0xdac5x2 = document[_0xe000[1]](_0xe000[0]);
		if (_0xdac5x2[_0xe000[2]]) {
			_0xdac5x2[_0xe000[4]]((canCreateDiscussions) => {
				canCreateDiscussions[_0xe000[3]]();
			});
		}
	};
	{%- endif -%} } /* end-dbtfy-upsell-bundles */
	
	
	
	
	/* start-dbtfy-upsell-popup */ function themeUpsellPopup() { {%- if settings.dbtfy_upsell_popup -%}
	'use strict';
	/** @type {!Array} */
	var _0xae7d = [".dbtfy-upsell_popup", "querySelector", "isCartLoaded", "dbtfy:cartLoaded", "addEventListener", ".up-modal", "querySelectorAll", ".upsell-popup-item", "length", "remove", "forEach", "productTrigger", "dataset", "productOffer", "push", "map", "from", "flat", " OR ", "join", "handle:", "", "/search?view=product-info&type=product&q=", "text", "then", "POST", "same-origin", "application/json", "parse", "popupWidth", "popupDescription", "cartText", "checkoutText", "textAlignment", "range", 
	"title", "icons", "buttonLabel", "discountName", "discountAmount", "discountType", "blockId", "handle", "some", "items", "cart", "find", "general", "id", "available", "featured_image", "aspect_ratio", "alt", '\r\n                <div class="product--wrapper media-wrapper up-img up-img-', '"\r\n                     style="', "display: none;", "padding-top: ", '%;">\r\n                <img class="product--image media lazyload"\r\n                     data-src="', "src", '"\r\n                     data-sizes="auto"\r\n                     data-widths="[180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 2048]"\r\n                     data-aspectratio="', 
	'"\r\n                    alt="', '"\r\n                    data-image>\r\n              </div>\r\n              ', "variants", '\r\n                <option value="', '" data-variant-title="', '" data-variant-price="', "price", '">\r\n                  ', " - ", "moneyFormat", "strings", "formatMoney", "Currency", "\r\n                </option>\r\n              ", '\r\n              <option disabled="disabled">\r\n                ', "soldOut", "\r\n              </option>\r\n            ", "description", 
	'\r\n            <div class="card card-full tab">\r\n              <button id="tab-button-', '" class="card-header tab-header up-btn-description"\r\n                      type="button"\r\n                      role="tab"\r\n                      aria-controls="tab-content-', '"\r\n                      aria-selected="false">\r\n                <span class="tab-header-title">', '</span>\r\n              </button>\r\n\r\n              <div id="tab-content-', '" class="card-body tab-body" role="tabpanel" aria-labelledby="tab-button-', 
	'">\r\n                <div class="tab-content rte">\r\n                  ', "\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ", '\r\n            <div class="modal-footer">\r\n                <div class="grid">\r\n                    <div class="grid__item six-twelfths">\r\n                        ', '\r\n                            <button type="button" class="up-cart-link"\r\n                                    data-modal-close="#UpsellPopup-', '">\r\n                                <small class="btn__text">\r\n                                    ', 
	"\r\n                                </small>\r\n                          </button>\r\n                        ", '\r\n                    </div>\r\n\r\n                    <div class="grid__item six-twelfths text-right">\r\n                        ', '\r\n                            <button type="button" class="up-checkout-link">\r\n                                <small class="btn__text">\r\n                                    ', "\r\n                                </small>\r\n                            </button>\r\n                        ", 
	"\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          ", '\r\n            <div id="UpsellPopup-', '"\r\n                 class="modal up-modal', " up-offer-accepted", '"\r\n                 role="dialog"\r\n                 data-offer="', '"\r\n                 ', '\r\n                   data-discount-name="', '"\r\n                   data-discount-type="', '"\r\n                   data-discount-amount="', '>\r\n\r\n                <div class="modal-dialog ', 
	'">\r\n                    <div class="overlay-content modal-content modal-content-upsell_popup" aria-hidden="true" tabindex="-1">\r\n                        <div class="modal-header">\r\n                            <h4 class="modal-title">\r\n                              <a href="', "url", '">', '</a>\r\n                            </h4>\r\n\r\n                            <button type="button"\r\n                                    class="modal-close btn btn-square-small"\r\n                                    title="', 
	"closeText", '"\r\n                                    aria-label="', '"\r\n                                    data-modal-close="#UpsellPopup-', '">\r\n                              <span class="', "icon", "settings", '" aria-hidden="true">close</span>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div class="progress">\r\n                            <div class="progress-bar up-progress-bar"\r\n                                 role="progressbar"\r\n                                 style="width: ', 
	'%;">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class="modal-body">\r\n                            <div class="grid grid-small grid-spacer align-center">\r\n                                <div class="grid__item large--six-twelfths medium--six-twelfths">\r\n                                    ', '\r\n                                </div>\r\n\r\n                                <div class="grid__item large--six-twelfths medium--six-twelfths ', 
	'">\r\n                                    <div class="rte">\r\n                                      ', '<h3 class="title-upsell_popup">', "</h3>", "\r\n\r\n                                      ", '\r\n                                    </div>\r\n\r\n                                    <form method="post" action="/cart/add" class="up-form" enctype="multipart/form-data">\r\n                                        <input type="hidden" name="form_type" value="product">\r\n                                        <input type="hidden" name="utf8" value="\u2713">\r\n\r\n                                        <select name="id" class="up-select select--small full', 
	" hide", '">\r\n                                            ', "\r\n                                        </select>\r\n\r\n                                        ", '\r\n                                            <button type="submit" class="btn btn--primary btn--full up-btn-offer spacer-top">\r\n                                                <span class="btn__text">\r\n                                                    ', '\r\n                                                        <span class="', 
	'" aria-hidden="true">\r\n                                                            ', "\r\n                                                        </span>\r\n                                                    ", "\r\n\r\n                                                    ", "\r\n                                                </span>\r\n                                            </button>\r\n                                        ", "\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        ", 
	"\r\n\r\n                        ", '\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class="overlay-modal overlay-backdrop"></div>\r\n          ', "afterbegin", "insertAdjacentHTML", "init", "tabs", "modal", "discountCode", "initForm", "loadingState", "ajaxCart", "form[action*='/cart/add']", "#UpsellPopup-general", ".up-checkout-link", ".up-btn-offer", ".up-progress-bar", "cartType", "submit", "off", "data-has-submit-listener", "true", "attr", 
	"on", "dbtfy:formSubmitted", "form", "detail", "product-id", "data", "[data-product-id]", "closest", "#UpsellPopup-", "up-form", "hasClass", "preventDefault", ".up-img", ".up-select", ".up-form", "offer", "discount-name", "discount-type", "discount-amount", "product_id", "up-offer-accepted", "click", "change", "modal.close", "destroy", "addClass", "upsell-popup", "addDiscount", "width", "100%", "css", "close", "update", "dbtfy:upsellPopupLoaded", "dispatchEvent", "75%", "dbtfySkipCart", "goToCheckoutWithDiscount", 
	"addItemFromForm", "open", "page", "template-cart", "contains", "classList", "body", "/cart", "assign", "location", "drawer", "js-drawer-open", "#CartDrawer", "ajaxCart.afterCartLoad", "val", ".up-img-", "hide", "show", "removeAttr", "get", "getStoredDiscounts", "role", "hasOwnProperty", "filter", "productId", "name", "removeDiscount", "afterRecommendationLoad", "cartUpsellLoad", "QuickViewLoaded"];
	let upsellPopupLoadedFirst = true;
	/**
	 * @return {undefined}
	 */
	async function UpsellPopup() {
		/**
		 * @return {undefined}
		 */
		async function getRevisionFromSurvey() {
			const _0xdfbfx5 = _related2[_0xae7d[6]](_0xae7d[5]);
			const potentialElements = _related2[_0xae7d[6]](_0xae7d[7]);
			if (_0xdfbfx5[_0xae7d[8]]) {
				_0xdfbfx5[_0xae7d[10]]((canCreateDiscussions) => {
					canCreateDiscussions[_0xae7d[9]]();
				});
			}
			if (!potentialElements[_0xae7d[8]]) {
				return;
			}
			const _0xdfbfx8 = Array[_0xae7d[16]](potentialElements)[_0xae7d[15]]((canCreateDiscussions) => {
				const data = canCreateDiscussions[_0xae7d[12]][_0xae7d[11]];
				const pivot = canCreateDiscussions[_0xae7d[12]][_0xae7d[13]];
				const packByNumType = [];
				if (data) {
					packByNumType[_0xae7d[14]](data);
				}
				if (pivot) {
					packByNumType[_0xae7d[14]](pivot);
				}
				return packByNumType;
			});
			const visitedImports = _0xdfbfx8[_0xae7d[17]]();
			const _0xdfbfxe = [...new Set(visitedImports)];
			const stripeAPIVersion = _0xdfbfxe[_0xae7d[15]]((algoCode) => {
				return `${_0xae7d[20]}${algoCode}${_0xae7d[21]}`;
			})[_0xae7d[19]](_0xae7d[18]);
			const YAHOO_FEED_API_URL = `${_0xae7d[22]}${stripeAPIVersion}${_0xae7d[21]}`;
			const data = await fetch(YAHOO_FEED_API_URL, {
				method : _0xae7d[25],
				credentials : _0xae7d[26],
				headers : {
					"Accept" : _0xae7d[27],
					"Content-Type" : _0xae7d[27]
				}
			})[_0xae7d[24]]((canCreateDiscussions) => {
				return canCreateDiscussions[_0xae7d[23]]();
			});
			const _0xdfbfx14 = JSON[_0xae7d[28]](data);
			const SP = _related2[_0xae7d[12]][_0xae7d[29]];
			const term = _related2[_0xae7d[12]][_0xae7d[30]];
			const title = _related2[_0xae7d[12]][_0xae7d[31]];
			const about = _related2[_0xae7d[12]][_0xae7d[32]];
			const _0xdfbfx19 = _related2[_0xae7d[12]][_0xae7d[33]];
			const _0xdfbfx1a = _related2[_0xae7d[12]][_0xae7d[34]];
			const relationName = Array[_0xae7d[16]](potentialElements)[_0xae7d[15]]((canCreateDiscussions) => {
				const appVersion = canCreateDiscussions[_0xae7d[12]][_0xae7d[35]];
				const _0xdfbfx1d = canCreateDiscussions[_0xae7d[12]][_0xae7d[23]];
				const vvv_5 = canCreateDiscussions[_0xae7d[12]][_0xae7d[11]];
				const undefined = canCreateDiscussions[_0xae7d[12]][_0xae7d[13]];
				const version = canCreateDiscussions[_0xae7d[12]][_0xae7d[36]];
				const directory = canCreateDiscussions[_0xae7d[12]][_0xae7d[37]];
				const type = canCreateDiscussions[_0xae7d[12]][_0xae7d[38]];
				const view = canCreateDiscussions[_0xae7d[12]][_0xae7d[39]];
				const item = canCreateDiscussions[_0xae7d[12]][_0xae7d[40]];
				const ms = canCreateDiscussions[_0xae7d[12]][_0xae7d[41]];
				const _0xdfbfx24 = theme[_0xae7d[45]][_0xae7d[44]][_0xae7d[43]]((rankObject) => {
					return rankObject[_0xae7d[42]] === undefined;
				});
				const $base = _0xdfbfx14[_0xae7d[46]]((lanetext) => {
					return lanetext[_0xae7d[42]] === vvv_5;
				});
				const hostOrigin = _0xdfbfx14[_0xae7d[46]]((rankObject) => {
					return rankObject[_0xae7d[42]] === undefined;
				});
				if (!hostOrigin) {
					return _0xae7d[21];
				}
				const stripeAPIVersion = !vvv_5 ? _0xae7d[47] : $base ? $base[_0xae7d[48]] : _0xae7d[21];
				const _0xdfbfx2a = hostOrigin[_0xae7d[49]];
				if (!_0xdfbfx2a) {
					return _0xae7d[21];
				}
				let _0xdfbfx2b = 0;
				const _0xdfbfx2c = hostOrigin[_0xae7d[62]][_0xae7d[15]]((targetOrigin) => {
					_0xdfbfx2b++;
					if (targetOrigin[_0xae7d[49]]) {
						const _0xdfbfx2e = targetOrigin[_0xae7d[50]] ? targetOrigin[_0xae7d[50]] : hostOrigin[_0xae7d[50]];
						const SP = _0xdfbfx2e[_0xae7d[51]] || 0;
						const radsqr = _0xdfbfx2e[_0xae7d[52]];
						return `${_0xae7d[53]}${targetOrigin[_0xae7d[48]]}${_0xae7d[54]}${_0xdfbfx2b !== 1 ? _0xae7d[55] : _0xae7d[21]}${_0xae7d[56]}${SP !== 0 ? 1 / SP * 100 : 0}${_0xae7d[57]}${_0xdfbfx2e[_0xae7d[58]]}${_0xae7d[59]}${SP}${_0xae7d[60]}${radsqr}${_0xae7d[61]}`;
					} else {
						_0xdfbfx2b--;
					}
					return _0xae7d[21];
				})[_0xae7d[19]](_0xae7d[21]);
				const _0xdfbfx31 = hostOrigin[_0xae7d[62]][_0xae7d[15]]((canCreateDiscussions) => {
					if (canCreateDiscussions[_0xae7d[49]]) {
						return `${_0xae7d[63]}${canCreateDiscussions[_0xae7d[48]]}${_0xae7d[64]}${canCreateDiscussions[_0xae7d[35]]}${_0xae7d[65]}${canCreateDiscussions[_0xae7d[66]]}${_0xae7d[67]}${canCreateDiscussions[_0xae7d[35]]}${_0xae7d[68]}${theme[_0xae7d[72]][_0xae7d[71]](canCreateDiscussions[_0xae7d[66]], theme[_0xae7d[70]][_0xae7d[69]])}${_0xae7d[73]}`;
					}
					return `${_0xae7d[74]}${canCreateDiscussions[_0xae7d[35]]}${_0xae7d[68]}${theme[_0xae7d[70]][_0xae7d[75]]}${_0xae7d[76]}`;
				})[_0xae7d[19]](_0xae7d[21]);
				const _0xdfbfx32 = hostOrigin[_0xae7d[77]] || term ? `${_0xae7d[78]}${ms}${_0xae7d[79]}${ms}${_0xae7d[80]}${term}${_0xae7d[81]}${ms}${_0xae7d[82]}${ms}${_0xae7d[83]}${hostOrigin[_0xae7d[77]]}${_0xae7d[84]}` : _0xae7d[21];
				const _0xdfbfx33 = title || about ? `${_0xae7d[85]}${title ? `${_0xae7d[86]}${stripeAPIVersion}${_0xae7d[87]}${title}${_0xae7d[88]}` : _0xae7d[21]}${_0xae7d[89]}${about ? `${_0xae7d[90]}${about}${_0xae7d[91]}` : _0xae7d[21]}${_0xae7d[92]}` : _0xae7d[21];
				const revision = `${_0xae7d[93]}${stripeAPIVersion}${_0xae7d[94]}${_0xdfbfx24 ? _0xae7d[95] : _0xae7d[21]}${_0xae7d[96]}${hostOrigin[_0xae7d[48]]}${_0xae7d[97]}${type && item && view ? `${_0xae7d[98]}${type}${_0xae7d[99]}${item}${_0xae7d[100]}${view}${_0xae7d[97]}` : _0xae7d[21]}${_0xae7d[101]}${SP}${_0xae7d[102]}${hostOrigin[_0xae7d[103]]}${_0xae7d[104]}${hostOrigin[_0xae7d[35]]}${_0xae7d[105]}${theme[_0xae7d[70]][_0xae7d[106]]}${_0xae7d[107]}${theme[_0xae7d[70]][_0xae7d[106]]}${_0xae7d[108]}${stripeAPIVersion}${_0xae7d[109]}${theme[_0xae7d[111]][_0xae7d[110]]}${_0xae7d[112]}${_0xdfbfx1a}${_0xae7d[113]}${_0xdfbfx2c}${_0xae7d[114]}${_0xdfbfx19}${_0xae7d[115]}${appVersion ? 
				`${_0xae7d[116]}${appVersion}${_0xae7d[117]}` : _0xae7d[21]}${_0xae7d[118]}${_0xdfbfx1d ? _0xdfbfx1d : _0xae7d[21]}${_0xae7d[119]}${hostOrigin[_0xae7d[62]][_0xae7d[8]] <= 1 ? _0xae7d[120] : _0xae7d[21]}${_0xae7d[121]}${_0xdfbfx31}${_0xae7d[122]}${directory ? `${_0xae7d[123]}${version ? `${_0xae7d[124]}${theme[_0xae7d[111]][_0xae7d[110]]}${_0xae7d[125]}${version}${_0xae7d[126]}` : _0xae7d[21]}${_0xae7d[127]}${directory}${_0xae7d[128]}` : _0xae7d[21]}${_0xae7d[129]}${_0xdfbfx32}${_0xae7d[130]}${_0xdfbfx33}${_0xae7d[131]}`;
				return revision;
			})[_0xae7d[19]](_0xae7d[21]);
			_related2[_0xae7d[133]](_0xae7d[132], relationName);
		}
		/**
		 * @return {undefined}
		 */
		function removeaToolTip() {
			/**
			 * @param {?} name
			 * @param {!Object} object
			 * @param {boolean} renderHeaders
			 * @return {undefined}
			 */
			function remove(name, object, renderHeaders) {
				/**
				 * @return {undefined}
				 */
				function removeFromPanes() {
					_msgSibling[_0xae7d[148]](_0xae7d[173]);
					linkCont[_0xae7d[148]](_0xae7d[173]);
					_0xdfbfx46[_0xae7d[148]](_0xae7d[174]);
					agent[_0xae7d[148]](_0xae7d[175]);
					theme[_0xae7d[139]][_0xae7d[176]](_msgSibling);
				}
				/**
				 * @return {undefined}
				 */
				function success() {
					ShopifyAPI[_0xae7d[190]](messages, () => {
						theme[_0xae7d[136]][_0xae7d[191]](agent);
					});
				}
				/**
				 * @param {?} data
				 * @return {undefined}
				 */
				function emit(data) {
					data[_0xae7d[208]](_0xae7d[149]);
					if (_0xdfbfx3b === _0xae7d[192]) {
						if (document[_0xae7d[196]][_0xae7d[195]][_0xae7d[194]](_0xae7d[193])) {
							data[_0xae7d[209]](0)[_0xae7d[186]](new Event(_0xae7d[147]));
						} else {
							data[_0xae7d[209]](0)[_0xae7d[147]]();
						}
					} else {
						if (_0xdfbfx3b === _0xae7d[200]) {
							data[_0xae7d[209]](0)[_0xae7d[186]](new Event(_0xae7d[147]));
						}
					}
					data[_0xae7d[151]](_0xae7d[149], _0xae7d[150]);
				}
				var messages = $(name);
				var e = messages[_0xae7d[159]](_0xae7d[158])[_0xae7d[157]](_0xae7d[156]);
				var agent = $(_0xae7d[160] + e);
				var images = theme[_0xae7d[45]];
				if (!messages[_0xae7d[151]](_0xae7d[149])) {
					return;
				}
				if (messages[_0xae7d[162]](_0xae7d[161])) {
					return;
				}
				if (agent[_0xae7d[8]]) {
					if (object) {
						object[_0xae7d[163]]();
					}
				} else {
					if (common[_0xae7d[8]]) {
						if (object) {
							object[_0xae7d[163]]();
						}
						agent = common;
					} else {
						emit(messages);
						return;
					}
				}
				var _0xdfbfx45 = agent[_0xae7d[46]](_0xae7d[164]);
				var _0xdfbfx46 = agent[_0xae7d[46]](_0xae7d[165]);
				var artistTrack = agent[_0xae7d[46]](_0xae7d[166]);
				var Infinity = agent[_0xae7d[157]](_0xae7d[167]);
				var orTmp = agent[_0xae7d[157]](_0xae7d[168]);
				var andTmp = agent[_0xae7d[157]](_0xae7d[169]);
				var tmp = agent[_0xae7d[157]](_0xae7d[170]);
				const _0xdfbfx49 = images[_0xae7d[44]][_0xae7d[43]]((y) => {
					return y[_0xae7d[171]] === +Infinity;
				});
				if (_0xdfbfx49) {
					emit(messages);
					return;
				}
				if (e === Infinity) {
					emit(messages);
					return;
				}
				if (agent[_0xae7d[162]](_0xae7d[172])) {
					emit(messages);
					return;
				}
				_msgSibling[_0xae7d[173]](function(canCreateDiscussions) {
					agent[_0xae7d[177]](_0xae7d[172]);
					if (orTmp && andTmp && tmp) {
						theme[_0xae7d[137]][_0xae7d[179]](orTmp, andTmp, tmp, {
							productId : +Infinity,
							role : _0xae7d[178]
						});
					}
					$realtime[_0xae7d[182]](_0xae7d[180], _0xae7d[181]);
					ShopifyAPI[_0xae7d[190]](artistTrack, (mmCoreSplitViewBlock) => {
						theme[_0xae7d[136]][_0xae7d[183]](agent);
						theme[_0xae7d[137]][_0xae7d[134]](mmCoreSplitViewBlock);
						theme[_0xae7d[140]][_0xae7d[184]]();
						document[_0xae7d[186]](new CustomEvent(_0xae7d[185]));
						setTimeout(() => {
							$realtime[_0xae7d[182]](_0xae7d[180], _0xae7d[187]);
						}, 2E3);
						if (theme[_0xae7d[111]][_0xae7d[188]]) {
							theme[_0xae7d[189]]();
						}
					});
				});
				if (renderHeaders) {
					success();
				} else {
					theme[_0xae7d[136]][_0xae7d[191]](agent);
				}
				agent[_0xae7d[152]](_0xae7d[175], function() {
					removeFromPanes();
					if (theme[_0xae7d[111]][_0xae7d[188]]) {
						theme[_0xae7d[189]]();
						return;
					}
					if (_0xdfbfx3b === _0xae7d[192]) {
						if (!document[_0xae7d[196]][_0xae7d[195]][_0xae7d[194]](_0xae7d[193])) {
							window[_0xae7d[199]][_0xae7d[198]](_0xae7d[197]);
						}
					} else {
						if (_0xdfbfx3b === _0xae7d[200]) {
							if (!document[_0xae7d[1]](_0xae7d[202])[_0xae7d[195]][_0xae7d[194]](_0xae7d[201])) {
								theme[_0xae7d[140]][_0xae7d[184]]();
							}
							$(_0xae7d[196])[_0xae7d[152]](_0xae7d[203], () => {
								$music[_0xae7d[151]](_0xae7d[149], _0xae7d[150]);
							});
						}
					}
				});
				linkCont[_0xae7d[152]](_0xae7d[173], function() {
					theme[_0xae7d[139]][_0xae7d[134]](linkCont);
					theme[_0xae7d[189]]();
				});
				_0xdfbfx46[_0xae7d[174]](function() {
					var stripeAPIVersion = $(this)[_0xae7d[204]]();
					var _0xdfbfx4d = agent[_0xae7d[46]](`${_0xae7d[205]}${stripeAPIVersion}${_0xae7d[21]}`);
					_0xdfbfx45[_0xae7d[206]]();
					_0xdfbfx4d[_0xae7d[207]]();
				});
			}
			theme[_0xae7d[135]][_0xae7d[134]]();
			theme[_0xae7d[136]][_0xae7d[134]]();
			theme[_0xae7d[137]][_0xae7d[134]]();
			theme[_0xae7d[139]][_0xae7d[138]]();
			theme[_0xae7d[140]][_0xae7d[134]]();
			var $music = $(_0xae7d[141]);
			var common = $(_0xae7d[142]);
			var linkCont = $(_0xae7d[143]);
			var _msgSibling = $(_0xae7d[144]);
			var $realtime = $(_0xae7d[145]);
			var _0xdfbfx3b = theme[_0xae7d[111]][_0xae7d[146]];
			$music[_0xae7d[148]](_0xae7d[147]);
			$music[_0xae7d[151]](_0xae7d[149], _0xae7d[150]);
			$music[_0xae7d[152]](_0xae7d[147], function(a) {
				remove(this, a, true);
			});
			if (upsellPopupLoadedFirst) {
				document[_0xae7d[4]](_0xae7d[153], (canCreateDiscussions) => {
					const editingNow = canCreateDiscussions[_0xae7d[155]][_0xae7d[154]];
					if (editingNow) {
						remove(editingNow, null, false);
					}
				});
			}
			/** @type {boolean} */
			upsellPopupLoadedFirst = false;
		}
		const _related2 = document[_0xae7d[1]](_0xae7d[0]);
		if (!_related2) {
			return;
		}
		if (theme[_0xae7d[2]]) {
			await getRevisionFromSurvey();
			removeaToolTip();
		} else {
			document[_0xae7d[4]](_0xae7d[3], async() => {
				await getRevisionFromSurvey();
				removeaToolTip();
			});
		}
	}
	UpsellPopup();
	/**
	 * @param {?} type
	 * @return {undefined}
	 */
	function UpsellCouponCode(type) {
		const ip = document[_0xae7d[1]](_0xae7d[0]);
		if (!ip || !type) {
			return;
		}
		const _0xdfbfx50 = theme[_0xae7d[137]][_0xae7d[210]]();
		if (!_0xdfbfx50[_0xae7d[8]]) {
			return;
		}
		const _0xdfbfx51 = _0xdfbfx50[_0xae7d[213]]((canCreateDiscussions) => {
			if (canCreateDiscussions[_0xae7d[212]](_0xae7d[211])) {
				return canCreateDiscussions[_0xae7d[211]] === _0xae7d[178];
			}
			return false;
		});
		if (!_0xdfbfx51[_0xae7d[8]]) {
			return;
		}
		_0xdfbfx51[_0xae7d[10]]((canCreateDiscussions) => {
			const vvv_5 = canCreateDiscussions[_0xae7d[214]];
			const _0xdfbfx49 = type[_0xae7d[44]][_0xae7d[43]]((lanetext) => {
				return lanetext[_0xae7d[171]] === vvv_5;
			});
			if (!_0xdfbfx49) {
				theme[_0xae7d[137]][_0xae7d[216]](canCreateDiscussions[_0xae7d[215]]);
			}
			theme[_0xae7d[137]][_0xae7d[134]](type);
		});
		document[_0xae7d[186]](new CustomEvent(_0xae7d[185]));
	}
	/**
	 * @param {?} type
	 * @return {undefined}
	 */
	function UpsellNotInCart(type) {
		const ip = document[_0xae7d[1]](_0xae7d[0]);
		if (!ip || !type) {
			return;
		}
		const _0xdfbfx55 = document[_0xae7d[6]](_0xae7d[5]);
		if (_0xdfbfx55[_0xae7d[8]]) {
			_0xdfbfx55[_0xae7d[10]]((isSlidingUp) => {
				const vvv_5 = parseInt(isSlidingUp[_0xae7d[12]][_0xae7d[167]]);
				const _0xdfbfx49 = type[_0xae7d[44]][_0xae7d[43]]((lanetext) => {
					return lanetext[_0xae7d[171]] === vvv_5;
				});
				if (!_0xdfbfx49) {
					if (isSlidingUp[_0xae7d[195]][_0xae7d[194]](_0xae7d[172])) {
						isSlidingUp[_0xae7d[195]][_0xae7d[9]](_0xae7d[172]);
					}
				}
			});
		}
	}
	$(_0xae7d[196])[_0xae7d[152]](_0xae7d[203], (canCreateDiscussions, unbindFinished) => {
		UpsellCouponCode(unbindFinished);
		UpsellNotInCart(unbindFinished);
	});
	if ($(_0xae7d[196])[_0xae7d[162]](_0xae7d[193])) {
		if (theme[_0xae7d[2]]) {
			UpsellCouponCode(theme[_0xae7d[45]]);
		} else {
			document[_0xae7d[4]](_0xae7d[3], () => {
				UpsellCouponCode(theme[_0xae7d[45]]);
			});
		}
	}
	$(_0xae7d[196])[_0xae7d[152]](_0xae7d[217], function(canCreateDiscussions) {
		UpsellPopup();
	});
	$(_0xae7d[196])[_0xae7d[152]](_0xae7d[218], function(canCreateDiscussions) {
		UpsellPopup();
	});
	document[_0xae7d[4]](_0xae7d[219], () => {
		UpsellPopup();
	});
	
	{%- endif -%} } 
	
	function themeUpsellPopupDestroy() { {%- if settings.dbtfy_upsell_popup -%}
	'use strict';
	/** @type {!Array} */
	var _0xe5eb = ["dbtfy-upsell_popup-destroy", "add", "classList", "body", "afterRecommendationLoad", "on", "QuickViewLoaded", "addEventListener", ".dbtfy-upsell_popup", "querySelectorAll", "length", "remove", "forEach"];
	document[_0xe5eb[3]][_0xe5eb[2]][_0xe5eb[1]](_0xe5eb[0]);
	destroyUpsellPopup();
	$(_0xe5eb[3])[_0xe5eb[5]](_0xe5eb[4], function(canCreateDiscussions) {
		destroyUpsellPopup();
	});
	document[_0xe5eb[7]](_0xe5eb[6], () => {
		destroyUpsellPopup();
	});
	/**
	 * @return {undefined}
	 */
	function destroyUpsellPopup() {
		const _0x5a67x3 = document[_0xe5eb[9]](_0xe5eb[8]);
		if (_0x5a67x3[_0xe5eb[10]]) {
			_0x5a67x3[_0xe5eb[12]]((canCreateDiscussions) => {
				canCreateDiscussions[_0xe5eb[11]]();
			});
		}
	};
	{%- endif -%} } /* end-dbtfy-upsell-popup */
	
	
	
		/* start-dbtfy-wish-list */ function themeWishList(){ {%- if settings.dbtfy_wish_list -%}
	// WARNING! This file contains some subset of JS that is not supported by type inference.
	// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
	'use strict';
	var _0x41c2 = [".dbtfy-wish_list", "querySelector", "wishlist", "wl-active", "hidden", "btn-outline-primary", "btn--primary", ".wl-add", ".wl-remove", ".wl-button", ".wl-select", ".wl-item", ".wl-count", ".wl-social-sharing", ".wl-no-item", "querySelectorAll", ".wl-bubble", "WishlistTemplate", "getElementById", "wish-list-page", "register", "afterRecommendationLoad", "on", "body", "shopify:section:load", "length", "filter", "", "addButtons", '[data-product-handle="', '"]', "data-remove-wish-list-text", 
	"getAttribute", "activeClass", "add", "classList", "aria-label", "setAttribute", "title", "forEach", "bubbleIcons", "wish-list", "<!doctype html>", "includes", "reduce", "entries", "fetchProductMarkup", "data-has-click-event", "hasAttribute", "click", "productHandle", "dataset", "contains", "data-add-wish-list-text", "remove", "addEventListener", "true", "removeButtons", "preventDefault", "data-has-remove-event", "?wishlist", "indexOf", "href", "location", "?", "split", ",", "get", "push", "stringify", 
	"noItems", "wishlistSocial", '<div id="WishlistCard-', '" class="card fadeInUp"><div class="card-body">', "</div></div>", "afterbegin", "insertAdjacentHTML", "pageTemplate", "%3Fwishlist=", ".btn-facebook", ".btn-twitter", ".btn-pinterest", ".btn-whatsapp", ".btn-linkedin", ".btn-reddit", ".btn-email", ".btn-messenger", "shareContent", "//www.facebook.com/sharer/sharer.php?u=", "&quote=", "//twitter.com/intent/tweet?source=", "&text=", "%20", "shareMedia", "//pinterest.com/pin/create/button/?url=", 
	"&media=", "&description=", "//api.whatsapp.com/send?text=", "shareTitle", "shareDescription", "//www.linkedin.com/shareArticle?mini=true&url=", "&title=", "&summary=", "&source=", "//www.reddit.com/submit?url=", "mailto:?subject=", "&body=", "%0D%0D", "%0D", "fb-messenger://share/?link=", "&app_id={{ settings.facebook_page_id }}", "submitButtons", "atcSelects", "init", "loadingState", "ajaxCart.afterCartLoad", "destroy", "change", "nextElementSibling", "wishlistAdded", "cartType", "settings", "drawer", 
	"RightDrawer", "open", "id", "value", "some", "items", "submitButtonDefaultClass", "submitButtonAddedClass", "selectedIndex", "ajaxCart.cartAddError", "#currency-list-header[name='dbtfy-custom-currencies']", "data-variant-title", "data-variant-price", "shopCurrency", "strings", "currentCurrency", "convert", "money_format", "moneyFormats", "formatMoney", "innerHTML", " - ", "options", "from", "ajaxCart", "WishlistCard-", "display", "style", "block", "none", "wlCounts", "localStorageName", "getItem", 
	"parse", "setItem"];
	function Wishlist() {
		function saveSongMetadataToStorage() {
			const _0xf84ex5 = new theme.Sections;
			_0xf84ex5[_0x41c2[20]](_0x41c2[19], get);
			cb();
			$(_0x41c2[23])[_0x41c2[22]](_0x41c2[21], function(canCreateDiscussions) {
				cb();
			});
			$(document)[_0x41c2[22]](_0x41c2[24], function(canCreateDiscussions) {
				cb();
			});
		}
		function cb() {
			join();
			success();
			handleError();
		}
		function join() {
			const _0xf84ex9 = split();
			if (!_0xf84ex9 || !_0xf84ex9[_0x41c2[25]]) {
				show(0);
				return;
			}
			const _0xf84exa = _0xf84ex9[_0x41c2[26]]((canCreateDiscussions) => {
				return !!canCreateDiscussions;
			});
			_0xf84exa[_0x41c2[39]]((searchSortBy) => {
				const _0xf84exd = document[_0x41c2[15]](`${_0x41c2[27]}${a[_0x41c2[28]]}${_0x41c2[29]}${searchSortBy}${_0x41c2[30]}`);
				if (_0xf84exd) {
					_0xf84exd[_0x41c2[39]]((NodeEndpoint) => {
						let typoScriptPath = NodeEndpoint[_0x41c2[32]](_0x41c2[31]);
						NodeEndpoint[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[33]]);
						NodeEndpoint[_0x41c2[37]](_0x41c2[36], typoScriptPath);
						NodeEndpoint[_0x41c2[37]](_0x41c2[38], typoScriptPath);
					});
				}
			});
			has(a[_0x41c2[40]], true);
			theme[_0x41c2[46]]({
				template : _0x41c2[41],
				productHandles : _0xf84exa
			}, (descriptor) => {
				const b = Object[_0x41c2[45]](descriptor)[_0x41c2[44]]((canCreateDiscussions, [privEnv, privKey]) => {
					if (privKey[_0x41c2[43]](_0x41c2[42])) {
						return canCreateDiscussions;
					}
					return canCreateDiscussions + 1;
				}, 0);
				show(b);
			});
		}
		function success() {
			const _0xf84ex15 = document[_0x41c2[15]](a[_0x41c2[28]]);
			if (_0xf84ex15 && _0xf84ex15[_0x41c2[25]]) {
				_0xf84ex15[_0x41c2[39]]((_related2) => {
					const _0xf84ex17 = _related2[_0x41c2[48]](_0x41c2[47]);
					if (!_0xf84ex17) {
						_related2[_0x41c2[55]](_0x41c2[49], () => {
							const node = _related2[_0x41c2[51]][_0x41c2[50]];
							const _0xf84ex18 = _related2[_0x41c2[35]][_0x41c2[52]](a[_0x41c2[33]]);
							const depsOptions = !_0xf84ex18;
							const relation = _related2[_0x41c2[32]](_0x41c2[53]);
							const relationName = _related2[_0x41c2[32]](_0x41c2[31]);
							if (!node) {
								return;
							}
							if (_0xf84ex18) {
								_related2[_0x41c2[35]][_0x41c2[54]](a[_0x41c2[33]]);
								_related2[_0x41c2[37]](_0x41c2[36], relation);
								_related2[_0x41c2[37]](_0x41c2[38], relation);
							} else {
								_related2[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[33]]);
								_related2[_0x41c2[37]](_0x41c2[36], relationName);
								_related2[_0x41c2[37]](_0x41c2[38], relationName);
							}
							reportIfMissing(depsOptions, node);
						});
						_related2[_0x41c2[37]](_0x41c2[47], _0x41c2[56]);
					}
				});
			}
		}
		function handleError() {
			const _0xf84ex1c = document[_0x41c2[15]](a[_0x41c2[57]]);
			if (_0xf84ex1c && _0xf84ex1c[_0x41c2[25]]) {
				_0xf84ex1c[_0x41c2[39]]((canCreateDiscussions) => {
					const _0xf84ex17 = canCreateDiscussions[_0x41c2[48]](_0x41c2[47]);
					if (!_0xf84ex17) {
						canCreateDiscussions[_0x41c2[55]](_0x41c2[49], (isSlidingUp) => {
							isSlidingUp[_0x41c2[58]]();
							const node = canCreateDiscussions[_0x41c2[51]][_0x41c2[50]];
							if (!node || canCreateDiscussions[_0x41c2[48]](_0x41c2[59])) {
								return;
							}
							reportIfMissing(false, node);
						});
						canCreateDiscussions[_0x41c2[37]](_0x41c2[47], _0x41c2[56]);
					}
				});
			}
		}
		function get() {
			let data = split();
			if (window[_0x41c2[63]][_0x41c2[62]][_0x41c2[61]](_0x41c2[60]) > -1) {
				const urlParts = window[_0x41c2[63]][_0x41c2[62]][_0x41c2[65]](_0x41c2[64]);
				const _0xf84ex21 = new URLSearchParams(urlParts[1]);
				const _0xf84ex22 = _0xf84ex21[_0x41c2[67]](_0x41c2[2])[_0x41c2[65]](_0x41c2[66]);
				_0xf84ex22[_0x41c2[39]](function(value) {
					if (!data || !data[_0x41c2[25]]) {
						data = [value];
					} else {
						data = data[_0x41c2[26]]((optionsValue) => {
							return optionsValue !== value;
						});
						data[_0x41c2[68]](value);
					}
				});
				data = JSON[_0x41c2[69]](data);
				indexOf(data);
				join();
				data = split();
			}
			if (!data || !data[_0x41c2[25]]) {
				has(a[_0x41c2[70]], true);
				has([a[_0x41c2[71]]], false);
				return;
			}
			const allowedStr = data[_0x41c2[26]]((canCreateDiscussions) => {
				return !!canCreateDiscussions;
			});
			has(a[_0x41c2[70]], false);
			has([a[_0x41c2[71]]], true);
			theme[_0x41c2[46]]({
				template : _0x41c2[41],
				productHandles : allowedStr
			}, (descriptor) => {
				let b = 0;
				const artistTrack = Object[_0x41c2[45]](descriptor)[_0x41c2[44]]((url, [stripeAPIVersion, allowedStr]) => {
					if (allowedStr[_0x41c2[43]](_0x41c2[42])) {
						return url;
					}
					b++;
					return url + `${_0x41c2[72]}${stripeAPIVersion}${_0x41c2[73]}${allowedStr}${_0x41c2[74]}`;
				}, _0x41c2[27]);
				show(b);
				if (!artistTrack) {
					has(a[_0x41c2[70]], true);
					has([a[_0x41c2[71]]], false);
					show(0);
				} else {
					a[_0x41c2[77]][_0x41c2[76]](_0x41c2[75], artistTrack);
					success();
					handleError();
					on();
					constructResolvingMessage();
					themeUpsellPopup();
				}
			});
			const ms = `${_0x41c2[27]}${window[_0x41c2[63]][_0x41c2[62]]}${_0x41c2[78]}${allowedStr}${_0x41c2[27]}`;
			const validators = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[79]) : null;
			const _0xf84ex28 = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[80]) : null;
			const _0xf84ex29 = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[81]) : null;
			const _0xf84ex2a = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[82]) : null;
			const _0xf84ex2b = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[83]) : null;
			const _0xf84ex2c = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[84]) : null;
			const _0xf84ex2d = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[85]) : null;
			const _0xf84ex2e = a[_0x41c2[71]] ? a[_0x41c2[71]][_0x41c2[1]](_0x41c2[86]) : null;
			if (validators) {
				let allowedStr = validators[_0x41c2[51]][_0x41c2[87]];
				validators[_0x41c2[37]](_0x41c2[62], `${_0x41c2[88]}${ms}${_0x41c2[89]}${allowedStr}${_0x41c2[27]}`);
			}
			if (_0xf84ex28) {
				let objStr = _0xf84ex28[_0x41c2[51]][_0x41c2[87]];
				_0xf84ex28[_0x41c2[37]](_0x41c2[62], `${_0x41c2[90]}${ms}${_0x41c2[91]}${ms}${_0x41c2[92]}${objStr}${_0x41c2[27]}`);
			}
			if (_0xf84ex29) {
				let objStr = _0xf84ex29[_0x41c2[51]][_0x41c2[87]];
				let allowedStr = encodeURIComponent(_0xf84ex29[_0x41c2[51]][_0x41c2[93]]);
				_0xf84ex29[_0x41c2[37]](_0x41c2[62], `${_0x41c2[94]}${ms}${_0x41c2[95]}${allowedStr}${_0x41c2[96]}${objStr}${_0x41c2[27]}`);
			}
			if (_0xf84ex2a) {
				_0xf84ex2a[_0x41c2[37]](_0x41c2[62], `${_0x41c2[97]}${ms}${_0x41c2[27]}`);
			}
			if (_0xf84ex2b) {
				let allowedStr = _0xf84ex2b[_0x41c2[51]][_0x41c2[98]];
				let objStr = _0xf84ex2b[_0x41c2[51]][_0x41c2[99]];
				_0xf84ex2b[_0x41c2[37]](_0x41c2[62], `${_0x41c2[100]}${ms}${_0x41c2[101]}${allowedStr}${_0x41c2[102]}${objStr}${_0x41c2[103]}${ms}${_0x41c2[27]}`);
			}
			if (_0xf84ex2c) {
				let allowedStr = _0xf84ex2c[_0x41c2[51]][_0x41c2[87]];
				_0xf84ex2c[_0x41c2[37]](_0x41c2[62], `${_0x41c2[104]}${ms}${_0x41c2[101]}${allowedStr}${_0x41c2[27]}`);
			}
			if (_0xf84ex2d) {
				let objStr = _0xf84ex2d[_0x41c2[51]][_0x41c2[87]];
				let stripeAPIVersion = _0xf84ex2d[_0x41c2[51]][_0x41c2[98]];
				_0xf84ex2d[_0x41c2[37]](_0x41c2[62], `${_0x41c2[105]}${stripeAPIVersion}${_0x41c2[106]}${ms}${_0x41c2[107]}${objStr}${_0x41c2[108]}`);
			}
			if (_0xf84ex2e) {
				_0xf84ex2e[_0x41c2[37]](_0x41c2[62], `${_0x41c2[109]}${ms}${_0x41c2[110]}`);
			}
		}
		function on() {
			const _0xf84ex34 = document[_0x41c2[15]](a[_0x41c2[111]]);
			const _0xf84ex35 = document[_0x41c2[15]](a[_0x41c2[112]]);
			if (_0xf84ex34 && _0xf84ex34[_0x41c2[25]]) {
				_0xf84ex34[_0x41c2[39]]((mmCoreSplitViewBlock) => {
					mmCoreSplitViewBlock[_0x41c2[55]](_0x41c2[49], (canCreateDiscussions) => {
						theme[_0x41c2[114]][_0x41c2[113]](mmCoreSplitViewBlock);
						$(_0x41c2[23])[_0x41c2[22]](_0x41c2[115], (canCreateDiscussions, isSlidingUp) => {
							theme[_0x41c2[114]][_0x41c2[116]](mmCoreSplitViewBlock);
						});
					});
				});
			}
			if (_0xf84ex35[_0x41c2[25]]) {
				_0xf84ex35[_0x41c2[39]]((itemElement) => {
					itemElement[_0x41c2[55]](_0x41c2[117], (canCreateDiscussions) => {
						const _0xf84ex39 = $(_0x41c2[23]);
						const _0xf84ex3a = itemElement[_0x41c2[118]];
						if (_0xf84ex3a) {
							has([itemElement], false);
							has([_0xf84ex3a], true);
							_0xf84ex3a[_0x41c2[49]]();
							window[_0x41c2[119]] = true;
							_0xf84ex39[_0x41c2[22]](_0x41c2[115], (isSlidingUp, canCreateDiscussions) => {
								if (theme[_0x41c2[121]][_0x41c2[120]] === _0x41c2[122]) {
									timber[_0x41c2[123]][_0x41c2[113]]();
									timber[_0x41c2[123]][_0x41c2[124]]();
								}
								has([itemElement], true);
								has([_0xf84ex3a], false);
								const _0xf84ex3b = canCreateDiscussions[_0x41c2[128]][_0x41c2[127]]((canCreateDiscussions) => {
									return canCreateDiscussions[_0x41c2[125]] === +itemElement[_0x41c2[126]];
								});
								if (_0xf84ex3b) {
									_0xf84ex3a[_0x41c2[35]][_0x41c2[54]](a[_0x41c2[129]]);
									_0xf84ex3a[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[130]]);
									itemElement[_0x41c2[35]][_0x41c2[54]](a[_0x41c2[129]]);
									itemElement[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[130]]);
								} else {
									_0xf84ex3a[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[129]]);
									_0xf84ex3a[_0x41c2[35]][_0x41c2[54]](a[_0x41c2[130]]);
									itemElement[_0x41c2[35]][_0x41c2[34]](a[_0x41c2[129]]);
									itemElement[_0x41c2[35]][_0x41c2[54]](a[_0x41c2[130]]);
									itemElement[_0x41c2[131]] = 0;
								}
							});
							_0xf84ex39[_0x41c2[22]](_0x41c2[132], (canCreateDiscussions, isSlidingUp) => {
								has([itemElement], true);
								has([_0xf84ex3a], false);
							});
						}
					});
					var $realtime = $(_0x41c2[133]);
					if ($realtime[_0x41c2[25]]) {
						Array[_0x41c2[146]](itemElement[_0x41c2[145]])[_0x41c2[39]]((final) => {
							let stripeAPIVersion = final[_0x41c2[32]](_0x41c2[134]);
							let data = parseFloat(final[_0x41c2[32]](_0x41c2[135]));
							let item = theme[_0x41c2[137]][_0x41c2[136]];
							if (!isNaN(data)) {
								var itemData = Currency[_0x41c2[139]](data, item, Currency[_0x41c2[138]]);
								var value = Currency[_0x41c2[142]](itemData, Currency[_0x41c2[141]][Currency[_0x41c2[138]]][_0x41c2[140]]);
								final[_0x41c2[143]] = `${_0x41c2[27]}${stripeAPIVersion}${_0x41c2[144]}${value}${_0x41c2[27]}`;
							}
						});
					}
				});
			}
		}
		function constructResolvingMessage() {
			if (theme[_0x41c2[121]][_0x41c2[120]] === _0x41c2[122]) {
				theme[_0x41c2[147]][_0x41c2[113]]();
			}
		}
		function reportIfMissing(depsOptions, node) {
			const _0xf84ex46 = document[_0x41c2[18]](`${_0x41c2[148]}${node}${_0x41c2[27]}`);
			let nodes = split();
			if (depsOptions) {
				if (!nodes) {
					nodes = [node];
				} else {
					nodes[_0x41c2[68]](node);
				}
			} else {
				if (_0xf84ex46) {
					_0xf84ex46[_0x41c2[54]]();
				}
				nodes = nodes[_0x41c2[26]]((i) => {
					return i !== node;
				});
			}
			if (nodes && nodes[_0x41c2[25]]) {
				has(a[_0x41c2[40]], true);
				has(a[_0x41c2[70]], false);
				has([a[_0x41c2[71]]], true);
			} else {
				has(a[_0x41c2[40]], false);
				has(a[_0x41c2[70]], true);
				has([a[_0x41c2[71]]], false);
			}
			nodes = JSON[_0x41c2[69]](nodes);
			indexOf(nodes);
			join();
		}
		function has(thIs, before) {
			if (thIs[_0x41c2[25]]) {
				thIs[_0x41c2[39]]((canCreateDiscussions) => {
					if (canCreateDiscussions) {
						canCreateDiscussions[_0x41c2[150]][_0x41c2[149]] = before ? _0x41c2[151] : _0x41c2[152];
					}
				});
			}
		}
		function show(d) {
			const _0xf84ex4e = document[_0x41c2[15]](a[_0x41c2[153]]);
			if (_0xf84ex4e[_0x41c2[25]]) {
				_0xf84ex4e[_0x41c2[39]]((storeData) => {
					storeData[_0x41c2[143]] = d;
				});
			}
		}
		function split() {
			const data = localStorage[_0x41c2[155]](a[_0x41c2[154]]);
			return JSON[_0x41c2[156]](data);
		}
		function indexOf(array) {
			localStorage[_0x41c2[157]](a[_0x41c2[154]], array);
		}
		const _0xf84ex2 = document[_0x41c2[1]](_0x41c2[0]);
		if (!_0xf84ex2) {
			return;
		}
		const a = {
			localStorageName : _0x41c2[2],
			activeClass : _0x41c2[3],
			hiddenClass : _0x41c2[4],
			submitButtonDefaultClass : _0x41c2[5],
			submitButtonAddedClass : _0x41c2[6],
			addButtons : _0x41c2[7],
			removeButtons : _0x41c2[8],
			submitButtons : _0x41c2[9],
			atcSelects : _0x41c2[10],
			wlItems : _0x41c2[11],
			wlCounts : _0x41c2[12],
			wishlistSocial : document[_0x41c2[1]](_0x41c2[13]),
			noItems : document[_0x41c2[15]](_0x41c2[14]),
			bubbleIcons : document[_0x41c2[15]](_0x41c2[16]),
			pageTemplate : document[_0x41c2[18]](_0x41c2[17])
		};
		saveSongMetadataToStorage();
	}
	Wishlist();
	
		{%- endif -%} } 
	
	
		function themeWishListDestroy() { {%- if settings.dbtfy_wish_list -%}
		'use strict';
		/** @type {!Array} */
		var _0x1eea = ["dbtfy-wish_list-destroy", "add", "classList", "body", "afterRecommendationLoad", "on", "ajaxCart.afterCartLoad", ".dbtfy-wish_list", "querySelectorAll", "length", "remove", "forEach"];
		document[_0x1eea[3]][_0x1eea[2]][_0x1eea[1]](_0x1eea[0]);
		destroyWishlist();
		$(_0x1eea[3])[_0x1eea[5]](_0x1eea[4], function(canCreateDiscussions) {
			destroyWishlist();
		});
		$(_0x1eea[3])[_0x1eea[5]](_0x1eea[6], function(canCreateDiscussions) {
			destroyWishlist();
		});
		/**
		 * @return {undefined}
		 */
		function destroyWishlist() {
			const _0xab53x3 = document[_0x1eea[8]](_0x1eea[7]);
			if (_0xab53x3[_0x1eea[9]]) {
				_0xab53x3[_0x1eea[11]]((canCreateDiscussions) => {
					canCreateDiscussions[_0x1eea[10]]();
				});
			}
		};
	
		{%- endif -%} } /* end-dbtfy-wish-list */
	
	
		'use strict';
	/** @type {!Array} */
	var _0xd7c5 = ["dbtfy:loaded", "product-template", "register", "faq-page", "instagram-feed", "header-section", "upsell-popup", "enabledAddons", "detail", "entries", "name", "some", "init", "destroy", "addEventListener"];
	document[_0xd7c5[14]](_0xd7c5[0], function(canCreateDiscussions) {
		var _0xa1d1x2 = new theme.Sections;
		const target = {
			"dbtfy_addtocart_animation" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[1], themeAddtocartAnimation);
				},
				"destroy" : () => {
				}
			},
			"dbtfy_age_check" : {
				"init" : themeAgeCheck,
				"destroy" : themeAgeCheckDestroy
			},
			"dbtfy_agree_to_terms" : {
				"init" : themeAgreeToTerms,
				"destroy" : themeAgreeToTermsDestroy
			},
			"dbtfy_automatic_geolocation" : {
				"init" : themeAutomaticGeolocation,
				"destroy" : () => {
				}
			},
			"dbtfy_back_in_stock" : {
				"init" : themeBackInStock,
				"destroy" : themeBackInStockDestroy
			},
			"dbtfy_cart_countdown" : {
				"init" : themeCartCountdown,
				"destroy" : themeCartCountdownDestroy
			},
			"dbtfy_cart_discount" : {
				"init" : themeCartDiscount,
				"destroy" : themeCartDiscountDestroy
			},
			"dbtfy_cart_favicon" : {
				"init" : themeCartFavicon,
				"destroy" : () => {
				}
			},
			"dbtfy_cart_goal" : {
				"init" : themeCartGoal,
				"destroy" : themeCartGoalDestroy
			},
			"dbtfy_cart_savings" : {
				"init" : themeCartSavings,
				"destroy" : themeCartSavingsDestroy
			},
			"dbtfy_cart_upsell" : {
				"init" : themeCartUpsell,
				"destroy" : themeCartUpsellDestroy
			},
			"dbtfy_collection_addtocart" : {
				"init" : themeCollectionAddtocart,
				"destroy" : themeCollectionAddtocartDestroy
			},
			"dbtfy_collection_filters" : {
				"init" : themeCollectionFilters,
				"destroy" : themeCollectionFiltersDestroy
			},
			"dbtfy_color_swatches" : {
				"init" : themeColorSwatches,
				"destroy" : themeColorSwatchesDestroy
			},
			"dbtfy_cookie_box" : {
				"init" : themeCookieBox,
				"destroy" : themeCookieBoxDestroy
			},
			"dbtfy_custom_currencies" : {
				"init" : themeCustomCurrencies,
				"destroy" : themeCustomCurrenciesDestroy
			},
			"dbtfy_delivery_time" : {
				"init" : themeDeliveryTime,
				"destroy" : themeDeliveryTimeDestroy
			},
			"dbtfy_discount_saved" : {
				"init" : themeDiscountSaved,
				"destroy" : themeDiscountSavedDestroy
			},
			"dbtfy_faq_page" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[3], themeFaqPage);
				},
				"destroy" : themeFaqPageDestroy
			},
			"dbtfy_facebook_messenger" : {
				"init" : () => {
				},
				"destroy" : themeFacebookMessengerDestroy
			},
			"dbtfy_inactive_tab_message" : {
				"init" : themeInactiveTabMessage,
				"destroy" : () => {
				}
			},
			"dbtfy_infinite_scroll" : {
				"init" : themeInfiniteScroll,
				"destroy" : themeInfiniteScrollDestroy
			},
			"dbtfy_instagram_feed" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[4], themeInstagramFeed);
				},
				"destroy" : themeInstagramFeedDestroy
			},
			"dbtfy_inventory_quantity" : {
				"init" : themeInventoryQuantity,
				"destroy" : themeInventoryQuantityDestroy
			},
			"dbtfy_linked_options" : {
				"init" : themeLinkedOptions,
				"destroy" : () => {
				}
			},
			"dbtfy_live_view" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[1], themeLiveView);
				},
				"destroy" : themeLiveViewDestroy
			},
			"dbtfy_mega_menu" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[5], themeMegaMenu);
				},
				"destroy" : themeMegaMenuDestroy
			},
			"dbtfy_menu_bar" : {
				"init" : () => {
				},
				"destroy" : themeMenuBarDestroy
			},
			"dbtfy_newsletter_popup" : {
				"init" : themeNewsletterPopup,
				"destroy" : themeNewsletterPopupDestroy
			},
			"dbtfy_order_feedback" : {
				"init" : themeOrderFeedback,
				"destroy" : themeOrderFeedbackDestroy
			},
			"dbtfy_order_tracking" : {
				"init" : themeOrderTracking,
				"destroy" : themeOrderTrackingDestroy
			},
			"dbtfy_page_builder" : {
				"init" : themePageBuilder,
				"destroy" : themePageBuilderDestroy
			},
			"dbtfy_page_speed_booster" : {
				"init" : themePageSpeedBooster,
				"destroy" : () => {
				}
			},
			"dbtfy_page_transition" : {
				"init" : themePageTransition,
				"destroy" : themePageTransitionDestroy
			},
			"dbtfy_pricing_table" : {
				"init" : () => {
				},
				"destroy" : themePricingTableDestroy
			},
			"dbtfy_product_bullet_points" : {
				"init" : themeProductBulletPoints,
				"destroy" : themeProductBulletPointsDestroy
			},
			"dbtfy_product_image_crop" : {
				"init" : () => {
				},
				"destroy" : themeProductImageCropDestroy
			},
			"dbtfy_product_tabs" : {
				"init" : () => {
				},
				"destroy" : themeProductTabsDestroy
			},
			"dbtfy_quantity_breaks" : {
				"init" : themeQuantityBreaks,
				"destroy" : themeQuantityBreaksDestroy
			},
			"dbtfy_quick_view" : {
				"init" : themeQuickView,
				"destroy" : themeQuickViewDestroy
			},
			"dbtfy_recently_viewed" : {
				"init" : themeRecentlyViewed,
				"destroy" : themeRecentlyViewedDestroy
			},
			"dbtfy_sales_countdown" : {
				"init" : themeSalesCountdown,
				"destroy" : themeSalesCountdownDestroy
			},
			"dbtfy_sales_pop" : {
				"init" : themeSalesPop,
				"destroy" : themeSalesPopDestroy
			},
			"dbtfy_shop_protect" : {
				"init" : themeShopProtect,
				"destroy" : () => {
				}
			},
			"dbtfy_size_chart" : {
				"init" : themeSizeChart,
				"destroy" : themeSizeChartDestroy
			},
			"dbtfy_smart_search" : {
				"init" : themeSmartSearch,
				"destroy" : themeSmartSearchDestroy
			},
			"dbtfy_social_discount" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[1], themeSocialDiscount);
				},
				"destroy" : themeSocialDiscountDestroy
			},
			"dbtfy_sticky_addtocart" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[1], themeStickyAddtocart);
				},
				"destroy" : themeStickyAddtocartDestroy
			},
			"dbtfy_synced_variant_image" : {
				"init" : themeSyncedVariantImage,
				"destroy" : () => {
				}
			},
			"dbtfy_trust_badge" : {
				"init" : () => {
				},
				"destroy" : themeTrustBadgeDestroy
			},
			"dbtfy_upsell_bundles" : {
				"init" : themeUpsellBundles,
				"destroy" : themeUpsellBundlesDestroy
			},
			"dbtfy_upsell_popup" : {
				"init" : () => {
					_0xa1d1x2[_0xd7c5[2]](_0xd7c5[6], themeUpsellPopup);
				},
				"destroy" : themeUpsellPopupDestroy
			},
			"dbtfy_wish_list" : {
				"init" : themeWishList,
				"destroy" : themeWishListDestroy
			}
		};
		const _0xa1d1x4 = canCreateDiscussions[_0xd7c5[8]][_0xd7c5[7]];
		for (const [vvv_5, privKey] of Object[_0xd7c5[9]](target)) {
			const _0xa1d1x5 = _0xa1d1x4[_0xd7c5[11]]((lanetext) => {
				return lanetext[_0xd7c5[10]] === vvv_5;
			});
			if (_0xa1d1x5) {
				privKey[_0xd7c5[12]]();
			} else {
				privKey[_0xd7c5[13]]();
			}
		}
	});

	})();